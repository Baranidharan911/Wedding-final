// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: sjEjRYlD67Hh
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import ButtonContainer from "../../ButtonContainer"; // plasmic-import: dK0EsHLm2W5O/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Prompt from "../../Prompt"; // plasmic-import: j21kCiisYxeO/component
import { useScreenVariants as useScreenVariantszapf5SksSeNd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ZAPF5sksSeNd/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicPricingCard.module.css"; // plasmic-import: sjEjRYlD67Hh/css
import CheckCircleSvgrepoComSvgIcon from "./icons/PlasmicIcon__CheckCircleSvgrepoComSvg"; // plasmic-import: DuhYsSUMBDaK/icon

createPlasmicElementProxy;

export const PlasmicPricingCard__VariantProps = new Array();

export const PlasmicPricingCard__ArgProps = new Array();

const $$ = {};

function PlasmicPricingCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "requestPricing.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "enquiryForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "enquiryForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "enquiryForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "enquiryForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "dateTimePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "textArea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszapf5SksSeNd()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"card"}
      data-plasmic-override={overrides.card}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.card
      )}
    >
      <div
        data-plasmic-name={"info"}
        data-plasmic-override={overrides.info}
        className={classNames(projectcss.all, sty.info)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__yuyDj
          )}
        >
          {""}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___5QpPx
          )}
        >
          {""}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__qXbSt
          )}
        >
          {"Per Day"}
        </div>
      </div>
      <div
        data-plasmic-name={"description"}
        data-plasmic-override={overrides.description}
        className={classNames(projectcss.all, sty.description)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__uhq4N
          )}
        >
          {""}
        </div>
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"list"}
        data-plasmic-override={overrides.list}
        hasGap={true}
        className={classNames(projectcss.all, sty.list)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([]).map(
          (__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <Stack__
                as={"div"}
                data-plasmic-name={"listItem"}
                data-plasmic-override={overrides.listItem}
                hasGap={true}
                className={classNames(projectcss.all, sty.listItem)}
                key={currentIndex}
              >
                <CheckCircleSvgrepoComSvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kTgya
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "6-hour coverage.";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
            );
          }
        )}
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"contact"}
        data-plasmic-override={overrides.contact}
        hasGap={true}
        className={classNames(projectcss.all, sty.contact)}
      >
        <AntdModal
          data-plasmic-name={"requestPricing"}
          data-plasmic-override={overrides.requestPricing}
          className={classNames("__wab_instance", sty.requestPricing)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          hideFooter={true}
          modalScopeClassName={sty["requestPricing__modal"]}
          onOpenChange={async (...eventArgs) => {
            generateStateOnChangeProp($state, ["requestPricing", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["requestPricing", "open"])}
          title={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__roOFi
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return `Enquiry Form`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Modal title";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          }
          trigger={
            <ButtonContainer
              className={classNames(
                "__wab_instance",
                sty.buttonContainer__bOqX
              )}
            >
              <AntdButton
                className={classNames("__wab_instance", sty.button__ub020)}
                type={"ghost"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sdqNh
                  )}
                >
                  {"Request Pricing"}
                </div>
              </AntdButton>
            </ButtonContainer>
          }
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.enquiryForm),
                extendedOnValuesChange: async (...eventArgs) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["enquiryForm", "value"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                formItems: [
                  { label: "Name", name: "name", inputType: "Text" },
                  { label: "Message", name: "message", inputType: "Text Area" }
                ],

                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: "advanced",
                onIsSubmittingChange: async (...eventArgs) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["enquiryForm", "isSubmitting"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                ref: ref => {
                  $refs["enquiryForm"] = ref;
                },
                submitSlot: null,
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "enquiryForm.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "enquiryForm.isSubmitting"
                  }
                ],

                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );
              return (
                <FormWrapper
                  data-plasmic-name={"enquiryForm"}
                  data-plasmic-override={overrides.enquiryForm}
                  {...child$Props}
                >
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__vocLx
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__n8T9I
                        )}
                      >
                        {"Wedding Date"}
                      </div>
                    }
                    name={"date"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.dateTimePicker
                        ),
                        onChange: async (...eventArgs) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["dateTimePicker", "value"],
                            AntdDatePicker_Helpers
                          ).apply(null, eventArgs);
                        },
                        popupScopeClassName:
                          sty["dateTimePicker__datePickerPopup"],
                        value: generateStateValueProp($state, [
                          "dateTimePicker",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "dateTimePicker.value"
                          }
                        ],

                        [],
                        AntdDatePicker_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdDatePicker
                          data-plasmic-name={"dateTimePicker"}
                          data-plasmic-override={overrides.dateTimePicker}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__iMb44
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rBOT
                        )}
                      >
                        {"Details about the Wedding"}
                      </div>
                    }
                    name={"message"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.textArea2),
                        onChange: async (...eventArgs) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["textArea2", "value"],
                            AntdTextArea_Helpers
                          ).apply(null, eventArgs);
                        },
                        value: generateStateValueProp($state, [
                          "textArea2",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "textArea2.value"
                          }
                        ],

                        [],
                        AntdTextArea_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdTextArea
                          data-plasmic-name={"textArea2"}
                          data-plasmic-override={overrides.textArea2}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__yrkP9
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mRnDf
                        )}
                      >
                        {"Budget in mind"}
                      </div>
                    }
                    name={"budget"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input3),
                        onChange: async (...eventArgs) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input3", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        value: generateStateValueProp($state, [
                          "input3",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input3.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input3"}
                          data-plasmic-override={overrides.input3}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__wzWdH
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__c6Dg
                        )}
                      >
                        {"Location of Event"}
                      </div>
                    }
                    name={"location"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input2),
                        onChange: async (...eventArgs) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input2", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        value: generateStateValueProp($state, [
                          "input2",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input2.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input2"}
                          data-plasmic-override={overrides.input2}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <ButtonContainer
                    className={classNames(
                      "__wab_instance",
                      sty.buttonContainer__glKa3
                    )}
                  >
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__r6Jss
                      )}
                      ghost={false}
                      submitsForm={true}
                      type={"ghost"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bWXxM
                        )}
                      >
                        {"Send Enquiry"}
                      </div>
                    </AntdButton>
                  </ButtonContainer>
                </FormWrapper>
              );
            })()}
            <Prompt
              data-plasmic-name={"prompt"}
              data-plasmic-override={overrides.prompt}
              className={classNames("__wab_instance", sty.prompt)}
              subHeading={"Login to send enquiry"}
              type={"login"}
            />
          </Stack__>
        </AntdModal>
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  card: [
    "card",
    "info",
    "description",
    "list",
    "listItem",
    "svg",
    "contact",
    "requestPricing",
    "freeBox",
    "enquiryForm",
    "dateTimePicker",
    "textArea2",
    "input3",
    "input2",
    "prompt"
  ],

  info: ["info"],
  description: ["description"],
  list: ["list", "listItem", "svg"],
  listItem: ["listItem", "svg"],
  svg: ["svg"],
  contact: [
    "contact",
    "requestPricing",
    "freeBox",
    "enquiryForm",
    "dateTimePicker",
    "textArea2",
    "input3",
    "input2",
    "prompt"
  ],

  requestPricing: [
    "requestPricing",
    "freeBox",
    "enquiryForm",
    "dateTimePicker",
    "textArea2",
    "input3",
    "input2",
    "prompt"
  ],

  freeBox: [
    "freeBox",
    "enquiryForm",
    "dateTimePicker",
    "textArea2",
    "input3",
    "input2",
    "prompt"
  ],

  enquiryForm: [
    "enquiryForm",
    "dateTimePicker",
    "textArea2",
    "input3",
    "input2"
  ],

  dateTimePicker: ["dateTimePicker"],
  textArea2: ["textArea2"],
  input3: ["input3"],
  input2: ["input2"],
  prompt: ["prompt"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPricingCard__ArgProps,
          internalVariantPropNames: PlasmicPricingCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPricingCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "card") {
    func.displayName = "PlasmicPricingCard";
  } else {
    func.displayName = `PlasmicPricingCard.${nodeName}`;
  }
  return func;
}

export const PlasmicPricingCard = Object.assign(
  // Top-level PlasmicPricingCard renders the root element
  makeNodeComponent("card"),
  {
    // Helper components rendering sub-elements
    info: makeNodeComponent("info"),
    description: makeNodeComponent("description"),
    list: makeNodeComponent("list"),
    listItem: makeNodeComponent("listItem"),
    svg: makeNodeComponent("svg"),
    contact: makeNodeComponent("contact"),
    requestPricing: makeNodeComponent("requestPricing"),
    freeBox: makeNodeComponent("freeBox"),
    enquiryForm: makeNodeComponent("enquiryForm"),
    dateTimePicker: makeNodeComponent("dateTimePicker"),
    textArea2: makeNodeComponent("textArea2"),
    input3: makeNodeComponent("input3"),
    input2: makeNodeComponent("input2"),
    prompt: makeNodeComponent("prompt"),
    // Metadata about props expected for PlasmicPricingCard
    internalVariantProps: PlasmicPricingCard__VariantProps,
    internalArgProps: PlasmicPricingCard__ArgProps
  }
);

export default PlasmicPricingCard;
/* prettier-ignore-end */
