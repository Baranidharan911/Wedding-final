// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: uvhF6iRRDL5R
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import LayerDefault from "../../LayerDefault"; // plasmic-import: 4uZwDUl-gHmp/component
import Prompt from "../../Prompt"; // plasmic-import: j21kCiisYxeO/component
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import SidebarButton2 from "../../SidebarButton2"; // plasmic-import: Vkqf6daet4hr/component
import BottomButton2 from "../../BottomButton2"; // plasmic-import: sQYPjvPCql81/component
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import { SimpleChart } from "@plasmicpkgs/react-chartjs-2";
import { AntdProgress } from "@plasmicpkgs/antd5/skinny/registerProgress";
import HeaderTabButtonUnderline2 from "../../HeaderTabButtonUnderline2"; // plasmic-import: ZdJ-ldNLguqj/component
import EnquiriesTable from "../../EnquiriesTable"; // plasmic-import: UmV5lLj7q0il/component
import Review from "../../Review"; // plasmic-import: hBgQsrnqAJwD/component
import HeaderButton from "../../HeaderButton"; // plasmic-import: iG0bD7RFK6yH/component
import ButtonContainer from "../../ButtonContainer"; // plasmic-import: dK0EsHLm2W5O/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdTooltip } from "@plasmicpkgs/antd5/skinny/registerTooltip";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import FeaturingVendorCard from "../../FeaturingVendorCard"; // plasmic-import: FymR_Rf9uBOI/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import LocationForm from "../../LocationForm"; // plasmic-import: 3-VWNxcNSDds/component
import EnquiryForm from "../../EnquiryForm"; // plasmic-import: o-FKpOvt35MV/component
import Select from "../../Select"; // plasmic-import: Qxrry2wyoobC/component
import Button2 from "../../Button2"; // plasmic-import: x0IYxFtlqF54/component
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import EnquiryFormBuilder2 from "../../EnquiryFormBuilder2"; // plasmic-import: MfbC6E--Zvyv/component
import TextInput from "../../TextInput"; // plasmic-import: leRyjw1OHU5j/component
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { useScreenVariants as useScreenVariantszapf5SksSeNd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ZAPF5sksSeNd/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicDashboard.module.css"; // plasmic-import: uvhF6iRRDL5R/css
import HomeSvg2Icon from "./icons/PlasmicIcon__HomeSvg2"; // plasmic-import: X3-vy0DTFndl/icon
import FrontStoreSvgIcon from "./icons/PlasmicIcon__FrontStoreSvg"; // plasmic-import: QVey3aAnNT6P/icon
import EnquiriesSvg2Icon from "./icons/PlasmicIcon__EnquiriesSvg2"; // plasmic-import: Lhs1C_JEcqw-/icon
import FormsSvgrepoComSvgIcon from "./icons/PlasmicIcon__FormsSvgrepoComSvg"; // plasmic-import: hlWHkCndnUCf/icon
import ReviewsSvgIcon from "./icons/PlasmicIcon__ReviewsSvg"; // plasmic-import: GJ-OM5Ye5vqX/icon
import AdvertisementBroadcastGlobalSvgrepoComSvgIcon from "./icons/PlasmicIcon__AdvertisementBroadcastGlobalSvgrepoComSvg"; // plasmic-import: yfBGW0Xp7OPp/icon
import QuestionMarkCircleSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__QuestionMarkCircleSvgrepoCom1Svg"; // plasmic-import: -rpPA_EIRqqT/icon
import PencilSvgIcon from "./icons/PlasmicIcon__PencilSvg"; // plasmic-import: HevrjtgOFCSQ/icon
import SaveSvgrepoComSvgIcon from "./icons/PlasmicIcon__SaveSvgrepoComSvg"; // plasmic-import: O0TY-Wi5K7cv/icon
import InstagramSvgrepoComSvgIcon from "./icons/PlasmicIcon__InstagramSvgrepoComSvg"; // plasmic-import: syRgR9KoZWIb/icon
import FacebookSvgrepoComSvgIcon from "./icons/PlasmicIcon__FacebookSvgrepoComSvg"; // plasmic-import: Y3y4wxAs5DW4/icon
import VectorSvg2Icon from "./icons/PlasmicIcon__VectorSvg2"; // plasmic-import: UewXXNmMuvBU/icon
import Pinterest180SvgrepoComSvgIcon from "./icons/PlasmicIcon__Pinterest180SvgrepoComSvg"; // plasmic-import: wNRyUQvL3XMB/icon
import StarsSvgrepoComSvgIcon from "./icons/PlasmicIcon__StarsSvgrepoComSvg"; // plasmic-import: OIAQqj3zq3Yz/icon
import AngleDownIcon from "./icons/PlasmicIcon__AngleDown"; // plasmic-import: fRNlWRmvUD4F/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: gokeQ-lOkO--/icon
import MessagesPeoplePersonBubble1Icon from "./icons/PlasmicIcon__MessagesPeoplePersonBubble1"; // plasmic-import: IdixEc2FgfFa/icon
import EnquiriesSvgIcon from "./icons/PlasmicIcon__EnquiriesSvg"; // plasmic-import: hA_Hk8Ikh6DK/icon
import BackSvgrepoComSvgIcon from "./icons/PlasmicIcon__BackSvgrepoComSvg"; // plasmic-import: wpYSXM7SC3NG/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: CqgFJaUTj2Bf/icon
import CrossSvgrepoComSvgIcon from "./icons/PlasmicIcon__CrossSvgrepoComSvg"; // plasmic-import: louqvwTTOZd8/icon

createPlasmicElementProxy;

export const PlasmicDashboard__VariantProps = new Array();

export const PlasmicDashboard__ArgProps = new Array();

const $$ = {};

function PlasmicDashboard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const $globalActions = useGlobalActions?.();
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "currentEnquiry",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "filteredEnquiries",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.enquiries.data.response.data.enquiries.data;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "filteredFolder",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "formsData",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.formsInfo.data.response.data.forms.data;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "selectedIDs",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "enquiryForm",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({ questions: [] })
      },
      {
        path: "showQuestion",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "questionType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "enquiriesData",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.enquiries.data.response.data.enquiries.data;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "formAvailable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "filter",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "questionId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "currentAlbum",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "galleryUploading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "businessTags",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.storeInfo?.data?.response?.data?.store?.data
                ?.attributes?.tags;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "editMode",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          info: false,
          gallery: false,
          pricing: false,
          faq: false
        })
      },
      {
        path: "enquiryType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "services",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.storeInfo.data.response.data.store.data.attributes.services.data.map(
                item => {
                  if (!item.attributes.features) {
                    item.attributes.features = [""];
                  }
                  return item;
                }
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "faqs",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $queries.storeInfo.data.response.data.store.data.attributes.faq
                  .data.attributes.Fields || {
                  Questions: [],
                  Answers: []
                }
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "businessVenues",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $queries.storeInfo?.data?.response?.data?.store?.data
                  ?.attributes?.venues || []
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "editState",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          business: false,
          location: false,
          package: false,
          faq: false,
          gallery: false
        })
      },
      {
        path: "currentAdv",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "businessInfo.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "businessInfo",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "businessInfo.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "businessInfo",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "businessName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "businessName4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "instagram.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "facebook.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "twitter.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "pinterest.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "businessDescription.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "tags.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "paymentTerms.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "travelCost.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "albums2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "deliveryTime.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "profilePicture.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "profilePicture",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "profilePicture.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "profilePicture",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "profilePicture2.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "formSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "notes.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "notesInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "deleteForm2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "formTitle.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "newField.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dateTimePicker2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "radioGroup5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dateTimePicker3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Type here..."
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "all"
      },
      {
        path: "table2.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table2.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table2.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table2.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "setAdvImg.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "advPicture3.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "advPicture3",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "advPicture3.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "advPicture3",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "profilePicture4.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const new$Queries = {
    enquiries: usePlasmicDataOp(() => {
      return {
        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
        opId: "b8f565b6-e660-4176-b81e-ce2d040efab1",
        userArgs: {
          variables: [
            $queries?.venderInfo?.data?.response?.data?.usersPermissionsUser?.data?.attributes?.store_owner?.data?.attributes?.stores?.data?.map(
              item => item.id
            )
          ]
        },
        cacheKey: `plasmic.$.b8f565b6-e660-4176-b81e-ce2d040efab1.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    formsInfo: usePlasmicDataOp(() => {
      return {
        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
        opId: "7302e4e1-56d7-4b1c-a921-15310ca140a3",
        userArgs: {
          variables: [
            $queries?.venderInfo?.data?.response?.data?.usersPermissionsUser
              ?.data?.attributes?.store_owner?.data?.attributes?.stores?.data[0]
              ?.id
          ]
        },
        cacheKey: `plasmic.$.7302e4e1-56d7-4b1c-a921-15310ca140a3.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    venderInfo: usePlasmicDataOp(() => {
      return {
        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
        opId: "6a0ba94a-bd0f-45b6-a748-44a16c01e9db",
        userArgs: {
          variables: [$queries.userInfo?.data?.response?.data?.me?.id]
        },
        cacheKey: `plasmic.$.6a0ba94a-bd0f-45b6-a748-44a16c01e9db.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    userInfo: usePlasmicDataOp(() => {
      return {
        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
        opId: "8346fd09-c582-407e-a651-62acd88956f8",
        userArgs: {
          headers: [`bearer ${localStorage.getItem("strapi-jwt")}`]
        },
        cacheKey: `plasmic.$.8346fd09-c582-407e-a651-62acd88956f8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    storeInfo: usePlasmicDataOp(() => {
      return {
        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
        opId: "ee6eec85-3da9-4dad-b754-fbf6020ed489",
        userArgs: {
          variables: [
            $queries?.venderInfo?.data?.response?.data?.usersPermissionsUser
              ?.data?.attributes?.store_owner?.data?.attributes?.stores?.data[0]
              ?.id
          ]
        },
        cacheKey: `plasmic.$.ee6eec85-3da9-4dad-b754-fbf6020ed489.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    reviews: usePlasmicDataOp(() => {
      return {
        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
        opId: "491ec85f-d115-4645-81be-80674e307e8c",
        userArgs: {
          variables: [
            $queries.venderInfo.data.response.data.usersPermissionsUser.data
              .attributes.store_owner.data.attributes.stores.data[0].id
          ]
        },
        cacheKey: `plasmic.$.491ec85f-d115-4645-81be-80674e307e8c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    services: usePlasmicDataOp(() => {
      return {
        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
        opId: "b4891d9a-92c8-4637-86df-facc52810946",
        userArgs: {},
        cacheKey: `plasmic.$.b4891d9a-92c8-4637-86df-facc52810946.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
        opId: "78390514-578f-4d32-a69c-499abea85912",
        userArgs: {},
        cacheKey: `plasmic.$.78390514-578f-4d32-a69c-499abea85912.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszapf5SksSeNd()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"vendorDashboard"}
          data-plasmic-override={overrides.vendorDashboard}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.vendorDashboard
          )}
        >
          <LayerDefault
            data-plasmic-name={"layerDefault"}
            data-plasmic-override={overrides.layerDefault}
            className={classNames("__wab_instance", sty.layerDefault)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__uGiNb)}>
              <Prompt
                className={classNames("__wab_instance", sty.prompt__mRbH)}
                userInfo={(() => {
                  try {
                    return $queries.userInfo;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              {(() => {
                try {
                  return (
                    (!$queries.userInfo.error &&
                      !$queries.venderInfo.data.response.data
                        .usersPermissionsUser.data.attributes.store_owner.data
                        ?.attributes.Verified) ||
                    true
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__cvl8N)}>
                  {(() => {
                    try {
                      return true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Prompt
                      className={classNames(
                        "__wab_instance",
                        sty.prompt__iZIhK
                      )}
                      heading={"Unverified"}
                      subHeading={
                        "Please hold on while we verify your documents"
                      }
                      type={"error"}
                      userInfo={(() => {
                        try {
                          return $queries.userInfo;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  ) : null}
                </div>
              ) : null}
              {(() => {
                try {
                  return (
                    (!$queries.userInfo.error &&
                      $queries.venderInfo.data.response.data
                        .usersPermissionsUser.data.attributes.store_owner.data
                        .attributes.Verified) ||
                    true
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox___6Lj3)}>
                  {(() => {
                    try {
                      return !$queries.storeInfo.data.response.data.store.data
                        .attributes.featured;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link___0D6Cr
                      )}
                      href={`/premium`}
                      platform={"react"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__n8D3
                        )}
                      >
                        {"Get preimum advertisements for your store!"}
                      </div>
                    </PlasmicLink__>
                  ) : null}
                  <TabsContainer
                    data-plasmic-name={"sidebar"}
                    data-plasmic-override={overrides.sidebar}
                    initialKey={"home"}
                    previewKey={"advertisements"}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          data-plasmic-name={"columns"}
                          data-plasmic-override={overrides.columns}
                          className={classNames(projectcss.all, sty.columns)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"button2"}
                            data-plasmic-override={overrides.button2}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.button2)}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"desktop"}
                              data-plasmic-override={overrides.desktop}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.desktop
                              )}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__iKkde
                                )}
                              >
                                <TabButton
                                  data-plasmic-name={"home2"}
                                  data-plasmic-override={overrides.home2}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.home2
                                  )}
                                  tabKey={"home"}
                                >
                                  <SidebarButton2
                                    className={classNames(
                                      "__wab_instance",
                                      sty.sidebarButton2__gRrJm
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__jyLit
                                      )}
                                    >
                                      <HomeSvg2Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__exy8N
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__wiOUc
                                        )}
                                      >
                                        {"Home"}
                                      </div>
                                    </Stack__>
                                  </SidebarButton2>
                                </TabButton>
                                <TabButton
                                  data-plasmic-name={"frontStore"}
                                  data-plasmic-override={overrides.frontStore}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.frontStore
                                  )}
                                  tabKey={"frontStore"}
                                >
                                  <SidebarButton2
                                    className={classNames(
                                      "__wab_instance",
                                      sty.sidebarButton2__hJNaR
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__zS5Q
                                      )}
                                    >
                                      <FrontStoreSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__em5Ms
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__xoqYj
                                        )}
                                      >
                                        {"Front Store"}
                                      </div>
                                    </Stack__>
                                  </SidebarButton2>
                                </TabButton>
                                <TabButton
                                  data-plasmic-name={"enquiries3"}
                                  data-plasmic-override={overrides.enquiries3}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.enquiries3
                                  )}
                                  tabKey={"enquiries"}
                                >
                                  <SidebarButton2
                                    className={classNames(
                                      "__wab_instance",
                                      sty.sidebarButton2__sXcon
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___5Qcs1
                                      )}
                                    >
                                      <EnquiriesSvg2Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__fvAdW
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__zTgex
                                        )}
                                      >
                                        {"Enquiries"}
                                      </div>
                                    </Stack__>
                                  </SidebarButton2>
                                </TabButton>
                                <TabButton
                                  data-plasmic-name={"forms2"}
                                  data-plasmic-override={overrides.forms2}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.forms2
                                  )}
                                  tabKey={"forms"}
                                >
                                  <SidebarButton2
                                    className={classNames(
                                      "__wab_instance",
                                      sty.sidebarButton2__or9M7
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__kNipw
                                      )}
                                    >
                                      <FormsSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__h3SkN
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__ayiuV
                                        )}
                                      >
                                        {"Forms"}
                                      </div>
                                    </Stack__>
                                  </SidebarButton2>
                                </TabButton>
                                <TabButton
                                  data-plasmic-name={"reviews2"}
                                  data-plasmic-override={overrides.reviews2}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.reviews2
                                  )}
                                  tabKey={"reviews"}
                                >
                                  <SidebarButton2
                                    className={classNames(
                                      "__wab_instance",
                                      sty.sidebarButton2__cxkwl
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___6XC
                                      )}
                                    >
                                      <ReviewsSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__vaQu8
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__jSb9
                                        )}
                                      >
                                        {"Reviews"}
                                      </div>
                                    </Stack__>
                                  </SidebarButton2>
                                </TabButton>
                                {(() => {
                                  try {
                                    return $queries.storeInfo.data.response.data
                                      .store.data.attributes.adv_slots.data
                                      .length;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <TabButton
                                    data-plasmic-name={"advertisements"}
                                    data-plasmic-override={
                                      overrides.advertisements
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.advertisements
                                    )}
                                    tabKey={"advertisements"}
                                  >
                                    <SidebarButton2
                                      className={classNames(
                                        "__wab_instance",
                                        sty.sidebarButton2__iTaIy
                                      )}
                                    >
                                      <Stack__
                                        as={"div"}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox___740O6
                                        )}
                                      >
                                        <AdvertisementBroadcastGlobalSvgrepoComSvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__xmT
                                          )}
                                          role={"img"}
                                        />

                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__atLh
                                          )}
                                        >
                                          {"Advertisements"}
                                        </div>
                                      </Stack__>
                                    </SidebarButton2>
                                  </TabButton>
                                ) : null}
                              </Stack__>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"mobile"}
                              data-plasmic-override={overrides.mobile}
                              hasGap={true}
                              className={classNames(projectcss.all, sty.mobile)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___2B4VL
                                )}
                              >
                                <TabButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tabButton___53Yuq
                                  )}
                                  tabKey={"home"}
                                >
                                  <BottomButton2
                                    className={classNames(
                                      "__wab_instance",
                                      sty.bottomButton2__xtEdq
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__caoZc
                                      )}
                                    >
                                      <HomeSvg2Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__juzWm
                                        )}
                                        role={"img"}
                                      />
                                    </Stack__>
                                  </BottomButton2>
                                </TabButton>
                                <TabButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tabButton___97BD5
                                  )}
                                  tabKey={"frontStore"}
                                >
                                  <BottomButton2
                                    className={classNames(
                                      "__wab_instance",
                                      sty.bottomButton2__vTpLp
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__gg7R3
                                      )}
                                    >
                                      <FrontStoreSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__dffz9
                                        )}
                                        role={"img"}
                                      />
                                    </Stack__>
                                  </BottomButton2>
                                </TabButton>
                                <TabButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tabButton___5KGm
                                  )}
                                  tabKey={"enquiries"}
                                >
                                  <BottomButton2
                                    className={classNames(
                                      "__wab_instance",
                                      sty.bottomButton2__xmFhZ
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__xBRcb
                                      )}
                                    >
                                      <EnquiriesSvg2Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg___6JrD
                                        )}
                                        role={"img"}
                                      />
                                    </Stack__>
                                  </BottomButton2>
                                </TabButton>
                                <TabButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tabButton___01Iik
                                  )}
                                  tabKey={"forms"}
                                >
                                  <BottomButton2
                                    className={classNames(
                                      "__wab_instance",
                                      sty.bottomButton2__gMmqR
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__eBr7N
                                      )}
                                    >
                                      <FormsSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__v5E0Q
                                        )}
                                        role={"img"}
                                      />
                                    </Stack__>
                                  </BottomButton2>
                                </TabButton>
                                <TabButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tabButton__f6Zlr
                                  )}
                                  tabKey={"reviews"}
                                >
                                  <BottomButton2
                                    className={classNames(
                                      "__wab_instance",
                                      sty.bottomButton2__wwjSp
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__twxv
                                      )}
                                    >
                                      <ReviewsSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__uiZqt
                                        )}
                                        role={"img"}
                                      />
                                    </Stack__>
                                  </BottomButton2>
                                </TabButton>
                                <TabButton
                                  data-plasmic-name={"advertisements3"}
                                  data-plasmic-override={
                                    overrides.advertisements3
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.advertisements3
                                  )}
                                  tabKey={"advertisements"}
                                >
                                  <BottomButton2
                                    className={classNames(
                                      "__wab_instance",
                                      sty.bottomButton2__vAcbg
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__kiyCe
                                      )}
                                    >
                                      <AdvertisementBroadcastGlobalSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__eWuHs
                                        )}
                                        role={"img"}
                                      />
                                    </Stack__>
                                  </BottomButton2>
                                </TabButton>
                              </div>
                            </Stack__>
                          </Stack__>
                          <div
                            data-plasmic-name={"content2"}
                            data-plasmic-override={overrides.content2}
                            className={classNames(projectcss.all, sty.content2)}
                          >
                            <div
                              data-plasmic-name={"welcome"}
                              data-plasmic-override={overrides.welcome}
                              className={classNames(
                                projectcss.all,
                                sty.welcome
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dy9T8
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        const firstname =
                                          $queries.venderInfo.data.response.data
                                            .usersPermissionsUser.data
                                            .attributes.store_owner.data
                                            .attributes.Firstname;
                                        const lastname =
                                          $queries.venderInfo.data.response.data
                                            .usersPermissionsUser.data
                                            .attributes.store_owner.data
                                            .attributes.Lastname;
                                        return `Welcome ${firstname} ${lastname}!`;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wS99W
                                )}
                              >
                                {
                                  "Remember, a happy client is the best business strategy of all."
                                }
                              </div>
                            </div>
                            <TabContent
                              data-plasmic-name={"home"}
                              data-plasmic-override={overrides.home}
                              className={classNames("__wab_instance", sty.home)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__jI2K
                                )}
                              >
                                <div
                                  data-plasmic-name={"header15"}
                                  data-plasmic-override={overrides.header15}
                                  className={classNames(
                                    projectcss.all,
                                    sty.header15
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___1I8A4
                                    )}
                                  >
                                    {"Performance Analytics Insights"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__cEnE4
                                  )}
                                >
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"analytics2"}
                                    data-plasmic-override={overrides.analytics2}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.analytics2
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"total2"}
                                      data-plasmic-override={overrides.total2}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.total2
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__n4CD5
                                        )}
                                      >
                                        {""}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__p2Fga
                                        )}
                                      >
                                        {"Total Enquiries"}
                                      </div>
                                    </Stack__>
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"leads2"}
                                      data-plasmic-override={overrides.leads2}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.leads2
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__ckybE
                                        )}
                                      >
                                        {""}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__wkIry
                                        )}
                                      >
                                        {"Leads"}
                                      </div>
                                    </Stack__>
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"conversion2"}
                                      data-plasmic-override={
                                        overrides.conversion2
                                      }
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.conversion2
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__dfMmM
                                        )}
                                      >
                                        {""}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__cvowp
                                        )}
                                      >
                                        {"Conversions"}
                                      </div>
                                    </Stack__>
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"discarded2"}
                                      data-plasmic-override={
                                        overrides.discarded2
                                      }
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.discarded2
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__xZ1Qw
                                        )}
                                      >
                                        {""}
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__vo1Ze
                                        )}
                                      >
                                        {"Discarded"}
                                      </div>
                                    </Stack__>
                                  </Stack__>
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"charts2"}
                                    data-plasmic-override={overrides.charts2}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.charts2
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"enquiries4"}
                                      data-plasmic-override={
                                        overrides.enquiries4
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.enquiries4
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__rrPka
                                        )}
                                      >
                                        {"Enquiries Over Time"}
                                      </div>
                                      <SimpleChart
                                        data-plasmic-name={"chart"}
                                        data-plasmic-override={overrides.chart}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.chart
                                        )}
                                        data={[
                                          {
                                            region: "APAC",
                                            revenue: 3294,
                                            spend: 2675
                                          },
                                          {
                                            region: "EMEA",
                                            revenue: 3245,
                                            spend: 3895
                                          },
                                          {
                                            region: "LATAM",
                                            revenue: 2165,
                                            spend: 3498
                                          },
                                          {
                                            region: "AMER",
                                            revenue: 3215,
                                            spend: 1656
                                          }
                                        ]}
                                        fill={false}
                                        interactive={true}
                                        type={"line"}
                                      />
                                    </div>
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__wYdfT
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"conversions2"}
                                        data-plasmic-override={
                                          overrides.conversions2
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.conversions2
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___3LvN2
                                          )}
                                        >
                                          {"Conversion Rate"}
                                        </div>
                                        <AntdProgress
                                          className={classNames(
                                            "__wab_instance",
                                            sty.progress__jrQp4
                                          )}
                                          gradient={[]}
                                          showInfo={false}
                                          strokeLinecap={"round"}
                                          type={"line"}
                                        />

                                        <Stack__
                                          as={"div"}
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__uc0Hl
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__pUzf
                                            )}
                                          >
                                            {""}
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__h2HEy
                                            )}
                                          >
                                            {"Conversion Rate out of 100%"}
                                          </div>
                                        </Stack__>
                                      </div>
                                      <div
                                        data-plasmic-name={"conversions4"}
                                        data-plasmic-override={
                                          overrides.conversions4
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.conversions4
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__klsg6
                                          )}
                                        >
                                          {"Client Engagement"}
                                        </div>
                                        <AntdProgress
                                          className={classNames(
                                            "__wab_instance",
                                            sty.progress___7Ks2N
                                          )}
                                          gradient={[]}
                                          percent={(() => {
                                            try {
                                              return 100;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}
                                          showInfo={false}
                                          strokeLinecap={"round"}
                                          trailColor={"#F5F5F500"}
                                          type={"line"}
                                        />

                                        <AntdProgress
                                          className={classNames(
                                            "__wab_instance",
                                            sty.progress__bgIqq
                                          )}
                                          gradient={[]}
                                          showInfo={false}
                                          strokeLinecap={"round"}
                                          trailColor={"#F5F5F500"}
                                          type={"line"}
                                        />

                                        <Stack__
                                          as={"div"}
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__enFq9
                                          )}
                                        >
                                          <Stack__
                                            as={"div"}
                                            hasGap={true}
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__eeRyF
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__knfI
                                              )}
                                            >
                                              {""}
                                            </div>
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__k2QGn
                                              )}
                                            >
                                              {"Enquiries"}
                                            </div>
                                          </Stack__>
                                          <Stack__
                                            as={"div"}
                                            hasGap={true}
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__abxwz
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text___0TrXw
                                              )}
                                            >
                                              {""}
                                            </div>
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text___4Lbvx
                                              )}
                                            >
                                              {"Conversions"}
                                            </div>
                                          </Stack__>
                                        </Stack__>
                                      </div>
                                    </Stack__>
                                  </Stack__>
                                  <div
                                    data-plasmic-name={"recents2"}
                                    data-plasmic-override={overrides.recents2}
                                    className={classNames(
                                      projectcss.all,
                                      sty.recents2
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"enquiry5"}
                                      data-plasmic-override={overrides.enquiry5}
                                      className={classNames(
                                        projectcss.all,
                                        sty.enquiry5
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"header13"}
                                        data-plasmic-override={
                                          overrides.header13
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.header13
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__v21DR
                                          )}
                                        >
                                          {"Recent Enquiries"}
                                        </div>
                                        <TabButton
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tabButton__wr9Bz
                                          )}
                                          tabKey={"enquiries"}
                                        >
                                          <HeaderTabButtonUnderline2
                                            className={classNames(
                                              "__wab_instance",
                                              sty.headerTabButtonUnderline2__smQ6
                                            )}
                                            content={"View all Enquiries"}
                                            isActive={true}
                                          />
                                        </TabButton>
                                      </div>
                                      <EnquiriesTable
                                        className={classNames(
                                          "__wab_instance",
                                          sty.enquiriesTable__uDzGg
                                        )}
                                        vendorId={(() => {
                                          try {
                                            return $queries.venderInfo.data
                                              .response.data
                                              .usersPermissionsUser.data
                                              .attributes.store_owner.data.id;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />
                                    </div>
                                    <div
                                      data-plasmic-name={"reviews4"}
                                      data-plasmic-override={overrides.reviews4}
                                      className={classNames(
                                        projectcss.all,
                                        sty.reviews4
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"header16"}
                                        data-plasmic-override={
                                          overrides.header16
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.header16
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__iz6LH
                                          )}
                                        >
                                          {"Recent Reviews"}
                                        </div>
                                        <TabButton
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tabButton__jlr1P
                                          )}
                                          tabKey={"reviews"}
                                        >
                                          <HeaderTabButtonUnderline2
                                            className={classNames(
                                              "__wab_instance",
                                              sty.headerTabButtonUnderline2__mXd48
                                            )}
                                            content={"View all Reviews"}
                                            isActive={true}
                                          />
                                        </TabButton>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__pNpb
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return $queries.reviews.data.response.data.reviews.data.slice(
                                                0,
                                                3
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_0,
                                            __plasmic_idx_0
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_0;
                                            const currentIndex =
                                              __plasmic_idx_0;
                                            return (
                                              <Review
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.review__lsGoi
                                                )}
                                                commnets={(() => {
                                                  try {
                                                    return currentItem
                                                      .attributes.comment;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                createdAt={(() => {
                                                  try {
                                                    return currentItem
                                                      .attributes.createdAt;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "2023-10-12T09:32:00.000Z";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                key={currentIndex}
                                                likes={(() => {
                                                  try {
                                                    return {
                                                      likes:
                                                        currentItem.attributes
                                                          .likes.data
                                                    };
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return {
                                                        likes: ["1", "2", "3"]
                                                      };
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                rating={(() => {
                                                  try {
                                                    return (() => {
                                                      const rating =
                                                        currentItem.attributes
                                                          .rating;
                                                      const values =
                                                        Object.values(rating);
                                                      const sum = values.reduce(
                                                        (acc, curr) =>
                                                          acc + curr,
                                                        0
                                                      );
                                                      const average =
                                                        sum / values.length;
                                                      return average;
                                                    })();
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return 4;
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                replies={(() => {
                                                  try {
                                                    return {
                                                      replies:
                                                        currentItem.attributes
                                                          .replies.data
                                                    };
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return {
                                                        replies: [
                                                          { comment: "hi" }
                                                        ]
                                                      };
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                reviewId={(() => {
                                                  try {
                                                    return currentItem.id;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                userIconUrl={(() => {
                                                  try {
                                                    return currentItem
                                                      .attributes
                                                      .users_permissions_user
                                                      .data.attributes
                                                      .Profile_Picture
                                                      .attributes.url;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                userId={(() => {
                                                  try {
                                                    return currentItem
                                                      .attributes
                                                      .users_permissions_user
                                                      .data.id;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                username={`Raj Patel${currentItem.attributes.users_permissions_user.data.attributes.username}`}
                                                vendorId={(() => {
                                                  try {
                                                    return $queries.venderInfo
                                                      .data.response.data
                                                      .usersPermissionsUser
                                                      .data;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              />
                                            );
                                          }
                                        )}
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </TabContent>
                            <TabContent
                              data-plasmic-name={"frontStore2"}
                              data-plasmic-override={overrides.frontStore2}
                              className={classNames(
                                "__wab_instance",
                                sty.frontStore2
                              )}
                            >
                              <div
                                data-plasmic-name={"content4"}
                                data-plasmic-override={overrides.content4}
                                className={classNames(
                                  projectcss.all,
                                  sty.content4
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"header3"}
                                  data-plasmic-override={overrides.header3}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.header3
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__qVqKh
                                    )}
                                  >
                                    {"Front Store"}
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"buttons"}
                                    data-plasmic-override={overrides.buttons}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.buttons
                                    )}
                                  >
                                    <HeaderButton
                                      data-plasmic-name={"businessInformation2"}
                                      data-plasmic-override={
                                        overrides.businessInformation2
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.businessInformation2
                                      )}
                                      color={"secondary"}
                                      link={"#businessInformation"}
                                      name={"Business Information"}
                                      yOffset={100}
                                    />

                                    <HeaderButton
                                      data-plasmic-name={"gallery2"}
                                      data-plasmic-override={overrides.gallery2}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.gallery2
                                      )}
                                      color={"secondary"}
                                      link={"#gallery"}
                                      name={"Gallery"}
                                      yOffset={100}
                                    />

                                    <HeaderButton
                                      data-plasmic-name={"location"}
                                      data-plasmic-override={overrides.location}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.location
                                      )}
                                      color={"secondary"}
                                      link={"#businessLocation"}
                                      name={"Location"}
                                      yOffset={100}
                                    />

                                    <HeaderButton
                                      data-plasmic-name={"pricingPackages"}
                                      data-plasmic-override={
                                        overrides.pricingPackages
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.pricingPackages
                                      )}
                                      color={"secondary"}
                                      link={"#pricingPackages"}
                                      name={"Pricing Packages"}
                                      yOffset={100}
                                    />

                                    <HeaderButton
                                      data-plasmic-name={"headerButton"}
                                      data-plasmic-override={
                                        overrides.headerButton
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.headerButton
                                      )}
                                      color={"secondary"}
                                      link={"#faqs"}
                                      name={"FAQs"}
                                      yOffset={100}
                                    />

                                    <PlasmicLink__
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.a,
                                        sty.link__e8Lqa
                                      )}
                                      platform={"react"}
                                    >
                                      <ButtonContainer
                                        className={classNames(
                                          "__wab_instance",
                                          sty.buttonContainer___9Doh5
                                        )}
                                      >
                                        <AntdButton
                                          data-plasmic-name={"viewStore"}
                                          data-plasmic-override={
                                            overrides.viewStore
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.viewStore
                                          )}
                                          type={"ghost"}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__lRrda
                                            )}
                                          >
                                            {"View Store"}
                                          </div>
                                        </AntdButton>
                                      </ButtonContainer>
                                    </PlasmicLink__>
                                  </Stack__>
                                </Stack__>
                                <div
                                  data-plasmic-name={"businessInformation"}
                                  data-plasmic-override={
                                    overrides.businessInformation
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.businessInformation
                                  )}
                                  id={"businessInformation"}
                                >
                                  <div
                                    data-plasmic-name={"header4"}
                                    data-plasmic-override={overrides.header4}
                                    className={classNames(
                                      projectcss.all,
                                      sty.header4
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__btj1
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__fBk5U
                                        )}
                                      >
                                        {"Business Information"}
                                      </div>
                                      <AntdTooltip
                                        className={classNames(
                                          "__wab_instance",
                                          sty.tooltip__dP0
                                        )}
                                        title={null}
                                        titleText={"Enter your store details"}
                                      >
                                        <QuestionMarkCircleSvgrepoCom1SvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__lxBv
                                          )}
                                          role={"img"}
                                        />
                                      </AntdTooltip>
                                    </div>
                                    {(() => {
                                      try {
                                        return !$state.editState.business;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <AntdButton
                                        className={classNames(
                                          "__wab_instance",
                                          sty.button___7MMe
                                        )}
                                        onClick={async () => {
                                          const $steps = {};
                                          $steps["updateEditStateBusiness"] =
                                            true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "editState",
                                                        "business"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: true
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;
                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["updateEditStateBusiness"] !=
                                              null &&
                                            typeof $steps[
                                              "updateEditStateBusiness"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateEditStateBusiness"
                                            ].then === "function"
                                          ) {
                                            $steps["updateEditStateBusiness"] =
                                              await $steps[
                                                "updateEditStateBusiness"
                                              ];
                                          }
                                        }}
                                        type={"ghost"}
                                      >
                                        <PencilSvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__qy29I
                                          )}
                                          role={"img"}
                                        />
                                      </AntdButton>
                                    ) : null}
                                    {(() => {
                                      try {
                                        return $state.editState.business;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <AntdButton
                                        className={classNames(
                                          "__wab_instance",
                                          sty.button__uswll
                                        )}
                                        onClick={async () => {
                                          const $steps = {};
                                          $steps["graphqlQuery"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "bvg9JqrXbdUtvMXZbC26cd",
                                                    opId: "8a4df99d-3090-465e-bcca-946353fdffb5",
                                                    userArgs: {
                                                      variables: [
                                                        $queries.storeInfo.data
                                                          .response.data.store
                                                          .data,
                                                        $state
                                                          .businessDescription
                                                          .value,
                                                        $state.businessInfo
                                                          .value.businessName,
                                                        {
                                                          Instagram:
                                                            $state.businessInfo
                                                              .value.instagram,
                                                          Facebook:
                                                            $state.businessInfo
                                                              .value.facebook,
                                                          Twitter:
                                                            $state.businessInfo
                                                              .value.twitter,
                                                          Pinterest:
                                                            $state.businessInfo
                                                              .value.pinterest
                                                        },
                                                        $state.businessInfo
                                                          .value.whatsapp,
                                                        [$state.tags.value],
                                                        $state.businessInfo
                                                          .value.paymentTerms,
                                                        $state.businessInfo
                                                          .value.albums,
                                                        $state.businessInfo
                                                          .value.travelCost,
                                                        $state.businessInfo
                                                          .value.deliveryTime
                                                      ]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: null,
                                                    roleId: null
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["graphqlQuery"] != null &&
                                            typeof $steps["graphqlQuery"] ===
                                              "object" &&
                                            typeof $steps["graphqlQuery"]
                                              .then === "function"
                                          ) {
                                            $steps["graphqlQuery"] =
                                              await $steps["graphqlQuery"];
                                          }
                                          $steps["refreshData"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  queryInvalidation: [
                                                    "ee6eec85-3da9-4dad-b754-fbf6020ed489"
                                                  ]
                                                };
                                                return (async ({
                                                  queryInvalidation
                                                }) => {
                                                  if (!queryInvalidation) {
                                                    return;
                                                  }
                                                  await plasmicInvalidate(
                                                    queryInvalidation
                                                  );
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["refreshData"] != null &&
                                            typeof $steps["refreshData"] ===
                                              "object" &&
                                            typeof $steps["refreshData"]
                                              .then === "function"
                                          ) {
                                            $steps["refreshData"] =
                                              await $steps["refreshData"];
                                          }
                                          $steps["updateEditStateBusiness"] =
                                            true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "editState",
                                                        "business"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: false
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;
                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["updateEditStateBusiness"] !=
                                              null &&
                                            typeof $steps[
                                              "updateEditStateBusiness"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateEditStateBusiness"
                                            ].then === "function"
                                          ) {
                                            $steps["updateEditStateBusiness"] =
                                              await $steps[
                                                "updateEditStateBusiness"
                                              ];
                                          }
                                        }}
                                        type={"ghost"}
                                      >
                                        <SaveSvgrepoComSvgIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__vg3VR
                                          )}
                                          role={"img"}
                                        />
                                      </AntdButton>
                                    ) : null}
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"info5"}
                                    data-plasmic-override={overrides.info5}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.info5
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"row"}
                                      data-plasmic-override={overrides.row}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.row
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__bpeSv
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__fj47A
                                          )}
                                        >
                                          {"Business Name"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__gj3Un
                                          )}
                                        >
                                          {""}
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__yi8Lx
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__w7K5
                                          )}
                                        >
                                          {"Whatsapp Number"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___517O
                                          )}
                                        >
                                          {""}
                                        </div>
                                      </div>
                                    </Stack__>
                                    <div
                                      data-plasmic-name={"row2"}
                                      data-plasmic-override={overrides.row2}
                                      className={classNames(
                                        projectcss.all,
                                        sty.row2
                                      )}
                                    >
                                      {(_par =>
                                        !_par
                                          ? []
                                          : Array.isArray(_par)
                                          ? _par
                                          : [_par])(
                                        (() => {
                                          try {
                                            return Object.entries(
                                              $queries.storeInfo.data.response
                                                .data.store.data.attributes
                                                .social_media
                                            ).map(([key, value]) => ({
                                              platform: key,
                                              link: value
                                            }));
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()
                                      ).map(
                                        (__plasmic_item_0, __plasmic_idx_0) => {
                                          const currentItem = __plasmic_item_0;
                                          const currentIndex = __plasmic_idx_0;
                                          return (
                                            <Stack__
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__gxlwE
                                              )}
                                              key={currentIndex}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__sywJf
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return currentItem.platform;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "Business Name";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__nfpU
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return currentItem.link;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </Stack__>
                                          );
                                        }
                                      )}
                                    </div>
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"row3"}
                                      data-plasmic-override={overrides.row3}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.row3
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__sckU5
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___5RcC8
                                          )}
                                        >
                                          {"Business Description"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__sptL7
                                          )}
                                        >
                                          {""}
                                        </div>
                                      </div>
                                    </Stack__>
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"row4"}
                                      data-plasmic-override={overrides.row4}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.row4
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__wpJef
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__x8KUc
                                          )}
                                        >
                                          {""}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__kuNv4
                                          )}
                                        >
                                          {""}
                                        </div>
                                      </div>
                                    </Stack__>
                                    <div
                                      data-plasmic-name={"row5"}
                                      data-plasmic-override={overrides.row5}
                                      className={classNames(
                                        projectcss.all,
                                        sty.row5
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__lk4F3
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__fu4Ow
                                          )}
                                        >
                                          {"Payment Terms"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__ik8Oa
                                          )}
                                        >
                                          {""}
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__hxKh
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__eoX7L
                                          )}
                                        >
                                          {"Travel Cost"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__oLcUf
                                          )}
                                        >
                                          {""}
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__obL0C
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__bWpkv
                                          )}
                                        >
                                          {"Albums"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__abk82
                                          )}
                                        >
                                          {""}
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__cOYmo
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__ozAvX
                                          )}
                                        >
                                          {"Delivery Time"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__byiJ
                                          )}
                                        >
                                          {""}
                                        </div>
                                      </div>
                                    </div>
                                  </Stack__>
                                  {(() => {
                                    try {
                                      return $state.editState.business;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()
                                    ? (() => {
                                        const child$Props = {
                                          className: classNames(
                                            "__wab_instance",
                                            sty.businessInfo
                                          ),
                                          extendedOnValuesChange: async (
                                            ...eventArgs
                                          ) => {
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "value",
                                              ["businessInfo", "value"],
                                              FormWrapper_Helpers
                                            ).apply(null, eventArgs);
                                          },
                                          formItems: [
                                            {
                                              label: "Name",
                                              name: "name",
                                              inputType: "Text"
                                            },
                                            {
                                              label: "Message",
                                              name: "message",
                                              inputType: "Text Area"
                                            }
                                          ],

                                          labelCol: {
                                            span: 8,
                                            horizontalOnly: true
                                          },
                                          layout: "vertical",
                                          mode: "advanced",
                                          onIsSubmittingChange: async (
                                            ...eventArgs
                                          ) => {
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "isSubmitting",
                                              ["businessInfo", "isSubmitting"],
                                              FormWrapper_Helpers
                                            ).apply(null, eventArgs);
                                          },
                                          ref: ref => {
                                            $refs["businessInfo"] = ref;
                                          },
                                          submitSlot: null,
                                          wrapperCol: {
                                            span: 16,
                                            horizontalOnly: true
                                          }
                                        };
                                        initializeCodeComponentStates(
                                          $state,
                                          [
                                            {
                                              name: "value",
                                              plasmicStateName:
                                                "businessInfo.value"
                                            },
                                            {
                                              name: "isSubmitting",
                                              plasmicStateName:
                                                "businessInfo.isSubmitting"
                                            }
                                          ],

                                          [],
                                          FormWrapper_Helpers ?? {},
                                          child$Props
                                        );
                                        return (
                                          <FormWrapper
                                            data-plasmic-name={"businessInfo"}
                                            data-plasmic-override={
                                              overrides.businessInfo
                                            }
                                            {...child$Props}
                                          >
                                            <Stack__
                                              as={"div"}
                                              data-plasmic-name={"info"}
                                              data-plasmic-override={
                                                overrides.info
                                              }
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.info
                                              )}
                                            >
                                              <FormItemWrapper
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.formField__tPhzw
                                                )}
                                                hidden={false}
                                                label={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__b6SwW
                                                    )}
                                                  >
                                                    {"Name"}
                                                  </div>
                                                }
                                                name={"businessName"}
                                                noStyle={true}
                                              >
                                                <div
                                                  data-plasmic-name={
                                                    "inputContainer"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.inputContainer
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.inputContainer
                                                  )}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      bordered: false,
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.businessName
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          [
                                                            "businessName",
                                                            "value"
                                                          ],

                                                          AntdInput_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      placeholder:
                                                        "Business Name",
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          [
                                                            "businessName",
                                                            "value"
                                                          ]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "businessName.value"
                                                        }
                                                      ],

                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );
                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "businessName"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.businessName
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </div>
                                              </FormItemWrapper>
                                              <FormItemWrapper
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.formField__q0NIw
                                                )}
                                                label={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__rxMqk
                                                    )}
                                                  >
                                                    {"Name"}
                                                  </div>
                                                }
                                                name={"whatsapp"}
                                                noStyle={true}
                                              >
                                                <div
                                                  data-plasmic-name={
                                                    "inputContainer4"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.inputContainer4
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.inputContainer4
                                                  )}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      bordered: false,
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.businessName4
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          [
                                                            "businessName4",
                                                            "value"
                                                          ],

                                                          AntdInput_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      placeholder:
                                                        "Whatsapp Number",
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          [
                                                            "businessName4",
                                                            "value"
                                                          ]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "businessName4.value"
                                                        }
                                                      ],

                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );
                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "businessName4"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.businessName4
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </div>
                                              </FormItemWrapper>
                                            </Stack__>
                                            <Stack__
                                              as={"div"}
                                              data-plasmic-name={"socialMedia"}
                                              data-plasmic-override={
                                                overrides.socialMedia
                                              }
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.socialMedia
                                              )}
                                            >
                                              <FormItemWrapper
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.formField__mbVz0
                                                )}
                                                label={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__efh13
                                                    )}
                                                  >
                                                    {"Name"}
                                                  </div>
                                                }
                                                name={"instagram"}
                                                noStyle={true}
                                              >
                                                <div
                                                  data-plasmic-name={
                                                    "inputContainer5"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.inputContainer5
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.inputContainer5
                                                  )}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      addonBefore: null,
                                                      bordered: false,
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.instagram
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          [
                                                            "instagram",
                                                            "value"
                                                          ],

                                                          AntdInput_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      placeholder:
                                                        "Instagram Profile Link",
                                                      prefix: (
                                                        <React.Fragment>
                                                          <div
                                                            className={classNames(
                                                              projectcss.all,
                                                              sty.freeBox__ko0O3
                                                            )}
                                                          />

                                                          <div
                                                            className={classNames(
                                                              projectcss.all,
                                                              sty.freeBox__aMrpe
                                                            )}
                                                          >
                                                            <InstagramSvgrepoComSvgIcon
                                                              className={classNames(
                                                                projectcss.all,
                                                                sty.svg__qlg5
                                                              )}
                                                              role={"img"}
                                                            />
                                                          </div>
                                                        </React.Fragment>
                                                      ),

                                                      suffix: (
                                                        <React.Fragment>
                                                          <div
                                                            className={classNames(
                                                              projectcss.all,
                                                              sty.freeBox__botDe
                                                            )}
                                                          />

                                                          <AntdButton
                                                            className={classNames(
                                                              "__wab_instance",
                                                              sty.button__wVihc
                                                            )}
                                                            type={"ghost"}
                                                          >
                                                            <div
                                                              className={classNames(
                                                                projectcss.all,
                                                                projectcss.__wab_text,
                                                                sty.text__oxlHy
                                                              )}
                                                            >
                                                              {"Remove"}
                                                            </div>
                                                          </AntdButton>
                                                        </React.Fragment>
                                                      ),

                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["instagram", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "instagram.value"
                                                        }
                                                      ],

                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );
                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "instagram"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.instagram
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </div>
                                              </FormItemWrapper>
                                              <FormItemWrapper
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.formField__tpoBe
                                                )}
                                                label={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__gSL6
                                                    )}
                                                  >
                                                    {"Name"}
                                                  </div>
                                                }
                                                name={"facebook"}
                                                noStyle={true}
                                              >
                                                <div
                                                  data-plasmic-name={
                                                    "inputContainer6"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.inputContainer6
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.inputContainer6
                                                  )}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      addonBefore: null,
                                                      bordered: false,
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.facebook
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          ["facebook", "value"],
                                                          AntdInput_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      placeholder:
                                                        "Facebook Profile Link",
                                                      prefix: (
                                                        <React.Fragment>
                                                          <div
                                                            className={classNames(
                                                              projectcss.all,
                                                              sty.freeBox__eMtz
                                                            )}
                                                          />

                                                          <div
                                                            className={classNames(
                                                              projectcss.all,
                                                              sty.freeBox__ucqy
                                                            )}
                                                          >
                                                            <FacebookSvgrepoComSvgIcon
                                                              className={classNames(
                                                                projectcss.all,
                                                                sty.svg__gDeyK
                                                              )}
                                                              role={"img"}
                                                            />
                                                          </div>
                                                        </React.Fragment>
                                                      ),

                                                      suffix: (
                                                        <React.Fragment>
                                                          <div
                                                            className={classNames(
                                                              projectcss.all,
                                                              sty.freeBox__f62Np
                                                            )}
                                                          />

                                                          <AntdButton
                                                            className={classNames(
                                                              "__wab_instance",
                                                              sty.button__aRhf
                                                            )}
                                                            type={"ghost"}
                                                          >
                                                            <div
                                                              className={classNames(
                                                                projectcss.all,
                                                                projectcss.__wab_text,
                                                                sty.text__a0Ci
                                                              )}
                                                            >
                                                              {"Remove"}
                                                            </div>
                                                          </AntdButton>
                                                        </React.Fragment>
                                                      ),

                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["facebook", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "facebook.value"
                                                        }
                                                      ],

                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );
                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "facebook"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.facebook
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </div>
                                              </FormItemWrapper>
                                            </Stack__>
                                            <Stack__
                                              as={"div"}
                                              data-plasmic-name={"socialMedia2"}
                                              data-plasmic-override={
                                                overrides.socialMedia2
                                              }
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.socialMedia2
                                              )}
                                            >
                                              <FormItemWrapper
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.formField__efsM2
                                                )}
                                                label={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__wZgNs
                                                    )}
                                                  >
                                                    {"Name"}
                                                  </div>
                                                }
                                                name={"twitter"}
                                                noStyle={true}
                                              >
                                                <div
                                                  data-plasmic-name={
                                                    "inputContainer20"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.inputContainer20
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.inputContainer20
                                                  )}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      addonBefore: null,
                                                      bordered: false,
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.twitter
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          ["twitter", "value"],
                                                          AntdInput_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      placeholder:
                                                        "Twitter Profile Link",
                                                      prefix: (
                                                        <React.Fragment>
                                                          <div
                                                            className={classNames(
                                                              projectcss.all,
                                                              sty.freeBox__yYYaG
                                                            )}
                                                          />

                                                          <div
                                                            className={classNames(
                                                              projectcss.all,
                                                              sty.freeBox__jyyee
                                                            )}
                                                          >
                                                            <VectorSvg2Icon
                                                              className={classNames(
                                                                projectcss.all,
                                                                sty.svg__xBxwb
                                                              )}
                                                              role={"img"}
                                                            />
                                                          </div>
                                                        </React.Fragment>
                                                      ),

                                                      suffix: (
                                                        <React.Fragment>
                                                          <div
                                                            className={classNames(
                                                              projectcss.all,
                                                              sty.freeBox__q9Q4
                                                            )}
                                                          />

                                                          <AntdButton
                                                            className={classNames(
                                                              "__wab_instance",
                                                              sty.button__jt2V
                                                            )}
                                                            type={"ghost"}
                                                          >
                                                            <div
                                                              className={classNames(
                                                                projectcss.all,
                                                                projectcss.__wab_text,
                                                                sty.text___67V3S
                                                              )}
                                                            >
                                                              {"Remove"}
                                                            </div>
                                                          </AntdButton>
                                                        </React.Fragment>
                                                      ),

                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["twitter", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "twitter.value"
                                                        }
                                                      ],

                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );
                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "twitter"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.twitter
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </div>
                                              </FormItemWrapper>
                                              <FormItemWrapper
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.formField__tVmev
                                                )}
                                                label={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__e5BPg
                                                    )}
                                                  >
                                                    {"Name"}
                                                  </div>
                                                }
                                                name={"pinterest"}
                                                noStyle={true}
                                              >
                                                <div
                                                  data-plasmic-name={
                                                    "inputContainer23"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.inputContainer23
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.inputContainer23
                                                  )}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      addonBefore: null,
                                                      bordered: false,
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.pinterest
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          [
                                                            "pinterest",
                                                            "value"
                                                          ],

                                                          AntdInput_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      placeholder:
                                                        "Pinterest Profile Link",
                                                      prefix: (
                                                        <React.Fragment>
                                                          <div
                                                            className={classNames(
                                                              projectcss.all,
                                                              sty.freeBox__g1Ny4
                                                            )}
                                                          />

                                                          <div
                                                            className={classNames(
                                                              projectcss.all,
                                                              sty.freeBox__zCu0K
                                                            )}
                                                          >
                                                            <Pinterest180SvgrepoComSvgIcon
                                                              className={classNames(
                                                                projectcss.all,
                                                                sty.svg__iOb1E
                                                              )}
                                                              role={"img"}
                                                            />
                                                          </div>
                                                        </React.Fragment>
                                                      ),

                                                      suffix: (
                                                        <React.Fragment>
                                                          <div
                                                            className={classNames(
                                                              projectcss.all,
                                                              sty.freeBox__eg5CD
                                                            )}
                                                          />

                                                          <AntdButton
                                                            className={classNames(
                                                              "__wab_instance",
                                                              sty.button___2UChh
                                                            )}
                                                            type={"ghost"}
                                                          >
                                                            <div
                                                              className={classNames(
                                                                projectcss.all,
                                                                projectcss.__wab_text,
                                                                sty.text___7NNgK
                                                              )}
                                                            >
                                                              {"Remove"}
                                                            </div>
                                                          </AntdButton>
                                                        </React.Fragment>
                                                      ),

                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["pinterest", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "pinterest.value"
                                                        }
                                                      ],

                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );
                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "pinterest"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.pinterest
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </div>
                                              </FormItemWrapper>
                                            </Stack__>
                                            <Stack__
                                              as={"div"}
                                              data-plasmic-name={"description"}
                                              data-plasmic-override={
                                                overrides.description
                                              }
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.description
                                              )}
                                            >
                                              <FormItemWrapper
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.formField__j3C6Y
                                                )}
                                                label={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__ixw1N
                                                    )}
                                                  >
                                                    {"Name"}
                                                  </div>
                                                }
                                                name={"description"}
                                                noStyle={true}
                                              >
                                                <div
                                                  data-plasmic-name={
                                                    "inputContainer7"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.inputContainer7
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.inputContainer7
                                                  )}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      autoSize: true,
                                                      bordered: false,
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.businessDescription
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          [
                                                            "businessDescription",
                                                            "value"
                                                          ],

                                                          AntdTextArea_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      placeholder:
                                                        "Describe your business",
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          [
                                                            "businessDescription",
                                                            "value"
                                                          ]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "businessDescription.value"
                                                        }
                                                      ],

                                                      [],
                                                      AntdTextArea_Helpers ??
                                                        {},
                                                      child$Props
                                                    );
                                                    return (
                                                      <AntdTextArea
                                                        data-plasmic-name={
                                                          "businessDescription"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.businessDescription
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </div>
                                              </FormItemWrapper>
                                              <ButtonContainer
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.buttonContainer__o0LOb
                                                )}
                                              >
                                                <AntdButton
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.button___6VgoA
                                                  )}
                                                  type={"ghost"}
                                                >
                                                  <Stack__
                                                    as={"div"}
                                                    hasGap={true}
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox__mvaSh
                                                    )}
                                                  >
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__nNliW
                                                      )}
                                                    >
                                                      {"Write With AI"}
                                                    </div>
                                                    <StarsSvgrepoComSvgIcon
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.svg__buKsh
                                                      )}
                                                      role={"img"}
                                                    />
                                                  </Stack__>
                                                </AntdButton>
                                              </ButtonContainer>
                                            </Stack__>
                                            <Stack__
                                              as={"div"}
                                              data-plasmic-name={"tags2"}
                                              data-plasmic-override={
                                                overrides.tags2
                                              }
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.tags2
                                              )}
                                            >
                                              <FormItemWrapper
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.formField__n4QW
                                                )}
                                                label={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__xPj7S
                                                    )}
                                                  >
                                                    {"Name"}
                                                  </div>
                                                }
                                                name={"tags"}
                                                noStyle={true}
                                              >
                                                <div
                                                  data-plasmic-name={
                                                    "inputContainer8"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.inputContainer8
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.inputContainer8
                                                  )}
                                                >
                                                  <AntdSelect
                                                    data-plasmic-name={"tags"}
                                                    data-plasmic-override={
                                                      overrides.tags
                                                    }
                                                    bordered={false}
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.tags
                                                    )}
                                                    defaultStylesClassName={classNames(
                                                      projectcss.root_reset,
                                                      projectcss.plasmic_default_styles,
                                                      projectcss.plasmic_mixins,
                                                      projectcss.plasmic_tokens,
                                                      plasmic_antd_5_hostless_css.plasmic_tokens,
                                                      plasmic_plasmic_rich_components_css.plasmic_tokens
                                                    )}
                                                    mode={"single"}
                                                    onChange={async (
                                                      ...eventArgs
                                                    ) => {
                                                      generateStateOnChangeProp(
                                                        $state,
                                                        ["tags", "value"]
                                                      ).apply(null, eventArgs);
                                                    }}
                                                    options={[
                                                      {
                                                        value: "option1",
                                                        label: "Option 1",
                                                        type: "option"
                                                      },
                                                      {
                                                        value: "option2",
                                                        label: "Option 2",
                                                        type: "option"
                                                      }
                                                    ]}
                                                    placeholder={
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          projectcss.__wab_text,
                                                          sty.text__wgsa3
                                                        )}
                                                      >
                                                        {""}
                                                      </div>
                                                    }
                                                    popupScopeClassName={
                                                      sty["tags__popup"]
                                                    }
                                                    suffixIcon={
                                                      <AngleDownIcon
                                                        className={classNames(
                                                          projectcss.all,
                                                          sty.svg__iiEe
                                                        )}
                                                        role={"img"}
                                                      />
                                                    }
                                                    value={generateStateValueProp(
                                                      $state,
                                                      ["tags", "value"]
                                                    )}
                                                  />
                                                </div>
                                              </FormItemWrapper>
                                            </Stack__>
                                            <Stack__
                                              as={"div"}
                                              data-plasmic-name={"info2"}
                                              data-plasmic-override={
                                                overrides.info2
                                              }
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.info2
                                              )}
                                            >
                                              <FormItemWrapper
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.formField__bve1S
                                                )}
                                                label={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__ew3Uf
                                                    )}
                                                  >
                                                    {"Name"}
                                                  </div>
                                                }
                                                name={"paymentTerms"}
                                                noStyle={true}
                                              >
                                                <div
                                                  data-plasmic-name={
                                                    "inputContainer9"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.inputContainer9
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.inputContainer9
                                                  )}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      bordered: false,
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.paymentTerms
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          [
                                                            "paymentTerms",
                                                            "value"
                                                          ],

                                                          AntdInput_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      placeholder:
                                                        "Payment Terms",
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          [
                                                            "paymentTerms",
                                                            "value"
                                                          ]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "paymentTerms.value"
                                                        }
                                                      ],

                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );
                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "paymentTerms"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.paymentTerms
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </div>
                                              </FormItemWrapper>
                                              <FormItemWrapper
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.formField__tTGm0
                                                )}
                                                label={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__kGkfi
                                                    )}
                                                  >
                                                    {"Name"}
                                                  </div>
                                                }
                                                name={"travelCost"}
                                                noStyle={true}
                                              >
                                                <div
                                                  data-plasmic-name={
                                                    "inputContainer10"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.inputContainer10
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.inputContainer10
                                                  )}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      bordered: false,
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.travelCost
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          [
                                                            "travelCost",
                                                            "value"
                                                          ],

                                                          AntdInput_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      placeholder:
                                                        "Travel Cost",
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          [
                                                            "travelCost",
                                                            "value"
                                                          ]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "travelCost.value"
                                                        }
                                                      ],

                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );
                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "travelCost"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.travelCost
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </div>
                                              </FormItemWrapper>
                                              <FormItemWrapper
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.formField__hdywt
                                                )}
                                                label={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___90S2C
                                                    )}
                                                  >
                                                    {"Name"}
                                                  </div>
                                                }
                                                name={"albums"}
                                                noStyle={true}
                                              >
                                                <div
                                                  data-plasmic-name={
                                                    "inputContainer11"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.inputContainer11
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.inputContainer11
                                                  )}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      bordered: false,
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.albums2
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          ["albums2", "value"],
                                                          AntdInput_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      placeholder: "Albums",
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          ["albums2", "value"]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "albums2.value"
                                                        }
                                                      ],

                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );
                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "albums2"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.albums2
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </div>
                                              </FormItemWrapper>
                                              <FormItemWrapper
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.formField__hXjyr
                                                )}
                                                label={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__zODvK
                                                    )}
                                                  >
                                                    {"Name"}
                                                  </div>
                                                }
                                                name={"deliveryTime"}
                                                noStyle={true}
                                              >
                                                <div
                                                  data-plasmic-name={
                                                    "inputContainer12"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.inputContainer12
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.inputContainer12
                                                  )}
                                                >
                                                  {(() => {
                                                    const child$Props = {
                                                      bordered: false,
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.deliveryTime
                                                      ),
                                                      onChange: async (
                                                        ...eventArgs
                                                      ) => {
                                                        generateStateOnChangePropForCodeComponents(
                                                          $state,
                                                          "value",
                                                          [
                                                            "deliveryTime",
                                                            "value"
                                                          ],

                                                          AntdInput_Helpers
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      },
                                                      placeholder:
                                                        "Delivery Time",
                                                      value:
                                                        generateStateValueProp(
                                                          $state,
                                                          [
                                                            "deliveryTime",
                                                            "value"
                                                          ]
                                                        )
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "value",
                                                          plasmicStateName:
                                                            "deliveryTime.value"
                                                        }
                                                      ],

                                                      [],
                                                      AntdInput_Helpers ?? {},
                                                      child$Props
                                                    );
                                                    return (
                                                      <AntdInput
                                                        data-plasmic-name={
                                                          "deliveryTime"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.deliveryTime
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </div>
                                              </FormItemWrapper>
                                            </Stack__>
                                          </FormWrapper>
                                        );
                                      })()
                                    : null}
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___4Fh
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__xvZl1
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__nxy9E
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__bGDj
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__xYkmT
                                            )}
                                          >
                                            {"Store Image"}
                                          </div>
                                          <FeaturingVendorCard
                                            data-plasmic-name={
                                              "featuringVendorCard"
                                            }
                                            data-plasmic-override={
                                              overrides.featuringVendorCard
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.featuringVendorCard
                                            )}
                                            id={(() => {
                                              try {
                                                return (() => {
                                                  const location =
                                                    $queries.storeInfo?.data
                                                      ?.response?.data?.store
                                                      ?.data?.id;
                                                  return location;
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            images={(() => {
                                              try {
                                                return $queries.storeInfo?.data
                                                  ?.response?.data?.store?.data
                                                  ?.attributes?.profile_picture
                                                  ?.data?.attributes?.url;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            location={(() => {
                                              try {
                                                return (() => {
                                                  const location =
                                                    $queries.storeInfo?.data
                                                      ?.response?.data?.store
                                                      ?.data?.attributes
                                                      ?.locations.data[0]
                                                      .attributes;
                                                  return (
                                                    location.City +
                                                    ", " +
                                                    location.State
                                                  );
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            name={(() => {
                                              try {
                                                return $queries.storeInfo?.data
                                                  ?.response?.data?.store?.data
                                                  ?.attributes?.Name;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            price={(() => {
                                              try {
                                                return (() => {
                                                  const services =
                                                    $queries.storeInfo?.data
                                                      ?.response?.data?.store
                                                      ?.data?.attributes
                                                      ?.services?.data;
                                                  const price = services.map(
                                                    item =>
                                                      item.attributes
                                                        .serviceCharge
                                                  );
                                                  return price.length
                                                    ? Math.min(...price)
                                                    : 0;
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            rating={(() => {
                                              try {
                                                return $queries.storeInfo?.data
                                                  ?.response?.data?.store?.data
                                                  ?.attributes?.rating;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return 4;
                                                }
                                                throw e;
                                              }
                                            })()}
                                          />
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__euMmQ
                                          )}
                                        >
                                          {(() => {
                                            const child$Props = {
                                              className: classNames(
                                                "__wab_instance",
                                                sty.profilePicture
                                              ),
                                              extendedOnValuesChange: async (
                                                ...eventArgs
                                              ) => {
                                                generateStateOnChangePropForCodeComponents(
                                                  $state,
                                                  "value",
                                                  ["profilePicture", "value"],
                                                  FormWrapper_Helpers
                                                ).apply(null, eventArgs);
                                              },
                                              formItems: [
                                                {
                                                  label: "Name",
                                                  name: "name",
                                                  inputType: "Text"
                                                },
                                                {
                                                  label: "Message",
                                                  name: "message",
                                                  inputType: "Text Area"
                                                }
                                              ],

                                              labelCol: {
                                                span: 8,
                                                horizontalOnly: true
                                              },
                                              layout: "vertical",
                                              mode: "advanced",
                                              onFinish: async values => {
                                                const $steps = {};
                                                $steps["runCode"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        customFunction:
                                                          async () => {
                                                            return (async () => {
                                                              function base64ToBlob(
                                                                base64,
                                                                mimeType
                                                              ) {
                                                                const byteCharacters =
                                                                  atob(base64);
                                                                const byteNumbers =
                                                                  new Array(
                                                                    byteCharacters.length
                                                                  );
                                                                for (
                                                                  let i = 0;
                                                                  i <
                                                                  byteCharacters.length;
                                                                  i++
                                                                ) {
                                                                  byteNumbers[
                                                                    i
                                                                  ] =
                                                                    byteCharacters.charCodeAt(
                                                                      i
                                                                    );
                                                                }
                                                                const byteArray =
                                                                  new Uint8Array(
                                                                    byteNumbers
                                                                  );
                                                                return new Blob(
                                                                  [byteArray],
                                                                  {
                                                                    type: mimeType
                                                                  }
                                                                );
                                                              }
                                                              const files =
                                                                $state
                                                                  .profilePicture2
                                                                  .files;
                                                              const myHeaders =
                                                                new Headers();
                                                              myHeaders.append(
                                                                "Authorization",
                                                                "bearer a21a6b9751ba24a204ac31f092330e7fee08ef5669f20faa2b699b3d9fd0a59f3775120e2fc63ac4784e47ddb63ee1f68a37ba53254c4f991a2c4d3725bec5132dc17c67205cdea33b163b14e403bfbc2bb447a5ee4d50ad1b2c63d352bd024b62c3498400aac2364858c0ff5bbba7a7c71937e8c549afea037011b6608d1ae5"
                                                              );
                                                              async function uploadFiles(
                                                                files
                                                              ) {
                                                                const formdata =
                                                                  new FormData();
                                                                formdata.append(
                                                                  "ref",
                                                                  "api::store.store"
                                                                );
                                                                formdata.append(
                                                                  "refId",
                                                                  $queries
                                                                    .storeInfo
                                                                    .data
                                                                    .response
                                                                    .data.store
                                                                    .data.id
                                                                );
                                                                formdata.append(
                                                                  "field",
                                                                  "profile_picture"
                                                                );
                                                                files.forEach(
                                                                  file => {
                                                                    const base64String =
                                                                      file.contents;
                                                                    const mimeType =
                                                                      file.type;
                                                                    const fileName =
                                                                      file.name;
                                                                    const fileBlob =
                                                                      base64ToBlob(
                                                                        base64String,
                                                                        mimeType
                                                                      );
                                                                    formdata.append(
                                                                      "files",
                                                                      fileBlob,
                                                                      fileName
                                                                    );
                                                                  }
                                                                );
                                                                const requestOptions =
                                                                  {
                                                                    method:
                                                                      "POST",
                                                                    headers:
                                                                      myHeaders,
                                                                    body: formdata
                                                                  };
                                                                try {
                                                                  const response =
                                                                    await fetch(
                                                                      "https://admin.weddingvows.com/api/upload",
                                                                      requestOptions
                                                                    );
                                                                  const result =
                                                                    await response.json();
                                                                  return result;
                                                                } catch (error) {
                                                                  console.error(
                                                                    "Error Uploading files",
                                                                    error
                                                                  );
                                                                  return {
                                                                    error:
                                                                      "Error Uploading files"
                                                                  };
                                                                }
                                                              }
                                                              return uploadFiles(
                                                                files
                                                              )
                                                                .then(res => {
                                                                  if (
                                                                    !res.error
                                                                  ) {
                                                                    return {
                                                                      success:
                                                                        "All uploads successful!"
                                                                    };
                                                                  } else {
                                                                    console.error(
                                                                      "Error in uploading files",
                                                                      error
                                                                    );
                                                                    return {
                                                                      error:
                                                                        "Some uploads failed!"
                                                                    };
                                                                  }
                                                                })
                                                                .catch(
                                                                  error => {
                                                                    console.error(
                                                                      "Error in uploading files",
                                                                      error
                                                                    );
                                                                    return {
                                                                      error:
                                                                        "Some uploads failed!"
                                                                    };
                                                                  }
                                                                );
                                                            })();
                                                          }
                                                      };
                                                      return (({
                                                        customFunction
                                                      }) => {
                                                        return customFunction();
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["runCode"] != null &&
                                                  typeof $steps["runCode"] ===
                                                    "object" &&
                                                  typeof $steps["runCode"]
                                                    .then === "function"
                                                ) {
                                                  $steps["runCode"] =
                                                    await $steps["runCode"];
                                                }
                                                $steps["invokeGlobalAction"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          args: [
                                                            "success",
                                                            "Uploaded!"
                                                          ]
                                                        };
                                                        return $globalActions[
                                                          "plasmic-antd5-config-provider.showNotification"
                                                        ]?.apply(null, [
                                                          ...actionArgs.args
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps[
                                                    "invokeGlobalAction"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "invokeGlobalAction"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "invokeGlobalAction"
                                                  ].then === "function"
                                                ) {
                                                  $steps["invokeGlobalAction"] =
                                                    await $steps[
                                                      "invokeGlobalAction"
                                                    ];
                                                }
                                                $steps["invokeGlobalAction2"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          args: [
                                                            "error",
                                                            "Failed! Try again"
                                                          ]
                                                        };
                                                        return $globalActions[
                                                          "plasmic-antd5-config-provider.showNotification"
                                                        ]?.apply(null, [
                                                          ...actionArgs.args
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps[
                                                    "invokeGlobalAction2"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "invokeGlobalAction2"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "invokeGlobalAction2"
                                                  ].then === "function"
                                                ) {
                                                  $steps[
                                                    "invokeGlobalAction2"
                                                  ] = await $steps[
                                                    "invokeGlobalAction2"
                                                  ];
                                                }
                                                $steps["refreshData"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        queryInvalidation: [
                                                          "ee6eec85-3da9-4dad-b754-fbf6020ed489"
                                                        ]
                                                      };
                                                      return (async ({
                                                        queryInvalidation
                                                      }) => {
                                                        if (
                                                          !queryInvalidation
                                                        ) {
                                                          return;
                                                        }
                                                        await plasmicInvalidate(
                                                          queryInvalidation
                                                        );
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["refreshData"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "refreshData"
                                                  ] === "object" &&
                                                  typeof $steps["refreshData"]
                                                    .then === "function"
                                                ) {
                                                  $steps["refreshData"] =
                                                    await $steps["refreshData"];
                                                }
                                              },
                                              onIsSubmittingChange: async (
                                                ...eventArgs
                                              ) => {
                                                generateStateOnChangePropForCodeComponents(
                                                  $state,
                                                  "isSubmitting",
                                                  [
                                                    "profilePicture",
                                                    "isSubmitting"
                                                  ],

                                                  FormWrapper_Helpers
                                                ).apply(null, eventArgs);
                                              },
                                              ref: ref => {
                                                $refs["profilePicture"] = ref;
                                              },
                                              submitSlot: null,
                                              wrapperCol: {
                                                span: 16,
                                                horizontalOnly: true
                                              }
                                            };
                                            initializeCodeComponentStates(
                                              $state,
                                              [
                                                {
                                                  name: "value",
                                                  plasmicStateName:
                                                    "profilePicture.value"
                                                },
                                                {
                                                  name: "isSubmitting",
                                                  plasmicStateName:
                                                    "profilePicture.isSubmitting"
                                                }
                                              ],

                                              [],
                                              FormWrapper_Helpers ?? {},
                                              child$Props
                                            );
                                            return (
                                              <FormWrapper
                                                data-plasmic-name={
                                                  "profilePicture"
                                                }
                                                data-plasmic-override={
                                                  overrides.profilePicture
                                                }
                                                {...child$Props}
                                              >
                                                <FormItemWrapper
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.formField__xHbv5
                                                  )}
                                                  label={null}
                                                  name={"name"}
                                                  noStyle={true}
                                                >
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox__dFp5N
                                                    )}
                                                  >
                                                    <UploadWrapper
                                                      data-plasmic-name={
                                                        "profilePicture2"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.profilePicture2
                                                      }
                                                      accept={""}
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.profilePicture2
                                                      )}
                                                      dragAndDropFiles={true}
                                                      files={generateStateValueProp(
                                                        $state,
                                                        [
                                                          "profilePicture2",
                                                          "files"
                                                        ]
                                                      )}
                                                      listType={"picture-card"}
                                                      multiple={true}
                                                      onFilesChange={async (
                                                        ...eventArgs
                                                      ) => {
                                                        generateStateOnChangeProp(
                                                          $state,
                                                          [
                                                            "profilePicture2",
                                                            "files"
                                                          ]
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      }}
                                                      showUploadList={true}
                                                    >
                                                      <Stack__
                                                        as={"div"}
                                                        hasGap={true}
                                                        className={classNames(
                                                          projectcss.all,
                                                          sty.freeBox__xIhBz
                                                        )}
                                                      >
                                                        <Icon17Icon
                                                          className={classNames(
                                                            projectcss.all,
                                                            sty.svg__bMFz5
                                                          )}
                                                          role={"img"}
                                                        />

                                                        <div
                                                          className={classNames(
                                                            projectcss.all,
                                                            projectcss.__wab_text,
                                                            sty.text__mlUFl
                                                          )}
                                                        >
                                                          {
                                                            "Click or drag file to this area to upload"
                                                          }
                                                        </div>
                                                      </Stack__>
                                                    </UploadWrapper>
                                                  </div>
                                                </FormItemWrapper>
                                                <ButtonContainer
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.buttonContainer__rievs
                                                  )}
                                                >
                                                  <AntdButton
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.button__iTlg7
                                                    )}
                                                    submitsForm={true}
                                                    type={"ghost"}
                                                  >
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text___75Q16
                                                      )}
                                                    >
                                                      {"Upload"}
                                                    </div>
                                                  </AntdButton>
                                                </ButtonContainer>
                                              </FormWrapper>
                                            );
                                          })()}
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $queries.storeInfo.data.response
                                        .data.store.data;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <div
                                      data-plasmic-name={"locationInformation"}
                                      data-plasmic-override={
                                        overrides.locationInformation
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.locationInformation
                                      )}
                                      id={"businessLocation"}
                                      key={currentIndex}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__ptbp9
                                        )}
                                      >
                                        <div
                                          data-plasmic-name={"header14"}
                                          data-plasmic-override={
                                            overrides.header14
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.header14
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__wjGy0
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text___0XLrV
                                              )}
                                            >
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return `Location ${
                                                      currentIndex + 1
                                                    }`;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "Location";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            </div>
                                            <AntdTooltip
                                              className={classNames(
                                                "__wab_instance",
                                                sty.tooltip___6DeWf
                                              )}
                                              titleText={
                                                "Add your store location"
                                              }
                                            >
                                              <QuestionMarkCircleSvgrepoCom1SvgIcon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg__s3L87
                                                )}
                                                role={"img"}
                                              />
                                            </AntdTooltip>
                                          </div>
                                          {(() => {
                                            try {
                                              return !$state.editState.location;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <AntdButton
                                              className={classNames(
                                                "__wab_instance",
                                                sty.button__p0Gbr
                                              )}
                                              onClick={async () => {
                                                const $steps = {};
                                                $steps[
                                                  "updateEditStateLocation"
                                                ] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "editState",
                                                            "location"
                                                          ]
                                                        },
                                                        operation: 0,
                                                        value: true
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;
                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          value
                                                        );
                                                        return value;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps[
                                                    "updateEditStateLocation"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "updateEditStateLocation"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateEditStateLocation"
                                                  ].then === "function"
                                                ) {
                                                  $steps[
                                                    "updateEditStateLocation"
                                                  ] = await $steps[
                                                    "updateEditStateLocation"
                                                  ];
                                                }
                                              }}
                                              type={"ghost"}
                                            >
                                              <PencilSvgIcon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg__htlE2
                                                )}
                                                role={"img"}
                                              />
                                            </AntdButton>
                                          ) : null}
                                          {(() => {
                                            try {
                                              return $state.editState.location;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <AntdButton
                                              className={classNames(
                                                "__wab_instance",
                                                sty.button__znT36
                                              )}
                                              onClick={async () => {
                                                const $steps = {};
                                                $steps["graphqlQuery"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        dataOp: {
                                                          sourceId:
                                                            "bvg9JqrXbdUtvMXZbC26cd",
                                                          opId: "9c71045a-e13b-4c21-90f5-1f7ffb03bae1",
                                                          userArgs: {
                                                            variables: [
                                                              currentItem.id,
                                                              $state
                                                                .locationForm[
                                                                currentIndex
                                                              ].locationForm
                                                                .pincode,
                                                              $state
                                                                .locationForm[
                                                                currentIndex
                                                              ].locationForm
                                                                .street,
                                                              $state
                                                                .locationForm[
                                                                currentIndex
                                                              ].locationCity,
                                                              $state
                                                                .locationForm[
                                                                currentIndex
                                                              ].locationState
                                                            ]
                                                          },
                                                          cacheKey: null,
                                                          invalidatedKeys: null,
                                                          roleId: null
                                                        }
                                                      };
                                                      return (async ({
                                                        dataOp,
                                                        continueOnError
                                                      }) => {
                                                        try {
                                                          const response =
                                                            await executePlasmicDataOp(
                                                              dataOp,
                                                              {
                                                                userAuthToken:
                                                                  dataSourcesCtx?.userAuthToken,
                                                                user: dataSourcesCtx?.user
                                                              }
                                                            );
                                                          await plasmicInvalidate(
                                                            dataOp.invalidatedKeys
                                                          );
                                                          return response;
                                                        } catch (e) {
                                                          if (
                                                            !continueOnError
                                                          ) {
                                                            throw e;
                                                          }
                                                          return e;
                                                        }
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["graphqlQuery"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "graphqlQuery"
                                                  ] === "object" &&
                                                  typeof $steps["graphqlQuery"]
                                                    .then === "function"
                                                ) {
                                                  $steps["graphqlQuery"] =
                                                    await $steps[
                                                      "graphqlQuery"
                                                    ];
                                                }
                                                $steps["refreshData"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        queryInvalidation: [
                                                          "ee6eec85-3da9-4dad-b754-fbf6020ed489"
                                                        ]
                                                      };
                                                      return (async ({
                                                        queryInvalidation
                                                      }) => {
                                                        if (
                                                          !queryInvalidation
                                                        ) {
                                                          return;
                                                        }
                                                        await plasmicInvalidate(
                                                          queryInvalidation
                                                        );
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["refreshData"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "refreshData"
                                                  ] === "object" &&
                                                  typeof $steps["refreshData"]
                                                    .then === "function"
                                                ) {
                                                  $steps["refreshData"] =
                                                    await $steps["refreshData"];
                                                }
                                                $steps[
                                                  "updateEditStateLocation"
                                                ] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "editState",
                                                            "location"
                                                          ]
                                                        },
                                                        operation: 0,
                                                        value: false
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;
                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          value
                                                        );
                                                        return value;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps[
                                                    "updateEditStateLocation"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "updateEditStateLocation"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateEditStateLocation"
                                                  ].then === "function"
                                                ) {
                                                  $steps[
                                                    "updateEditStateLocation"
                                                  ] = await $steps[
                                                    "updateEditStateLocation"
                                                  ];
                                                }
                                              }}
                                              type={"ghost"}
                                            >
                                              <SaveSvgrepoComSvgIcon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg__zf4Ee
                                                )}
                                                role={"img"}
                                              />
                                            </AntdButton>
                                          ) : null}
                                        </div>
                                        {(() => {
                                          try {
                                            return $state.editState.location;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return true;
                                            }
                                            throw e;
                                          }
                                        })() ? (
                                          <LocationForm
                                            data-plasmic-name={"locationForm"}
                                            data-plasmic-override={
                                              overrides.locationForm
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.locationForm
                                            )}
                                            locationId={(() => {
                                              try {
                                                return currentItem.id;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            locationInfo={(() => {
                                              try {
                                                return currentItem.attributes;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            noButton={true}
                                            vendorInfo={(() => {
                                              try {
                                                return $queries.storeInfo.data
                                                  .response.data.store.data;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                          />
                                        ) : null}
                                        <Stack__
                                          as={"div"}
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__xSNu
                                          )}
                                        >
                                          <Stack__
                                            as={"div"}
                                            data-plasmic-name={"row6"}
                                            data-plasmic-override={
                                              overrides.row6
                                            }
                                            hasGap={true}
                                            className={classNames(
                                              projectcss.all,
                                              sty.row6
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__nPfZz
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__ffExd
                                                )}
                                              >
                                                {"Street/Building"}
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__ds3Zy
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return currentItem
                                                        .attributes.Street;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </div>
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__fcXen
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text___3OhG3
                                                )}
                                              >
                                                {"City"}
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__ruW5G
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return currentItem
                                                        .attributes.City;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </div>
                                          </Stack__>
                                          <Stack__
                                            as={"div"}
                                            data-plasmic-name={"row7"}
                                            data-plasmic-override={
                                              overrides.row7
                                            }
                                            hasGap={true}
                                            className={classNames(
                                              projectcss.all,
                                              sty.row7
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__ryapE
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__h1ZbP
                                                )}
                                              >
                                                {"State"}
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__qt2HH
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return currentItem
                                                        .attributes.City;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </div>
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox___1GycU
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__yrHjf
                                                )}
                                              >
                                                {"Pincode"}
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__gxkXd
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return currentItem
                                                        .attributes.Pincode;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </div>
                                          </Stack__>
                                        </Stack__>
                                      </div>
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          sty.link__zTxA5
                                        )}
                                        platform={"react"}
                                      >
                                        <AntdButton
                                          data-plasmic-name={"addMoreLocations"}
                                          data-plasmic-override={
                                            overrides.addMoreLocations
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.addMoreLocations
                                          )}
                                          submitsForm={false}
                                          type={"ghost"}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__mMaCb
                                            )}
                                          >
                                            {"Buy More Locations"}
                                          </div>
                                        </AntdButton>
                                      </PlasmicLink__>
                                    </div>
                                  );
                                })}
                              </div>
                            </TabContent>
                            <TabContent
                              data-plasmic-name={"enquiries"}
                              data-plasmic-override={overrides.enquiries}
                              className={classNames(
                                "__wab_instance",
                                sty.enquiries
                              )}
                            >
                              <TabContent
                                data-plasmic-name={"enquiriesForms"}
                                data-plasmic-override={overrides.enquiriesForms}
                                className={classNames(
                                  "__wab_instance",
                                  sty.enquiriesForms
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__uAhbQ
                                  )}
                                >
                                  <TabContent
                                    className={classNames(
                                      "__wab_instance",
                                      sty.tabContent__xnx8J
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__e8Rnb
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__ct1X
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__qvafu
                                          )}
                                        >
                                          {"Recent Enquiries"}
                                        </div>
                                        <Stack__
                                          as={"div"}
                                          data-plasmic-name={"type"}
                                          data-plasmic-override={overrides.type}
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.type
                                          )}
                                        >
                                          <div
                                            data-plasmic-name={"all"}
                                            data-plasmic-override={
                                              overrides.all
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.all
                                            )}
                                            onClick={async event => {
                                              const $steps = {};
                                              $steps["updateEnquiryType"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "enquiryType"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: ""
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;
                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updateEnquiryType"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateEnquiryType"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateEnquiryType"
                                                ].then === "function"
                                              ) {
                                                $steps["updateEnquiryType"] =
                                                  await $steps[
                                                    "updateEnquiryType"
                                                  ];
                                              }
                                            }}
                                          >
                                            <HeaderTabButtonUnderline2
                                              className={classNames(
                                                "__wab_instance",
                                                sty.headerTabButtonUnderline2__dMq6J
                                              )}
                                              content={"All Enquiries"}
                                              isActive={(() => {
                                                try {
                                                  return (
                                                    $state.enquiryType === ""
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return [];
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            />
                                          </div>
                                          <div
                                            data-plasmic-name={"lead"}
                                            data-plasmic-override={
                                              overrides.lead
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.lead
                                            )}
                                            onClick={async event => {
                                              const $steps = {};
                                              $steps["updateEnquiryType"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "enquiryType"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: "Lead"
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;
                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updateEnquiryType"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateEnquiryType"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateEnquiryType"
                                                ].then === "function"
                                              ) {
                                                $steps["updateEnquiryType"] =
                                                  await $steps[
                                                    "updateEnquiryType"
                                                  ];
                                              }
                                            }}
                                          >
                                            <HeaderTabButtonUnderline2
                                              className={classNames(
                                                "__wab_instance",
                                                sty.headerTabButtonUnderline2__zhQou
                                              )}
                                              content={"Leads"}
                                              isActive={(() => {
                                                try {
                                                  return (
                                                    $state.enquiryType ===
                                                    "Lead"
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return [];
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            />
                                          </div>
                                          <div
                                            data-plasmic-name={"prospect"}
                                            data-plasmic-override={
                                              overrides.prospect
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.prospect
                                            )}
                                            onClick={async event => {
                                              const $steps = {};
                                              $steps["updateEnquiryType"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "enquiryType"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: "Prospect"
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;
                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updateEnquiryType"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateEnquiryType"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateEnquiryType"
                                                ].then === "function"
                                              ) {
                                                $steps["updateEnquiryType"] =
                                                  await $steps[
                                                    "updateEnquiryType"
                                                  ];
                                              }
                                            }}
                                          >
                                            <HeaderTabButtonUnderline2
                                              className={classNames(
                                                "__wab_instance",
                                                sty.headerTabButtonUnderline2___9AMmE
                                              )}
                                              content={"Prospect"}
                                              isActive={(() => {
                                                try {
                                                  return (
                                                    $state.enquiryType ===
                                                    "Prospect"
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return [];
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            />
                                          </div>
                                          <div
                                            data-plasmic-name={"followUp"}
                                            data-plasmic-override={
                                              overrides.followUp
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.followUp
                                            )}
                                            onClick={async event => {
                                              const $steps = {};
                                              $steps["updateEnquiryType"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "enquiryType"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: "FollowUp"
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;
                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updateEnquiryType"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateEnquiryType"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateEnquiryType"
                                                ].then === "function"
                                              ) {
                                                $steps["updateEnquiryType"] =
                                                  await $steps[
                                                    "updateEnquiryType"
                                                  ];
                                              }
                                            }}
                                          >
                                            <HeaderTabButtonUnderline2
                                              className={classNames(
                                                "__wab_instance",
                                                sty.headerTabButtonUnderline2__eTFx6
                                              )}
                                              content={"Follow Ups"}
                                              isActive={(() => {
                                                try {
                                                  return (
                                                    $state.enquiryType ===
                                                    "FollowUp"
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return [];
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            />
                                          </div>
                                          <div
                                            data-plasmic-name={"conversions3"}
                                            data-plasmic-override={
                                              overrides.conversions3
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.conversions3
                                            )}
                                            onClick={async event => {
                                              const $steps = {};
                                              $steps["updateEnquiryType"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "enquiryType"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: "Conversion"
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;
                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updateEnquiryType"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateEnquiryType"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateEnquiryType"
                                                ].then === "function"
                                              ) {
                                                $steps["updateEnquiryType"] =
                                                  await $steps[
                                                    "updateEnquiryType"
                                                  ];
                                              }
                                            }}
                                          >
                                            <HeaderTabButtonUnderline2
                                              className={classNames(
                                                "__wab_instance",
                                                sty.headerTabButtonUnderline2__mqdhN
                                              )}
                                              content={"Conversions"}
                                              isActive={(() => {
                                                try {
                                                  return (
                                                    $state.enquiryType ===
                                                    "Conversion"
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return [];
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            />
                                          </div>
                                          <div
                                            data-plasmic-name={"discarded3"}
                                            data-plasmic-override={
                                              overrides.discarded3
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.discarded3
                                            )}
                                            onClick={async event => {
                                              const $steps = {};
                                              $steps["updateEnquiryType"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "enquiryType"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: "Discarded"
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;
                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updateEnquiryType"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateEnquiryType"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateEnquiryType"
                                                ].then === "function"
                                              ) {
                                                $steps["updateEnquiryType"] =
                                                  await $steps[
                                                    "updateEnquiryType"
                                                  ];
                                              }
                                            }}
                                          >
                                            <HeaderTabButtonUnderline2
                                              className={classNames(
                                                "__wab_instance",
                                                sty.headerTabButtonUnderline2__b9IDn
                                              )}
                                              content={"Discarded"}
                                              isActive={(() => {
                                                try {
                                                  return (
                                                    $state.enquiryType ===
                                                    "Discarded"
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return [];
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            />
                                          </div>
                                        </Stack__>
                                      </div>
                                      <EnquiriesTable
                                        className={classNames(
                                          "__wab_instance",
                                          sty.enquiriesTable___8NhDh
                                        )}
                                        type={(() => {
                                          try {
                                            return $state.enquiryType;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        vendorId={(() => {
                                          try {
                                            return $queries.venderInfo.data
                                              .response.data
                                              .usersPermissionsUser.data;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />
                                    </div>
                                  </TabContent>
                                </div>
                                {false ? (
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"old"}
                                    data-plasmic-override={overrides.old}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.old
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__olMSz
                                      )}
                                    >
                                      <TabContent
                                        className={classNames(
                                          "__wab_instance",
                                          sty.tabContent___2O0R7
                                        )}
                                        tabKey={"enquiries"}
                                      >
                                        <Stack__
                                          as={"div"}
                                          data-plasmic-name={"responsiveColumn"}
                                          data-plasmic-override={
                                            overrides.responsiveColumn
                                          }
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.responsiveColumn
                                          )}
                                        >
                                          <div
                                            data-plasmic-name={"content3"}
                                            data-plasmic-override={
                                              overrides.content3
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.content3
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__ku2Gp
                                              )}
                                            >
                                              <div
                                                data-plasmic-name={"messages"}
                                                data-plasmic-override={
                                                  overrides.messages
                                                }
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.messages
                                                )}
                                              >
                                                {(() => {
                                                  try {
                                                    return (
                                                      !$state.filteredEnquiries
                                                        .length ||
                                                      ($state.filter &&
                                                        !$state.filteredEnquiries.filter(
                                                          item =>
                                                            item.attributes
                                                              .Status ===
                                                            $state.filter
                                                        ).length)
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return true;
                                                    }
                                                    throw e;
                                                  }
                                                })() ? (
                                                  <section
                                                    data-plasmic-name={
                                                      "noMessages"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.noMessages
                                                    }
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.noMessages
                                                    )}
                                                  >
                                                    <MessagesPeoplePersonBubble1Icon
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.svg__bk2Iz
                                                      )}
                                                      role={"img"}
                                                    />

                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text___6S6Rv
                                                      )}
                                                    >
                                                      {
                                                        "No messages have been found in this folder"
                                                      }
                                                    </div>
                                                  </section>
                                                ) : null}
                                                <TabsContainer
                                                  data-plasmic-name={"tabs"}
                                                  data-plasmic-override={
                                                    overrides.tabs
                                                  }
                                                  initialKey={"inbox"}
                                                  previewAll={true}
                                                  previewKey={"inbox"}
                                                >
                                                  <DataCtxReader__>
                                                    {$ctx => (
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          sty.freeBox___79F3T
                                                        )}
                                                      >
                                                        <TabContent
                                                          data-plasmic-name={
                                                            "enquiry2"
                                                          }
                                                          data-plasmic-override={
                                                            overrides.enquiry2
                                                          }
                                                          className={classNames(
                                                            "__wab_instance",
                                                            sty.enquiry2
                                                          )}
                                                          tabKey={"enquiry"}
                                                        >
                                                          <Stack__
                                                            as={"div"}
                                                            hasGap={true}
                                                            className={classNames(
                                                              projectcss.all,
                                                              sty.freeBox__e6Bn5
                                                            )}
                                                          >
                                                            <Stack__
                                                              as={"div"}
                                                              hasGap={true}
                                                              className={classNames(
                                                                projectcss.all,
                                                                sty.freeBox__xC8Jr
                                                              )}
                                                            >
                                                              <EnquiryForm
                                                                data-plasmic-name={
                                                                  "enquiryForm"
                                                                }
                                                                data-plasmic-override={
                                                                  overrides.enquiryForm
                                                                }
                                                                className={classNames(
                                                                  "__wab_instance",
                                                                  sty.enquiryForm
                                                                )}
                                                              />

                                                              <Stack__
                                                                as={"div"}
                                                                hasGap={true}
                                                                className={classNames(
                                                                  projectcss.all,
                                                                  sty.freeBox__lyj7U
                                                                )}
                                                              >
                                                                <Select
                                                                  data-plasmic-name={
                                                                    "formSelect"
                                                                  }
                                                                  data-plasmic-override={
                                                                    overrides.formSelect
                                                                  }
                                                                  className={classNames(
                                                                    "__wab_instance",
                                                                    sty.formSelect
                                                                  )}
                                                                  onChange={async (
                                                                    ...eventArgs
                                                                  ) => {
                                                                    ((
                                                                      ...eventArgs
                                                                    ) => {
                                                                      generateStateOnChangeProp(
                                                                        $state,
                                                                        [
                                                                          "formSelect",
                                                                          "value"
                                                                        ]
                                                                      )(
                                                                        eventArgs[0]
                                                                      );
                                                                    }).apply(
                                                                      null,
                                                                      eventArgs
                                                                    );
                                                                    if (
                                                                      eventArgs.length >
                                                                        1 &&
                                                                      eventArgs[1] &&
                                                                      eventArgs[1]
                                                                        ._plasmic_state_init_
                                                                    ) {
                                                                      return;
                                                                    }
                                                                  }}
                                                                  options={[
                                                                    {
                                                                      value:
                                                                        "option1",
                                                                      label:
                                                                        "Option 1"
                                                                    },
                                                                    {
                                                                      value:
                                                                        "option2",
                                                                      label:
                                                                        "Option 2"
                                                                    }
                                                                  ]}
                                                                  value={generateStateValueProp(
                                                                    $state,
                                                                    [
                                                                      "formSelect",
                                                                      "value"
                                                                    ]
                                                                  )}
                                                                />

                                                                <Button2
                                                                  data-plasmic-name={
                                                                    "sendEnquiryForm"
                                                                  }
                                                                  data-plasmic-override={
                                                                    overrides.sendEnquiryForm
                                                                  }
                                                                  className={classNames(
                                                                    "__wab_instance",
                                                                    sty.sendEnquiryForm
                                                                  )}
                                                                  color={"red"}
                                                                >
                                                                  <div
                                                                    className={classNames(
                                                                      projectcss.all,
                                                                      projectcss.__wab_text,
                                                                      sty.text__jri6F
                                                                    )}
                                                                  >
                                                                    <React.Fragment>
                                                                      <span
                                                                        className={
                                                                          "plasmic_default__all plasmic_default__span"
                                                                        }
                                                                        style={{
                                                                          color:
                                                                            "#FFFFFFE0"
                                                                        }}
                                                                      >
                                                                        {
                                                                          "Send via Mail"
                                                                        }
                                                                      </span>
                                                                    </React.Fragment>
                                                                  </div>
                                                                </Button2>
                                                                <Button2
                                                                  data-plasmic-name={
                                                                    "sendEnquiryForm2"
                                                                  }
                                                                  data-plasmic-override={
                                                                    overrides.sendEnquiryForm2
                                                                  }
                                                                  className={classNames(
                                                                    "__wab_instance",
                                                                    sty.sendEnquiryForm2
                                                                  )}
                                                                  color={"red"}
                                                                >
                                                                  <div
                                                                    className={classNames(
                                                                      projectcss.all,
                                                                      projectcss.__wab_text,
                                                                      sty.text__v6PAq
                                                                    )}
                                                                  >
                                                                    <React.Fragment>
                                                                      <span
                                                                        className={
                                                                          "plasmic_default__all plasmic_default__span"
                                                                        }
                                                                        style={{
                                                                          color:
                                                                            "#FFFFFFE0"
                                                                        }}
                                                                      >
                                                                        {
                                                                          "Send Via Whatsapp"
                                                                        }
                                                                      </span>
                                                                    </React.Fragment>
                                                                  </div>
                                                                </Button2>
                                                              </Stack__>
                                                            </Stack__>
                                                            <Stack__
                                                              as={"div"}
                                                              hasGap={true}
                                                              className={classNames(
                                                                projectcss.all,
                                                                sty.freeBox___0FiOu
                                                              )}
                                                            >
                                                              {(() => {
                                                                const child$Props =
                                                                  {
                                                                    bordered:
                                                                      true,
                                                                    className:
                                                                      classNames(
                                                                        "__wab_instance",
                                                                        sty.notes
                                                                      ),
                                                                    defaultOpen:
                                                                      false,
                                                                    ghost:
                                                                      false,
                                                                    label2: (
                                                                      <div
                                                                        className={classNames(
                                                                          projectcss.all,
                                                                          projectcss.__wab_text,
                                                                          sty.text__vF7Et
                                                                        )}
                                                                      >
                                                                        {
                                                                          "Notes"
                                                                        }
                                                                      </div>
                                                                    ),

                                                                    onChange:
                                                                      async (
                                                                        ...eventArgs
                                                                      ) => {
                                                                        generateStateOnChangePropForCodeComponents(
                                                                          $state,
                                                                          "open",
                                                                          [
                                                                            "notes",
                                                                            "open"
                                                                          ],

                                                                          AntdSingleCollapse_Helpers
                                                                        ).apply(
                                                                          null,
                                                                          eventArgs
                                                                        );
                                                                      },
                                                                    open: generateStateValueProp(
                                                                      $state,
                                                                      [
                                                                        "notes",
                                                                        "open"
                                                                      ]
                                                                    ),
                                                                    showArrow:
                                                                      false,
                                                                    size: "small"
                                                                  };
                                                                initializeCodeComponentStates(
                                                                  $state,
                                                                  [
                                                                    {
                                                                      name: "open",
                                                                      plasmicStateName:
                                                                        "notes.open"
                                                                    }
                                                                  ],

                                                                  [],
                                                                  AntdSingleCollapse_Helpers ??
                                                                    {},
                                                                  child$Props
                                                                );
                                                                return (
                                                                  <AntdSingleCollapse
                                                                    data-plasmic-name={
                                                                      "notes"
                                                                    }
                                                                    data-plasmic-override={
                                                                      overrides.notes
                                                                    }
                                                                    {...child$Props}
                                                                  >
                                                                    <Stack__
                                                                      as={"div"}
                                                                      hasGap={
                                                                        true
                                                                      }
                                                                      className={classNames(
                                                                        projectcss.all,
                                                                        sty.freeBox__agJrw
                                                                      )}
                                                                    >
                                                                      {(() => {
                                                                        const child$Props =
                                                                          {
                                                                            bordered:
                                                                              true,
                                                                            className:
                                                                              classNames(
                                                                                "__wab_instance",
                                                                                sty.notesInput
                                                                              ),
                                                                            onChange:
                                                                              async (
                                                                                ...eventArgs
                                                                              ) => {
                                                                                generateStateOnChangePropForCodeComponents(
                                                                                  $state,
                                                                                  "value",
                                                                                  [
                                                                                    "notesInput",
                                                                                    "value"
                                                                                  ],

                                                                                  AntdTextArea_Helpers
                                                                                ).apply(
                                                                                  null,
                                                                                  eventArgs
                                                                                );
                                                                              },
                                                                            placeholder:
                                                                              "Enter notes",
                                                                            value:
                                                                              generateStateValueProp(
                                                                                $state,
                                                                                [
                                                                                  "notesInput",
                                                                                  "value"
                                                                                ]
                                                                              )
                                                                          };
                                                                        initializeCodeComponentStates(
                                                                          $state,
                                                                          [
                                                                            {
                                                                              name: "value",
                                                                              plasmicStateName:
                                                                                "notesInput.value"
                                                                            }
                                                                          ],

                                                                          [],
                                                                          AntdTextArea_Helpers ??
                                                                            {},
                                                                          child$Props
                                                                        );
                                                                        return (
                                                                          <AntdTextArea
                                                                            data-plasmic-name={
                                                                              "notesInput"
                                                                            }
                                                                            data-plasmic-override={
                                                                              overrides.notesInput
                                                                            }
                                                                            {...child$Props}
                                                                          />
                                                                        );
                                                                      })()}
                                                                      <Stack__
                                                                        as={
                                                                          "div"
                                                                        }
                                                                        hasGap={
                                                                          true
                                                                        }
                                                                        className={classNames(
                                                                          projectcss.all,
                                                                          sty.freeBox___1UwqK
                                                                        )}
                                                                      >
                                                                        <AntdButton
                                                                          className={classNames(
                                                                            "__wab_instance",
                                                                            sty.button__d7KqP
                                                                          )}
                                                                        >
                                                                          <div
                                                                            className={classNames(
                                                                              projectcss.all,
                                                                              projectcss.__wab_text,
                                                                              sty.text__ojsZd
                                                                            )}
                                                                          >
                                                                            {
                                                                              "Save"
                                                                            }
                                                                          </div>
                                                                        </AntdButton>
                                                                      </Stack__>
                                                                    </Stack__>
                                                                  </AntdSingleCollapse>
                                                                );
                                                              })()}
                                                              <div
                                                                className={classNames(
                                                                  projectcss.all,
                                                                  sty.freeBox__abQpn
                                                                )}
                                                              >
                                                                {(_par =>
                                                                  !_par
                                                                    ? []
                                                                    : Array.isArray(
                                                                        _par
                                                                      )
                                                                    ? _par
                                                                    : [_par])(
                                                                  []
                                                                ).map(
                                                                  (
                                                                    __plasmic_item_0,
                                                                    __plasmic_idx_0
                                                                  ) => {
                                                                    const currentItem =
                                                                      __plasmic_item_0;
                                                                    const currentIndex =
                                                                      __plasmic_idx_0;
                                                                    return (
                                                                      <Stack__
                                                                        as={
                                                                          "div"
                                                                        }
                                                                        data-plasmic-name={
                                                                          "note"
                                                                        }
                                                                        data-plasmic-override={
                                                                          overrides.note
                                                                        }
                                                                        hasGap={
                                                                          true
                                                                        }
                                                                        className={classNames(
                                                                          projectcss.all,
                                                                          sty.note
                                                                        )}
                                                                        key={
                                                                          currentIndex
                                                                        }
                                                                      >
                                                                        <div
                                                                          className={classNames(
                                                                            projectcss.all,
                                                                            sty.freeBox__bC1Ux
                                                                          )}
                                                                        >
                                                                          <div
                                                                            className={classNames(
                                                                              projectcss.all,
                                                                              projectcss.__wab_text,
                                                                              sty.text___37Uf2
                                                                            )}
                                                                          >
                                                                            <React.Fragment>
                                                                              {(() => {
                                                                                try {
                                                                                  return currentItem.attributes.user.data.attributes.username[0].toUpperCase();
                                                                                } catch (e) {
                                                                                  if (
                                                                                    e instanceof
                                                                                      TypeError ||
                                                                                    e?.plasmicType ===
                                                                                      "PlasmicUndefinedDataError"
                                                                                  ) {
                                                                                    return "A";
                                                                                  }
                                                                                  throw e;
                                                                                }
                                                                              })()}
                                                                            </React.Fragment>
                                                                          </div>
                                                                        </div>
                                                                        <div
                                                                          data-plasmic-name={
                                                                            "main"
                                                                          }
                                                                          data-plasmic-override={
                                                                            overrides.main
                                                                          }
                                                                          className={classNames(
                                                                            projectcss.all,
                                                                            sty.main
                                                                          )}
                                                                        >
                                                                          <Stack__
                                                                            as={
                                                                              "div"
                                                                            }
                                                                            hasGap={
                                                                              true
                                                                            }
                                                                            className={classNames(
                                                                              projectcss.all,
                                                                              sty.freeBox__ss2Pm
                                                                            )}
                                                                          >
                                                                            <Stack__
                                                                              as={
                                                                                "div"
                                                                              }
                                                                              hasGap={
                                                                                true
                                                                              }
                                                                              className={classNames(
                                                                                projectcss.all,
                                                                                sty.freeBox__w5Tvk
                                                                              )}
                                                                            >
                                                                              <EnquiriesSvgIcon
                                                                                className={classNames(
                                                                                  projectcss.all,
                                                                                  sty.svg__dc4A0
                                                                                )}
                                                                                role={
                                                                                  "img"
                                                                                }
                                                                              />

                                                                              <div
                                                                                className={classNames(
                                                                                  projectcss.all,
                                                                                  projectcss.__wab_text,
                                                                                  sty.text___26DrG
                                                                                )}
                                                                              >
                                                                                <React.Fragment>
                                                                                  {(() => {
                                                                                    try {
                                                                                      return currentItem
                                                                                        .attributes
                                                                                        .user
                                                                                        .data
                                                                                        .attributes
                                                                                        .username;
                                                                                    } catch (e) {
                                                                                      if (
                                                                                        e instanceof
                                                                                          TypeError ||
                                                                                        e?.plasmicType ===
                                                                                          "PlasmicUndefinedDataError"
                                                                                      ) {
                                                                                        return "Administrator";
                                                                                      }
                                                                                      throw e;
                                                                                    }
                                                                                  })()}
                                                                                </React.Fragment>
                                                                              </div>
                                                                            </Stack__>
                                                                            <div
                                                                              className={classNames(
                                                                                projectcss.all,
                                                                                projectcss.__wab_text,
                                                                                sty.text__gYinI
                                                                              )}
                                                                            >
                                                                              <React.Fragment>
                                                                                {(() => {
                                                                                  try {
                                                                                    return (() => {
                                                                                      const now =
                                                                                        new Date();
                                                                                      const createdAt =
                                                                                        new Date(
                                                                                          currentItem.attributes.createdAt
                                                                                        );
                                                                                      const diffMs =
                                                                                        now -
                                                                                        createdAt;
                                                                                      const diffMins =
                                                                                        Math.round(
                                                                                          diffMs /
                                                                                            60000
                                                                                        );
                                                                                      const diffDays =
                                                                                        Math.floor(
                                                                                          diffMs /
                                                                                            (1000 *
                                                                                              60 *
                                                                                              60 *
                                                                                              24)
                                                                                        );
                                                                                      const diffHours =
                                                                                        Math.floor(
                                                                                          diffMins /
                                                                                            60
                                                                                        );
                                                                                      if (
                                                                                        diffMins <=
                                                                                        60
                                                                                      ) {
                                                                                        return `${diffMins} minutes ago`;
                                                                                      } else if (
                                                                                        diffHours <=
                                                                                        24
                                                                                      ) {
                                                                                        return `${diffHours} hours go`;
                                                                                      } else if (
                                                                                        diffDays <=
                                                                                        28
                                                                                      ) {
                                                                                        return `${diffDays} days ago`;
                                                                                      } else {
                                                                                        const options =
                                                                                          {
                                                                                            year: "numeric",
                                                                                            month:
                                                                                              "long",
                                                                                            day: "numeric"
                                                                                          };
                                                                                        return createdAt.toLocaleDateString(
                                                                                          undefined,
                                                                                          options
                                                                                        );
                                                                                      }
                                                                                    })();
                                                                                  } catch (e) {
                                                                                    if (
                                                                                      e instanceof
                                                                                        TypeError ||
                                                                                      e?.plasmicType ===
                                                                                        "PlasmicUndefinedDataError"
                                                                                    ) {
                                                                                      return "Time";
                                                                                    }
                                                                                    throw e;
                                                                                  }
                                                                                })()}
                                                                              </React.Fragment>
                                                                            </div>
                                                                          </Stack__>
                                                                          <div
                                                                            className={classNames(
                                                                              projectcss.all,
                                                                              sty.freeBox__jib9U
                                                                            )}
                                                                          >
                                                                            <div
                                                                              className={classNames(
                                                                                projectcss.all,
                                                                                projectcss.__wab_text,
                                                                                sty.text__pxp8I
                                                                              )}
                                                                            >
                                                                              <React.Fragment>
                                                                                {(() => {
                                                                                  try {
                                                                                    return currentItem
                                                                                      .attributes
                                                                                      .Message;
                                                                                  } catch (e) {
                                                                                    if (
                                                                                      e instanceof
                                                                                        TypeError ||
                                                                                      e?.plasmicType ===
                                                                                        "PlasmicUndefinedDataError"
                                                                                    ) {
                                                                                      return "Note";
                                                                                    }
                                                                                    throw e;
                                                                                  }
                                                                                })()}
                                                                              </React.Fragment>
                                                                            </div>
                                                                            <div
                                                                              className={classNames(
                                                                                projectcss.all,
                                                                                sty.freeBox__y2Hvl
                                                                              )}
                                                                            >
                                                                              <PlasmicLink__
                                                                                className={classNames(
                                                                                  projectcss.all,
                                                                                  projectcss.a,
                                                                                  projectcss.__wab_text,
                                                                                  sty.link__hnGVl
                                                                                )}
                                                                                href={(() => {
                                                                                  try {
                                                                                    return currentItem.attachments;
                                                                                  } catch (e) {
                                                                                    if (
                                                                                      e instanceof
                                                                                        TypeError ||
                                                                                      e?.plasmicType ===
                                                                                        "PlasmicUndefinedDataError"
                                                                                    ) {
                                                                                      return "";
                                                                                    }
                                                                                    throw e;
                                                                                  }
                                                                                })()}
                                                                                platform={
                                                                                  "react"
                                                                                }
                                                                                target={
                                                                                  "_blank"
                                                                                }
                                                                              >
                                                                                {
                                                                                  "Attachment"
                                                                                }
                                                                              </PlasmicLink__>
                                                                            </div>
                                                                          </div>
                                                                        </div>
                                                                      </Stack__>
                                                                    );
                                                                  }
                                                                )}
                                                              </div>
                                                            </Stack__>
                                                          </Stack__>
                                                        </TabContent>
                                                      </div>
                                                    )}
                                                  </DataCtxReader__>
                                                </TabsContainer>
                                              </div>
                                            </div>
                                          </div>
                                        </Stack__>
                                      </TabContent>
                                    </div>
                                  </Stack__>
                                ) : null}
                              </TabContent>
                            </TabContent>
                            <TabContent
                              data-plasmic-name={"forms"}
                              data-plasmic-override={overrides.forms}
                              className={classNames(
                                "__wab_instance",
                                sty.forms
                              )}
                              tabKey={"forms"}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ilFdq
                                )}
                              >
                                <div
                                  data-plasmic-name={"header9"}
                                  data-plasmic-override={overrides.header9}
                                  className={classNames(
                                    projectcss.all,
                                    sty.header9
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__sSxOf
                                    )}
                                  >
                                    {"Forms"}
                                  </div>
                                </div>
                                <TabsContainer
                                  data-plasmic-name={"formLIstNewForm"}
                                  data-plasmic-override={
                                    overrides.formLIstNewForm
                                  }
                                  initialKey={"formlist"}
                                  previewAll={false}
                                  previewKey={"formlist"}
                                >
                                  <DataCtxReader__>
                                    {$ctx => (
                                      <React.Fragment>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox___8X9La
                                          )}
                                        >
                                          <TabContent
                                            data-plasmic-name={"formList"}
                                            data-plasmic-override={
                                              overrides.formList
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.formList
                                            )}
                                            tabKey={"formlist"}
                                          >
                                            <Stack__
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__mLdJw
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__eykey
                                                )}
                                              >
                                                <TabButton
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.tabButton___0PGuR
                                                  )}
                                                  tabKey={"newform"}
                                                >
                                                  <ButtonContainer
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.buttonContainer__wfQjN
                                                    )}
                                                  >
                                                    <AntdButton
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.button__k570N
                                                      )}
                                                      type={"ghost"}
                                                    >
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          projectcss.__wab_text,
                                                          sty.text___352Uw
                                                        )}
                                                      >
                                                        {"Add  Form"}
                                                      </div>
                                                    </AntdButton>
                                                  </ButtonContainer>
                                                </TabButton>
                                                <Stack__
                                                  as={"div"}
                                                  hasGap={true}
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox__kIGf9
                                                  )}
                                                >
                                                  <Select
                                                    data-plasmic-name={
                                                      "deleteForm2"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.deleteForm2
                                                    }
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.deleteForm2
                                                    )}
                                                    color={"clear"}
                                                    onChange={async (
                                                      ...eventArgs
                                                    ) => {
                                                      ((...eventArgs) => {
                                                        generateStateOnChangeProp(
                                                          $state,
                                                          [
                                                            "deleteForm2",
                                                            "value"
                                                          ]
                                                        )(eventArgs[0]);
                                                      }).apply(null, eventArgs);
                                                      if (
                                                        eventArgs.length > 1 &&
                                                        eventArgs[1] &&
                                                        eventArgs[1]
                                                          ._plasmic_state_init_
                                                      ) {
                                                        return;
                                                      }
                                                    }}
                                                    options={(() => {
                                                      try {
                                                        return $state.formsData.map(
                                                          form => {
                                                            return {
                                                              label:
                                                                form.attributes
                                                                  .Title,
                                                              value: form.id
                                                            };
                                                          }
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return [
                                                            {
                                                              value: "option1",
                                                              label: "Option 1"
                                                            },
                                                            {
                                                              value: "option2",
                                                              label: "Option 2"
                                                            }
                                                          ];
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    value={generateStateValueProp(
                                                      $state,
                                                      ["deleteForm2", "value"]
                                                    )}
                                                  />

                                                  <ButtonContainer
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.buttonContainer__gdvW1
                                                    )}
                                                  >
                                                    <AntdButton
                                                      data-plasmic-name={
                                                        "deleteForm3"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.deleteForm3
                                                      }
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.deleteForm3
                                                      )}
                                                      disabled={(() => {
                                                        try {
                                                          return !$state
                                                            .deleteForm2.value;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                      onClick={async () => {
                                                        const $steps = {};
                                                        $steps["graphqlQuery"] =
                                                          true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    dataOp: {
                                                                      sourceId:
                                                                        "bvg9JqrXbdUtvMXZbC26cd",
                                                                      opId: "2a6037ee-fddb-48b8-a394-8a42cc337c0d",
                                                                      userArgs:
                                                                        {
                                                                          variables:
                                                                            [
                                                                              $state
                                                                                .deleteForm2
                                                                                .value
                                                                            ]
                                                                        },
                                                                      cacheKey:
                                                                        null,
                                                                      invalidatedKeys:
                                                                        null,
                                                                      roleId:
                                                                        null
                                                                    }
                                                                  };
                                                                return (async ({
                                                                  dataOp,
                                                                  continueOnError
                                                                }) => {
                                                                  try {
                                                                    const response =
                                                                      await executePlasmicDataOp(
                                                                        dataOp,
                                                                        {
                                                                          userAuthToken:
                                                                            dataSourcesCtx?.userAuthToken,
                                                                          user: dataSourcesCtx?.user
                                                                        }
                                                                      );
                                                                    await plasmicInvalidate(
                                                                      dataOp.invalidatedKeys
                                                                    );
                                                                    return response;
                                                                  } catch (e) {
                                                                    if (
                                                                      !continueOnError
                                                                    ) {
                                                                      throw e;
                                                                    }
                                                                    return e;
                                                                  }
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                        if (
                                                          $steps[
                                                            "graphqlQuery"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "graphqlQuery"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "graphqlQuery"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "graphqlQuery"
                                                          ] = await $steps[
                                                            "graphqlQuery"
                                                          ];
                                                        }
                                                        $steps[
                                                          "invokeGlobalAction"
                                                        ] = true
                                                          ? (() => {
                                                              const actionArgs =
                                                                {
                                                                  args: [
                                                                    "success",
                                                                    "Form deleted!"
                                                                  ]
                                                                };
                                                              return $globalActions[
                                                                "plasmic-antd5-config-provider.showNotification"
                                                              ]?.apply(null, [
                                                                ...actionArgs.args
                                                              ]);
                                                            })()
                                                          : undefined;
                                                        if (
                                                          $steps[
                                                            "invokeGlobalAction"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "invokeGlobalAction"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "invokeGlobalAction"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "invokeGlobalAction"
                                                          ] = await $steps[
                                                            "invokeGlobalAction"
                                                          ];
                                                        }
                                                        $steps[
                                                          "updateDeleteForm2Value"
                                                        ] = true
                                                          ? (() => {
                                                              const actionArgs =
                                                                {
                                                                  variable: {
                                                                    objRoot:
                                                                      $state,
                                                                    variablePath:
                                                                      [
                                                                        "deleteForm2",
                                                                        "value"
                                                                      ]
                                                                  },
                                                                  operation: 1
                                                                };
                                                              return (({
                                                                variable,
                                                                value,
                                                                startIndex,
                                                                deleteCount
                                                              }) => {
                                                                if (!variable) {
                                                                  return;
                                                                }
                                                                const {
                                                                  objRoot,
                                                                  variablePath
                                                                } = variable;
                                                                $stateSet(
                                                                  objRoot,
                                                                  variablePath,
                                                                  undefined
                                                                );
                                                                return undefined;
                                                              })?.apply(null, [
                                                                actionArgs
                                                              ]);
                                                            })()
                                                          : undefined;
                                                        if (
                                                          $steps[
                                                            "updateDeleteForm2Value"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "updateDeleteForm2Value"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "updateDeleteForm2Value"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "updateDeleteForm2Value"
                                                          ] = await $steps[
                                                            "updateDeleteForm2Value"
                                                          ];
                                                        }
                                                        $steps["refreshData"] =
                                                          true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    queryInvalidation:
                                                                      [
                                                                        "6edebaac-2712-439e-b8d3-755cfa55bd3f"
                                                                      ]
                                                                  };
                                                                return (async ({
                                                                  queryInvalidation
                                                                }) => {
                                                                  if (
                                                                    !queryInvalidation
                                                                  ) {
                                                                    return;
                                                                  }
                                                                  await plasmicInvalidate(
                                                                    queryInvalidation
                                                                  );
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                        if (
                                                          $steps[
                                                            "refreshData"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "refreshData"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "refreshData"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "refreshData"
                                                          ] = await $steps[
                                                            "refreshData"
                                                          ];
                                                        }
                                                      }}
                                                      type={"ghost"}
                                                    >
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          projectcss.__wab_text,
                                                          sty.text__lKan8
                                                        )}
                                                      >
                                                        {"Delete Form"}
                                                      </div>
                                                    </AntdButton>
                                                  </ButtonContainer>
                                                </Stack__>
                                              </div>
                                              {(() => {
                                                const child$Props = {
                                                  className: classNames(
                                                    "__wab_instance",
                                                    sty.table
                                                  ),
                                                  data: (() => {
                                                    try {
                                                      return $state.formsData;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })(),
                                                  fields: (() => {
                                                    const __composite = [
                                                      {
                                                        key: "id",
                                                        fieldId: "id",
                                                        title: null
                                                      },
                                                      {
                                                        key: "attributes",
                                                        fieldId: "attributes",
                                                        expr: null,
                                                        title: null
                                                      },
                                                      {
                                                        expr: null,
                                                        title: null
                                                      },
                                                      {
                                                        title: null,
                                                        expr: null
                                                      }
                                                    ];

                                                    __composite["0"]["title"] =
                                                      "ID";
                                                    __composite["1"]["title"] =
                                                      "Form";
                                                    __composite["2"]["title"] =
                                                      "Date";
                                                    __composite["3"]["title"] =
                                                      "Link";
                                                    return __composite;
                                                  })(),
                                                  hideColumnPicker: true,
                                                  hideDensity: true,
                                                  hideExports: true,
                                                  hideSearch: false,
                                                  onRowClick: async (
                                                    rowKey,
                                                    row,
                                                    event
                                                  ) => {
                                                    const $steps = {};
                                                    $steps["runCode"] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            customFunction:
                                                              async () => {
                                                                return (() => {
                                                                  const base =
                                                                    "https://weddingvows.plasmic.run/form/";
                                                                  return navigator.clipboard.writeText(
                                                                    base +
                                                                      row.id
                                                                  );
                                                                })();
                                                              }
                                                          };
                                                          return (({
                                                            customFunction
                                                          }) => {
                                                            return customFunction();
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps["runCode"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "runCode"
                                                      ] === "object" &&
                                                      typeof $steps["runCode"]
                                                        .then === "function"
                                                    ) {
                                                      $steps["runCode"] =
                                                        await $steps["runCode"];
                                                    }
                                                    $steps[
                                                      "invokeGlobalAction"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            args: [
                                                              "success",
                                                              "Link copied to clipboard!"
                                                            ]
                                                          };
                                                          return $globalActions[
                                                            "plasmic-antd5-config-provider.showNotification"
                                                          ]?.apply(null, [
                                                            ...actionArgs.args
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "invokeGlobalAction"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "invokeGlobalAction"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "invokeGlobalAction"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "invokeGlobalAction"
                                                      ] = await $steps[
                                                        "invokeGlobalAction"
                                                      ];
                                                    }
                                                  },
                                                  onRowSelectionChanged: async (
                                                    ...eventArgs
                                                  ) => {
                                                    generateStateOnChangePropForCodeComponents(
                                                      $state,
                                                      "selectedRowKey",
                                                      [
                                                        "table",
                                                        "selectedRowKey"
                                                      ],

                                                      RichTable_Helpers
                                                    ).apply(null, eventArgs);
                                                    generateStateOnChangePropForCodeComponents(
                                                      $state,
                                                      "selectedRow",
                                                      ["table", "selectedRow"],
                                                      RichTable_Helpers
                                                    ).apply(null, eventArgs);
                                                    generateStateOnChangePropForCodeComponents(
                                                      $state,
                                                      "selectedRows",
                                                      ["table", "selectedRows"],
                                                      RichTable_Helpers
                                                    ).apply(null, eventArgs);
                                                    generateStateOnChangePropForCodeComponents(
                                                      $state,
                                                      "selectedRowKeys",
                                                      [
                                                        "table",
                                                        "selectedRowKeys"
                                                      ],

                                                      RichTable_Helpers
                                                    ).apply(null, eventArgs);
                                                  },
                                                  scopeClassName:
                                                    sty["table__instance"],
                                                  selectedRowKey:
                                                    generateStateValueProp(
                                                      $state,
                                                      [
                                                        "table",
                                                        "selectedRowKey"
                                                      ]
                                                    ),
                                                  selectedRowKeys:
                                                    generateStateValueProp(
                                                      $state,
                                                      [
                                                        "table",
                                                        "selectedRowKeys"
                                                      ]
                                                    ),
                                                  themeResetClassName:
                                                    classNames(
                                                      projectcss.root_reset,
                                                      projectcss.root_reset_tags,
                                                      projectcss.plasmic_default_styles,
                                                      projectcss.plasmic_mixins,
                                                      projectcss.plasmic_tokens,
                                                      plasmic_antd_5_hostless_css.plasmic_tokens,
                                                      plasmic_plasmic_rich_components_css.plasmic_tokens
                                                    )
                                                };
                                                initializeCodeComponentStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "selectedRowKey",
                                                      plasmicStateName:
                                                        "table.selectedRowKey"
                                                    },
                                                    {
                                                      name: "selectedRow",
                                                      plasmicStateName:
                                                        "table.selectedRow"
                                                    },
                                                    {
                                                      name: "selectedRows",
                                                      plasmicStateName:
                                                        "table.selectedRows"
                                                    },
                                                    {
                                                      name: "selectedRowKeys",
                                                      plasmicStateName:
                                                        "table.selectedRowKeys"
                                                    }
                                                  ],

                                                  [],
                                                  RichTable_Helpers ?? {},
                                                  child$Props
                                                );
                                                return (
                                                  <RichTable
                                                    data-plasmic-name={"table"}
                                                    data-plasmic-override={
                                                      overrides.table
                                                    }
                                                    {...child$Props}
                                                  />
                                                );
                                              })()}
                                            </Stack__>
                                          </TabContent>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__hd2Uf
                                          )}
                                        >
                                          <TabContent
                                            data-plasmic-name={"newForm"}
                                            data-plasmic-override={
                                              overrides.newForm
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.newForm
                                            )}
                                            tabKey={"newform"}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__jFvvc
                                              )}
                                            >
                                              <TabButton
                                                data-plasmic-name={"back2"}
                                                data-plasmic-override={
                                                  overrides.back2
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.back2
                                                )}
                                                tabKey={"formlist"}
                                              >
                                                <AntdButton
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.button___2Z6D
                                                  )}
                                                  danger={true}
                                                  size={"small"}
                                                  type={"primary"}
                                                >
                                                  <BackSvgrepoComSvgIcon
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.svg___4HgMf
                                                    )}
                                                    role={"img"}
                                                  />
                                                </AntdButton>
                                              </TabButton>
                                              <Stack__
                                                as={"div"}
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__ioVzm
                                                )}
                                              >
                                                {(() => {
                                                  const child$Props = {
                                                    className: classNames(
                                                      "__wab_instance",
                                                      sty.formTitle
                                                    ),
                                                    onChange: async (
                                                      ...eventArgs
                                                    ) => {
                                                      generateStateOnChangePropForCodeComponents(
                                                        $state,
                                                        "value",
                                                        ["formTitle", "value"],
                                                        AntdInput_Helpers
                                                      ).apply(null, eventArgs);
                                                    },
                                                    placeholder: "Form title",
                                                    value:
                                                      generateStateValueProp(
                                                        $state,
                                                        ["formTitle", "value"]
                                                      )
                                                  };
                                                  initializeCodeComponentStates(
                                                    $state,
                                                    [
                                                      {
                                                        name: "value",
                                                        plasmicStateName:
                                                          "formTitle.value"
                                                      }
                                                    ],

                                                    [],
                                                    AntdInput_Helpers ?? {},
                                                    child$Props
                                                  );
                                                  return (
                                                    <AntdInput
                                                      data-plasmic-name={
                                                        "formTitle"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.formTitle
                                                      }
                                                      {...child$Props}
                                                    />
                                                  );
                                                })()}
                                                <EnquiryFormBuilder2
                                                  data-plasmic-name={
                                                    "enquiryFormBuilder2"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.enquiryFormBuilder2
                                                  }
                                                  building={true}
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.enquiryFormBuilder2
                                                  )}
                                                  currentEnquiry={(() => {
                                                    try {
                                                      return $state.currentEnquiry;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return {};
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  currentUser={"User"}
                                                  enquiryForm={(() => {
                                                    try {
                                                      return $state.enquiryForm;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return [];
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                />

                                                <Stack__
                                                  as={"div"}
                                                  hasGap={true}
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox___0K9Cw
                                                  )}
                                                >
                                                  {(() => {
                                                    try {
                                                      return $state.questionType;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return true;
                                                      }
                                                      throw e;
                                                    }
                                                  })() ? (
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.freeBox__bvuUd
                                                      )}
                                                    >
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          projectcss.__wab_text,
                                                          sty.text__sG5Om
                                                        )}
                                                      >
                                                        {""}
                                                      </div>
                                                      <Stack__
                                                        as={"div"}
                                                        hasGap={true}
                                                        className={classNames(
                                                          projectcss.all,
                                                          sty.freeBox__sxYaz
                                                        )}
                                                      >
                                                        <TextInput
                                                          data-plasmic-name={
                                                            "newField"
                                                          }
                                                          data-plasmic-override={
                                                            overrides.newField
                                                          }
                                                          className={classNames(
                                                            "__wab_instance",
                                                            sty.newField
                                                          )}
                                                          onChange={async (
                                                            ...eventArgs
                                                          ) => {
                                                            ((...eventArgs) => {
                                                              generateStateOnChangeProp(
                                                                $state,
                                                                [
                                                                  "newField",
                                                                  "value"
                                                                ]
                                                              )(
                                                                (e =>
                                                                  e.target
                                                                    ?.value).apply(
                                                                  null,
                                                                  eventArgs
                                                                )
                                                              );
                                                            }).apply(
                                                              null,
                                                              eventArgs
                                                            );
                                                            if (
                                                              eventArgs.length >
                                                                1 &&
                                                              eventArgs[1] &&
                                                              eventArgs[1]
                                                                ._plasmic_state_init_
                                                            ) {
                                                              return;
                                                            }
                                                          }}
                                                          placeholder={
                                                            "Type here..."
                                                          }
                                                          startIcon={
                                                            <SearchSvgIcon
                                                              className={classNames(
                                                                projectcss.all,
                                                                sty.svg__yJov4
                                                              )}
                                                              role={"img"}
                                                            />
                                                          }
                                                          value={
                                                            generateStateValueProp(
                                                              $state,
                                                              [
                                                                "newField",
                                                                "value"
                                                              ]
                                                            ) ?? ""
                                                          }
                                                        />

                                                        <AntdButton
                                                          className={classNames(
                                                            "__wab_instance",
                                                            sty.button___6Hoot
                                                          )}
                                                          danger={true}
                                                          shape={"default"}
                                                          type={"primary"}
                                                        >
                                                          <div
                                                            className={classNames(
                                                              projectcss.all,
                                                              projectcss.__wab_text,
                                                              sty.text__aIvzh
                                                            )}
                                                          >
                                                            {"Add"}
                                                          </div>
                                                        </AntdButton>
                                                      </Stack__>
                                                    </div>
                                                  ) : null}
                                                  <Stack__
                                                    as={"div"}
                                                    hasGap={true}
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox__ifCwn
                                                    )}
                                                  >
                                                    <AntdDropdown
                                                      data-plasmic-name={
                                                        "dropdown"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.dropdown
                                                      }
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.dropdown
                                                      )}
                                                      dropdownMenuScopeClassName={
                                                        sty[
                                                          "dropdown__dropdownMenu"
                                                        ]
                                                      }
                                                      fakeOpen={false}
                                                      menuItems={() => (
                                                        <React.Fragment>
                                                          <AntdMenuItem
                                                            className={classNames(
                                                              "__wab_instance",
                                                              sty.menuItem__rHaHo
                                                            )}
                                                            key={"menu-item-1"}
                                                          >
                                                            <div
                                                              className={classNames(
                                                                projectcss.all,
                                                                projectcss.__wab_text,
                                                                sty.text___1Cvfx
                                                              )}
                                                            >
                                                              {"Type 1"}
                                                            </div>
                                                            <Stack__
                                                              as={"div"}
                                                              hasGap={true}
                                                              className={classNames(
                                                                projectcss.all,
                                                                sty.freeBox__dx2YJ
                                                              )}
                                                            >
                                                              <div
                                                                className={classNames(
                                                                  projectcss.all,
                                                                  projectcss.__wab_text,
                                                                  sty.text__onFgt
                                                                )}
                                                              >
                                                                {"Question"}
                                                              </div>
                                                              <input
                                                                data-plasmic-name={
                                                                  "textarea"
                                                                }
                                                                data-plasmic-override={
                                                                  overrides.textarea
                                                                }
                                                                className={classNames(
                                                                  projectcss.all,
                                                                  projectcss.input,
                                                                  sty.textarea
                                                                )}
                                                                disabled={true}
                                                                onChange={async (
                                                                  ...eventArgs
                                                                ) => {
                                                                  (e => {
                                                                    generateStateOnChangeProp(
                                                                      $state,
                                                                      [
                                                                        "textarea",
                                                                        "value"
                                                                      ]
                                                                    )(
                                                                      e.target
                                                                        .value
                                                                    );
                                                                  }).apply(
                                                                    null,
                                                                    eventArgs
                                                                  );
                                                                }}
                                                                ref={ref => {
                                                                  $refs[
                                                                    "textarea"
                                                                  ] = ref;
                                                                }}
                                                                type={"text"}
                                                                value={
                                                                  generateStateValueProp(
                                                                    $state,
                                                                    [
                                                                      "textarea",
                                                                      "value"
                                                                    ]
                                                                  ) ?? ""
                                                                }
                                                              />
                                                            </Stack__>
                                                          </AntdMenuItem>
                                                          <AntdMenuItem
                                                            className={classNames(
                                                              "__wab_instance",
                                                              sty.menuItem__akXrl
                                                            )}
                                                            key={"menu-item-2"}
                                                          >
                                                            <div
                                                              className={classNames(
                                                                projectcss.all,
                                                                projectcss.__wab_text,
                                                                sty.text__fpTW
                                                              )}
                                                            >
                                                              {"Type 2"}
                                                            </div>
                                                            <Stack__
                                                              as={"div"}
                                                              hasGap={true}
                                                              className={classNames(
                                                                projectcss.all,
                                                                sty.freeBox__eFlH
                                                              )}
                                                            >
                                                              <div
                                                                className={classNames(
                                                                  projectcss.all,
                                                                  projectcss.__wab_text,
                                                                  sty.text__uVeEc
                                                                )}
                                                              >
                                                                {"Question"}
                                                              </div>
                                                              {(() => {
                                                                const child$Props =
                                                                  {
                                                                    className:
                                                                      classNames(
                                                                        "__wab_instance",
                                                                        sty.dateTimePicker2
                                                                      ),
                                                                    disabled:
                                                                      true,
                                                                    onChange:
                                                                      async (
                                                                        ...eventArgs
                                                                      ) => {
                                                                        generateStateOnChangePropForCodeComponents(
                                                                          $state,
                                                                          "value",
                                                                          [
                                                                            "dateTimePicker2",
                                                                            "value"
                                                                          ],

                                                                          AntdDatePicker_Helpers
                                                                        ).apply(
                                                                          null,
                                                                          eventArgs
                                                                        );
                                                                      },
                                                                    popupScopeClassName:
                                                                      sty[
                                                                        "dateTimePicker2__datePickerPopup"
                                                                      ],

                                                                    value:
                                                                      generateStateValueProp(
                                                                        $state,
                                                                        [
                                                                          "dateTimePicker2",
                                                                          "value"
                                                                        ]
                                                                      )
                                                                  };
                                                                initializeCodeComponentStates(
                                                                  $state,
                                                                  [
                                                                    {
                                                                      name: "value",
                                                                      plasmicStateName:
                                                                        "dateTimePicker2.value"
                                                                    }
                                                                  ],

                                                                  [],
                                                                  AntdDatePicker_Helpers ??
                                                                    {},
                                                                  child$Props
                                                                );
                                                                return (
                                                                  <AntdDatePicker
                                                                    data-plasmic-name={
                                                                      "dateTimePicker2"
                                                                    }
                                                                    data-plasmic-override={
                                                                      overrides.dateTimePicker2
                                                                    }
                                                                    {...child$Props}
                                                                  />
                                                                );
                                                              })()}
                                                            </Stack__>
                                                          </AntdMenuItem>
                                                          <AntdMenuItem
                                                            className={classNames(
                                                              "__wab_instance",
                                                              sty.menuItem__k4PcB
                                                            )}
                                                            key={"menu-item-3"}
                                                          >
                                                            <div
                                                              className={classNames(
                                                                projectcss.all,
                                                                projectcss.__wab_text,
                                                                sty.text__aZMkr
                                                              )}
                                                            >
                                                              {"Type 3"}
                                                            </div>
                                                            <div
                                                              className={classNames(
                                                                projectcss.all,
                                                                sty.freeBox___5Wv0Z
                                                              )}
                                                            >
                                                              <div
                                                                className={classNames(
                                                                  projectcss.all,
                                                                  projectcss.__wab_text,
                                                                  sty.text__v89YQ
                                                                )}
                                                              >
                                                                {"Question"}
                                                              </div>
                                                              <AntdRadioGroup
                                                                data-plasmic-name={
                                                                  "radioGroup5"
                                                                }
                                                                data-plasmic-override={
                                                                  overrides.radioGroup5
                                                                }
                                                                className={classNames(
                                                                  "__wab_instance",
                                                                  sty.radioGroup5
                                                                )}
                                                                disabled={true}
                                                                onChange={async (
                                                                  ...eventArgs
                                                                ) => {
                                                                  generateStateOnChangeProp(
                                                                    $state,
                                                                    [
                                                                      "radioGroup5",
                                                                      "value"
                                                                    ]
                                                                  ).apply(
                                                                    null,
                                                                    eventArgs
                                                                  );
                                                                }}
                                                                options={(() => {
                                                                  const __composite =
                                                                    [
                                                                      {
                                                                        value:
                                                                          null,
                                                                        label:
                                                                          null
                                                                      },
                                                                      {
                                                                        value:
                                                                          null,
                                                                        label:
                                                                          null
                                                                      }
                                                                    ];

                                                                  __composite[
                                                                    "0"
                                                                  ]["value"] =
                                                                    "yes";
                                                                  __composite[
                                                                    "0"
                                                                  ]["label"] =
                                                                    "Yes";
                                                                  __composite[
                                                                    "1"
                                                                  ]["value"] =
                                                                    "no";
                                                                  __composite[
                                                                    "1"
                                                                  ]["label"] =
                                                                    "No";
                                                                  return __composite;
                                                                })()}
                                                                value={generateStateValueProp(
                                                                  $state,
                                                                  [
                                                                    "radioGroup5",
                                                                    "value"
                                                                  ]
                                                                )}
                                                              >
                                                                <AntdRadio
                                                                  className={classNames(
                                                                    "__wab_instance",
                                                                    sty.radio__e8U7P
                                                                  )}
                                                                  value={"op1"}
                                                                >
                                                                  <div
                                                                    className={classNames(
                                                                      projectcss.all,
                                                                      projectcss.__wab_text,
                                                                      sty.text__a3Ux9
                                                                    )}
                                                                  >
                                                                    {"Option 1"}
                                                                  </div>
                                                                </AntdRadio>
                                                                <AntdRadio
                                                                  className={classNames(
                                                                    "__wab_instance",
                                                                    sty.radio___5Bv9X
                                                                  )}
                                                                  value={"op2"}
                                                                >
                                                                  <div
                                                                    className={classNames(
                                                                      projectcss.all,
                                                                      projectcss.__wab_text,
                                                                      sty.text__u4FKs
                                                                    )}
                                                                  >
                                                                    {"Option 2"}
                                                                  </div>
                                                                </AntdRadio>
                                                              </AntdRadioGroup>
                                                              {(() => {
                                                                const child$Props =
                                                                  {
                                                                    className:
                                                                      classNames(
                                                                        "__wab_instance",
                                                                        sty.dateTimePicker3
                                                                      ),
                                                                    disabled:
                                                                      true,
                                                                    onChange:
                                                                      async (
                                                                        ...eventArgs
                                                                      ) => {
                                                                        generateStateOnChangePropForCodeComponents(
                                                                          $state,
                                                                          "value",
                                                                          [
                                                                            "dateTimePicker3",
                                                                            "value"
                                                                          ],

                                                                          AntdDatePicker_Helpers
                                                                        ).apply(
                                                                          null,
                                                                          eventArgs
                                                                        );
                                                                      },
                                                                    popupScopeClassName:
                                                                      sty[
                                                                        "dateTimePicker3__datePickerPopup"
                                                                      ],

                                                                    value:
                                                                      generateStateValueProp(
                                                                        $state,
                                                                        [
                                                                          "dateTimePicker3",
                                                                          "value"
                                                                        ]
                                                                      )
                                                                  };
                                                                initializeCodeComponentStates(
                                                                  $state,
                                                                  [
                                                                    {
                                                                      name: "value",
                                                                      plasmicStateName:
                                                                        "dateTimePicker3.value"
                                                                    }
                                                                  ],

                                                                  [],
                                                                  AntdDatePicker_Helpers ??
                                                                    {},
                                                                  child$Props
                                                                );
                                                                return (
                                                                  <AntdDatePicker
                                                                    data-plasmic-name={
                                                                      "dateTimePicker3"
                                                                    }
                                                                    data-plasmic-override={
                                                                      overrides.dateTimePicker3
                                                                    }
                                                                    {...child$Props}
                                                                  />
                                                                );
                                                              })()}
                                                            </div>
                                                          </AntdMenuItem>
                                                        </React.Fragment>
                                                      )}
                                                      menuItemsJson={[
                                                        {
                                                          type: "item",
                                                          value: "action1",
                                                          label: "Action 1"
                                                        },
                                                        {
                                                          type: "item",
                                                          value: "action2",
                                                          label: "Action 2"
                                                        }
                                                      ]}
                                                      onAction={async key => {
                                                        const $steps = {};
                                                        $steps[
                                                          "updateShowQuestion"
                                                        ] = true
                                                          ? (() => {
                                                              const actionArgs =
                                                                {
                                                                  variable: {
                                                                    objRoot:
                                                                      $state,
                                                                    variablePath:
                                                                      [
                                                                        "showQuestion"
                                                                      ]
                                                                  },
                                                                  operation: 0
                                                                };
                                                              return (({
                                                                variable,
                                                                value,
                                                                startIndex,
                                                                deleteCount
                                                              }) => {
                                                                if (!variable) {
                                                                  return;
                                                                }
                                                                const {
                                                                  objRoot,
                                                                  variablePath
                                                                } = variable;
                                                                $stateSet(
                                                                  objRoot,
                                                                  variablePath,
                                                                  value
                                                                );
                                                                return value;
                                                              })?.apply(null, [
                                                                actionArgs
                                                              ]);
                                                            })()
                                                          : undefined;
                                                        if (
                                                          $steps[
                                                            "updateShowQuestion"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "updateShowQuestion"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "updateShowQuestion"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "updateShowQuestion"
                                                          ] = await $steps[
                                                            "updateShowQuestion"
                                                          ];
                                                        }
                                                      }}
                                                      placement={"topCenter"}
                                                      useMenuItemsSlot={true}
                                                    >
                                                      <Button2
                                                        className={classNames(
                                                          "__wab_instance",
                                                          sty.button2__ggmwv
                                                        )}
                                                        color={"red"}
                                                      >
                                                        <div
                                                          className={classNames(
                                                            projectcss.all,
                                                            projectcss.__wab_text,
                                                            sty.text__wMaH5
                                                          )}
                                                        >
                                                          {
                                                            "Add new questionaire"
                                                          }
                                                        </div>
                                                      </Button2>
                                                    </AntdDropdown>
                                                    <AntdModal
                                                      data-plasmic-name={
                                                        "modal"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.modal
                                                      }
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.modal
                                                      )}
                                                      defaultStylesClassName={classNames(
                                                        projectcss.root_reset,
                                                        projectcss.plasmic_default_styles,
                                                        projectcss.plasmic_mixins,
                                                        projectcss.plasmic_tokens,
                                                        plasmic_antd_5_hostless_css.plasmic_tokens,
                                                        plasmic_plasmic_rich_components_css.plasmic_tokens
                                                      )}
                                                      modalScopeClassName={
                                                        sty["modal__modal"]
                                                      }
                                                      onOpenChange={async (
                                                        ...eventArgs
                                                      ) => {
                                                        generateStateOnChangeProp(
                                                          $state,
                                                          ["modal", "open"]
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );
                                                      }}
                                                      open={generateStateValueProp(
                                                        $state,
                                                        ["modal", "open"]
                                                      )}
                                                      title={
                                                        <div
                                                          className={classNames(
                                                            projectcss.all,
                                                            projectcss.__wab_text,
                                                            sty.text__rIbG
                                                          )}
                                                        >
                                                          {"Are you finished?"}
                                                        </div>
                                                      }
                                                      trigger={
                                                        <Button2
                                                          className={classNames(
                                                            "__wab_instance",
                                                            sty.button2__afWwe
                                                          )}
                                                          color={"red"}
                                                          isDisabled={(() => {
                                                            try {
                                                              return !$state
                                                                .formTitle
                                                                .value;
                                                            } catch (e) {
                                                              if (
                                                                e instanceof
                                                                  TypeError ||
                                                                e?.plasmicType ===
                                                                  "PlasmicUndefinedDataError"
                                                              ) {
                                                                return {
                                                                  uid: 3020778,
                                                                  variants: []
                                                                };
                                                              }
                                                              throw e;
                                                            }
                                                          })()}
                                                        >
                                                          <div
                                                            className={classNames(
                                                              projectcss.all,
                                                              projectcss.__wab_text,
                                                              sty.text___56JzJ
                                                            )}
                                                          >
                                                            {"Save Form"}
                                                          </div>
                                                        </Button2>
                                                      }
                                                    >
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          sty.freeBox__eppdP
                                                        )}
                                                      >
                                                        <div
                                                          className={classNames(
                                                            projectcss.all,
                                                            projectcss.__wab_text,
                                                            sty.text__lApI2
                                                          )}
                                                        >
                                                          {
                                                            "Add new enquiry form?"
                                                          }
                                                        </div>
                                                      </div>
                                                    </AntdModal>
                                                  </Stack__>
                                                </Stack__>
                                              </Stack__>
                                            </div>
                                          </TabContent>
                                        </div>
                                      </React.Fragment>
                                    )}
                                  </DataCtxReader__>
                                </TabsContainer>
                              </Stack__>
                            </TabContent>
                            <TabContent
                              data-plasmic-name={"reviews"}
                              data-plasmic-override={overrides.reviews}
                              className={classNames(
                                "__wab_instance",
                                sty.reviews
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__mrbqo
                                )}
                              >
                                <div
                                  data-plasmic-name={"header8"}
                                  data-plasmic-override={overrides.header8}
                                  className={classNames(
                                    projectcss.all,
                                    sty.header8
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___01H9R
                                    )}
                                  >
                                    {"Reviews"}
                                  </div>
                                  <AntdSelect
                                    data-plasmic-name={"select"}
                                    data-plasmic-override={overrides.select}
                                    bordered={false}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.select
                                    )}
                                    defaultStylesClassName={classNames(
                                      projectcss.root_reset,
                                      projectcss.plasmic_default_styles,
                                      projectcss.plasmic_mixins,
                                      projectcss.plasmic_tokens,
                                      plasmic_antd_5_hostless_css.plasmic_tokens,
                                      plasmic_plasmic_rich_components_css.plasmic_tokens
                                    )}
                                    defaultValue={"all"}
                                    onChange={async (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "select",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    options={(() => {
                                      const __composite = [
                                        {
                                          value: null,
                                          label: null,
                                          type: "option"
                                        }
                                      ];

                                      __composite["0"]["value"] = "all";
                                      __composite["0"]["label"] = "All Reviews";
                                      return __composite;
                                    })()}
                                    placeholder={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__ijHeQ
                                        )}
                                      >
                                        {"Select..."}
                                      </div>
                                    }
                                    popupScopeClassName={sty["select__popup"]}
                                    value={generateStateValueProp($state, [
                                      "select",
                                      "value"
                                    ])}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__tjvPh
                                  )}
                                >
                                  {(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return $queries.reviews;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                    const currentItem = __plasmic_item_0;
                                    const currentIndex = __plasmic_idx_0;
                                    return (
                                      <Review
                                        className={classNames(
                                          "__wab_instance",
                                          sty.review__qmpJv
                                        )}
                                        commnets={(() => {
                                          try {
                                            return currentItem.attributes
                                              .comment;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        createdAt={(() => {
                                          try {
                                            return currentItem.attributes
                                              .createdAt;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "2023-10-12T09:32:00.000Z";
                                            }
                                            throw e;
                                          }
                                        })()}
                                        key={currentIndex}
                                        likes={(() => {
                                          try {
                                            return {
                                              likes:
                                                currentItem.attributes.likes
                                                  .data
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return { likes: ["1", "2", "3"] };
                                            }
                                            throw e;
                                          }
                                        })()}
                                        rating={(() => {
                                          try {
                                            return (() => {
                                              const rating =
                                                currentItem.attributes.rating;
                                              const values =
                                                Object.values(rating);
                                              const sum = values.reduce(
                                                (acc, curr) => acc + curr,
                                                0
                                              );
                                              const average =
                                                sum / values.length;
                                              return average;
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return 0;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        replies={(() => {
                                          try {
                                            return {
                                              replies:
                                                currentItem.attributes.replies
                                                  .data
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return {
                                                replies: [{ comment: "hi" }]
                                              };
                                            }
                                            throw e;
                                          }
                                        })()}
                                        reviewId={(() => {
                                          try {
                                            return currentItem.id;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        userIconUrl={(() => {
                                          try {
                                            return currentItem.attributes
                                              .users_permissions_user.data
                                              .attributes.Profile_Picture
                                              .attributes.url;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        userId={(() => {
                                          try {
                                            return currentItem.attributes
                                              .users_permissions_user.data.id;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        username={`Raj Patel${currentItem.attributes.users_permissions_user.data.attributes.username}`}
                                        vendorId={(() => {
                                          try {
                                            return $queries.venderInfo.data
                                              .response.data
                                              .usersPermissionsUser.data;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />
                                    );
                                  })}
                                </div>
                              </div>
                            </TabContent>
                            <TabContent
                              data-plasmic-name={"advertisements2"}
                              data-plasmic-override={overrides.advertisements2}
                              className={classNames(
                                "__wab_instance",
                                sty.advertisements2
                              )}
                              tabKey={"advertisements"}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___2H7Az
                                )}
                              >
                                {(() => {
                                  try {
                                    return $queries.storeInfo.data.response.data
                                      .store.data.attributes.adv_slots.data
                                      .length;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"advertisement"}
                                    data-plasmic-override={
                                      overrides.advertisement
                                    }
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.advertisement
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"header17"}
                                      data-plasmic-override={overrides.header17}
                                      className={classNames(
                                        projectcss.all,
                                        sty.header17
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__zmkLy
                                        )}
                                      >
                                        {"Advertisements"}
                                      </div>
                                    </div>
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__vh9J7
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__gVwZ
                                        )}
                                      >
                                        {(() => {
                                          const child$Props = {
                                            canSelectRows: "click",
                                            className: classNames(
                                              "__wab_instance",
                                              sty.table2
                                            ),
                                            data: (() => {
                                              try {
                                                return $queries.storeInfo.data.response.data.store.data.attributes.adv_slots.data.map(
                                                  item => ({
                                                    ...item.attributes,
                                                    id: item.id
                                                  })
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            fields: (() => {
                                              const __composite = [
                                                {
                                                  key: "Adv_Space",
                                                  fieldId: "Adv_Space",
                                                  title: null,
                                                  expr: null
                                                },
                                                {
                                                  key: "Slot_No",
                                                  fieldId: "Slot_No",
                                                  title: null
                                                },
                                                {
                                                  key: "createdAt",
                                                  fieldId: "createdAt",
                                                  title: null
                                                },
                                                {
                                                  key: "Active_Till",
                                                  fieldId: "Active_Till",
                                                  title: null
                                                },
                                                {
                                                  key: "Banner",
                                                  fieldId: "Banner",
                                                  isHidden: null
                                                },
                                                {
                                                  key: "id",
                                                  fieldId: "id",
                                                  isHidden: null
                                                }
                                              ];

                                              __composite["0"]["title"] =
                                                "Space";
                                              __composite["1"]["title"] =
                                                "Slot";
                                              __composite["2"]["title"] =
                                                "Purchased At";
                                              __composite["3"]["title"] =
                                                "Active Till";
                                              __composite["4"]["isHidden"] =
                                                true;
                                              __composite["5"]["isHidden"] =
                                                true;
                                              return __composite;
                                            })(),
                                            hideColumnPicker: true,
                                            hideExports: true,
                                            hideSearch: true,
                                            onRowSelectionChanged: async (
                                              ...eventArgs
                                            ) => {
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "selectedRowKey",
                                                ["table2", "selectedRowKey"],
                                                RichTable_Helpers
                                              ).apply(null, eventArgs);
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "selectedRow",
                                                ["table2", "selectedRow"],
                                                RichTable_Helpers
                                              ).apply(null, eventArgs);
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "selectedRows",
                                                ["table2", "selectedRows"],
                                                RichTable_Helpers
                                              ).apply(null, eventArgs);
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "selectedRowKeys",
                                                ["table2", "selectedRowKeys"],
                                                RichTable_Helpers
                                              ).apply(null, eventArgs);
                                            },
                                            pagination: false,
                                            rowActions: (() => {
                                              const __composite = [
                                                {
                                                  type: null,
                                                  label: null,
                                                  onClick: null
                                                }
                                              ];

                                              __composite["0"]["type"] = "item";
                                              __composite["0"]["label"] =
                                                "Set Image";
                                              return __composite;
                                            })(),
                                            rowKey: "adv",
                                            scopeClassName:
                                              sty["table2__instance"],
                                            selectedRowKey:
                                              generateStateValueProp($state, [
                                                "table2",
                                                "selectedRowKey"
                                              ]),
                                            selectedRowKeys:
                                              generateStateValueProp($state, [
                                                "table2",
                                                "selectedRowKeys"
                                              ]),
                                            themeResetClassName: classNames(
                                              projectcss.root_reset,
                                              projectcss.root_reset_tags,
                                              projectcss.plasmic_default_styles,
                                              projectcss.plasmic_mixins,
                                              projectcss.plasmic_tokens,
                                              plasmic_antd_5_hostless_css.plasmic_tokens,
                                              plasmic_plasmic_rich_components_css.plasmic_tokens
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "selectedRowKey",
                                                plasmicStateName:
                                                  "table2.selectedRowKey"
                                              },
                                              {
                                                name: "selectedRow",
                                                plasmicStateName:
                                                  "table2.selectedRow"
                                              },
                                              {
                                                name: "selectedRows",
                                                plasmicStateName:
                                                  "table2.selectedRows"
                                              },
                                              {
                                                name: "selectedRowKeys",
                                                plasmicStateName:
                                                  "table2.selectedRowKeys"
                                              }
                                            ],

                                            [],
                                            RichTable_Helpers ?? {},
                                            child$Props
                                          );
                                          return (
                                            <RichTable
                                              data-plasmic-name={"table2"}
                                              data-plasmic-override={
                                                overrides.table2
                                              }
                                              {...child$Props}
                                            />
                                          );
                                        })()}
                                        <PlasmicLink__
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.a,
                                            sty.link__o79Lg
                                          )}
                                          platform={"react"}
                                        >
                                          <ButtonContainer
                                            className={classNames(
                                              "__wab_instance",
                                              sty.buttonContainer__rwa4Q
                                            )}
                                          >
                                            <AntdButton
                                              className={classNames(
                                                "__wab_instance",
                                                sty.button__w2Cja
                                              )}
                                              type={"ghost"}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__kqwLu
                                                )}
                                              >
                                                {"Buy More"}
                                              </div>
                                            </AntdButton>
                                          </ButtonContainer>
                                        </PlasmicLink__>
                                      </div>
                                      <AntdModal
                                        data-plasmic-name={"setAdvImg"}
                                        data-plasmic-override={
                                          overrides.setAdvImg
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.setAdvImg
                                        )}
                                        closeIcon={
                                          <CrossSvgrepoComSvgIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__onuK
                                            )}
                                            role={"img"}
                                          />
                                        }
                                        defaultStylesClassName={classNames(
                                          projectcss.root_reset,
                                          projectcss.plasmic_default_styles,
                                          projectcss.plasmic_mixins,
                                          projectcss.plasmic_tokens,
                                          plasmic_antd_5_hostless_css.plasmic_tokens,
                                          plasmic_plasmic_rich_components_css.plasmic_tokens
                                        )}
                                        hideFooter={true}
                                        modalScopeClassName={
                                          sty["setAdvImg__modal"]
                                        }
                                        onOpenChange={async (...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "setAdvImg",
                                            "open"
                                          ]).apply(null, eventArgs);
                                        }}
                                        open={generateStateValueProp($state, [
                                          "setAdvImg",
                                          "open"
                                        ])}
                                        title={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__pj9Fa
                                            )}
                                          >
                                            {"Set Advertisement Image"}
                                          </div>
                                        }
                                        trigger={null}
                                        width={"1080"}
                                      >
                                        <Stack__
                                          as={"div"}
                                          data-plasmic-name={"advImage"}
                                          data-plasmic-override={
                                            overrides.advImage
                                          }
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.advImage
                                          )}
                                        >
                                          <Stack__
                                            as={"div"}
                                            hasGap={true}
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__zpDbH
                                            )}
                                          >
                                            <PlasmicImg__
                                              alt={""}
                                              className={classNames(
                                                sty.img__ymAbH
                                              )}
                                              displayHeight={"500px"}
                                              displayMaxHeight={"none"}
                                              displayMaxWidth={"100%"}
                                              displayMinHeight={"0"}
                                              displayMinWidth={"0"}
                                              displayWidth={"100%"}
                                              height={"500px"}
                                              loading={"lazy"}
                                            />

                                            <PlasmicImg__
                                              alt={""}
                                              className={classNames(
                                                sty.img__tpvIq
                                              )}
                                              displayHeight={"500px"}
                                              displayMaxHeight={"none"}
                                              displayMaxWidth={"100%"}
                                              displayMinHeight={"0"}
                                              displayMinWidth={"0"}
                                              displayWidth={"300px"}
                                              loading={"lazy"}
                                              width={"300px"}
                                            />

                                            <Stack__
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__szRbk
                                              )}
                                            >
                                              {(() => {
                                                const child$Props = {
                                                  className: classNames(
                                                    "__wab_instance",
                                                    sty.advPicture3
                                                  ),
                                                  extendedOnValuesChange:
                                                    async (...eventArgs) => {
                                                      generateStateOnChangePropForCodeComponents(
                                                        $state,
                                                        "value",
                                                        [
                                                          "advPicture3",
                                                          "value"
                                                        ],

                                                        FormWrapper_Helpers
                                                      ).apply(null, eventArgs);
                                                    },
                                                  formItems: [
                                                    {
                                                      label: "Name",
                                                      name: "name",
                                                      inputType: "Text"
                                                    },
                                                    {
                                                      label: "Message",
                                                      name: "message",
                                                      inputType: "Text Area"
                                                    }
                                                  ],

                                                  labelCol: {
                                                    span: 8,
                                                    horizontalOnly: true
                                                  },
                                                  layout: "vertical",
                                                  mode: "advanced",
                                                  onIsSubmittingChange: async (
                                                    ...eventArgs
                                                  ) => {
                                                    generateStateOnChangePropForCodeComponents(
                                                      $state,
                                                      "isSubmitting",
                                                      [
                                                        "advPicture3",
                                                        "isSubmitting"
                                                      ],

                                                      FormWrapper_Helpers
                                                    ).apply(null, eventArgs);
                                                  },
                                                  ref: ref => {
                                                    $refs["advPicture3"] = ref;
                                                  },
                                                  submitSlot: null,
                                                  wrapperCol: {
                                                    span: 16,
                                                    horizontalOnly: true
                                                  }
                                                };
                                                initializeCodeComponentStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "value",
                                                      plasmicStateName:
                                                        "advPicture3.value"
                                                    },
                                                    {
                                                      name: "isSubmitting",
                                                      plasmicStateName:
                                                        "advPicture3.isSubmitting"
                                                    }
                                                  ],

                                                  [],
                                                  FormWrapper_Helpers ?? {},
                                                  child$Props
                                                );
                                                return (
                                                  <FormWrapper
                                                    data-plasmic-name={
                                                      "advPicture3"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.advPicture3
                                                    }
                                                    {...child$Props}
                                                  >
                                                    <FormItemWrapper
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.formField__aDNyJ
                                                      )}
                                                      label={null}
                                                      name={"name"}
                                                      noStyle={true}
                                                    >
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          sty.freeBox__egJe
                                                        )}
                                                      >
                                                        <UploadWrapper
                                                          data-plasmic-name={
                                                            "profilePicture4"
                                                          }
                                                          data-plasmic-override={
                                                            overrides.profilePicture4
                                                          }
                                                          accept={""}
                                                          className={classNames(
                                                            "__wab_instance",
                                                            sty.profilePicture4
                                                          )}
                                                          dragAndDropFiles={
                                                            true
                                                          }
                                                          files={generateStateValueProp(
                                                            $state,
                                                            [
                                                              "profilePicture4",
                                                              "files"
                                                            ]
                                                          )}
                                                          listType={
                                                            "picture-card"
                                                          }
                                                          multiple={true}
                                                          onFilesChange={async (
                                                            ...eventArgs
                                                          ) => {
                                                            generateStateOnChangeProp(
                                                              $state,
                                                              [
                                                                "profilePicture4",
                                                                "files"
                                                              ]
                                                            ).apply(
                                                              null,
                                                              eventArgs
                                                            );
                                                          }}
                                                          showUploadList={true}
                                                        >
                                                          <Stack__
                                                            as={"div"}
                                                            hasGap={true}
                                                            className={classNames(
                                                              projectcss.all,
                                                              sty.freeBox__sksAe
                                                            )}
                                                          >
                                                            <Icon17Icon
                                                              className={classNames(
                                                                projectcss.all,
                                                                sty.svg__qAcgH
                                                              )}
                                                              role={"img"}
                                                            />

                                                            <div
                                                              className={classNames(
                                                                projectcss.all,
                                                                projectcss.__wab_text,
                                                                sty.text__vsAeY
                                                              )}
                                                            >
                                                              {
                                                                "Click or drag file to this area to upload"
                                                              }
                                                            </div>
                                                          </Stack__>
                                                        </UploadWrapper>
                                                      </div>
                                                    </FormItemWrapper>
                                                    <ButtonContainer
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.buttonContainer__xw9V0
                                                      )}
                                                    >
                                                      <AntdButton
                                                        className={classNames(
                                                          "__wab_instance",
                                                          sty.button__l32I5
                                                        )}
                                                        submitsForm={true}
                                                        type={"ghost"}
                                                      >
                                                        <div
                                                          className={classNames(
                                                            projectcss.all,
                                                            projectcss.__wab_text,
                                                            sty.text__srQKu
                                                          )}
                                                        >
                                                          {"Upload"}
                                                        </div>
                                                      </AntdButton>
                                                    </ButtonContainer>
                                                  </FormWrapper>
                                                );
                                              })()}
                                            </Stack__>
                                          </Stack__>
                                        </Stack__>
                                      </AntdModal>
                                    </Stack__>
                                  </Stack__>
                                ) : null}
                              </Stack__>
                            </TabContent>
                          </div>
                        </div>
                      )}
                    </DataCtxReader__>
                  </TabsContainer>
                </div>
              ) : null}
            </div>
          </LayerDefault>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  vendorDashboard: [
    "vendorDashboard",
    "layerDefault",
    "sidebar",
    "columns",
    "button2",
    "desktop",
    "home2",
    "frontStore",
    "enquiries3",
    "forms2",
    "reviews2",
    "advertisements",
    "mobile",
    "advertisements3",
    "content2",
    "welcome",
    "home",
    "header15",
    "analytics2",
    "total2",
    "leads2",
    "conversion2",
    "discarded2",
    "charts2",
    "enquiries4",
    "chart",
    "conversions2",
    "conversions4",
    "recents2",
    "enquiry5",
    "header13",
    "reviews4",
    "header16",
    "frontStore2",
    "content4",
    "header3",
    "buttons",
    "businessInformation2",
    "gallery2",
    "location",
    "pricingPackages",
    "headerButton",
    "viewStore",
    "businessInformation",
    "header4",
    "info5",
    "row",
    "row2",
    "row3",
    "row4",
    "row5",
    "businessInfo",
    "info",
    "inputContainer",
    "businessName",
    "inputContainer4",
    "businessName4",
    "socialMedia",
    "inputContainer5",
    "instagram",
    "inputContainer6",
    "facebook",
    "socialMedia2",
    "inputContainer20",
    "twitter",
    "inputContainer23",
    "pinterest",
    "description",
    "inputContainer7",
    "businessDescription",
    "tags2",
    "inputContainer8",
    "tags",
    "info2",
    "inputContainer9",
    "paymentTerms",
    "inputContainer10",
    "travelCost",
    "inputContainer11",
    "albums2",
    "inputContainer12",
    "deliveryTime",
    "featuringVendorCard",
    "profilePicture",
    "profilePicture2",
    "locationInformation",
    "header14",
    "locationForm",
    "row6",
    "row7",
    "addMoreLocations",
    "enquiries",
    "enquiriesForms",
    "type",
    "all",
    "lead",
    "prospect",
    "followUp",
    "conversions3",
    "discarded3",
    "old",
    "responsiveColumn",
    "content3",
    "messages",
    "noMessages",
    "tabs",
    "enquiry2",
    "enquiryForm",
    "formSelect",
    "sendEnquiryForm",
    "sendEnquiryForm2",
    "notes",
    "notesInput",
    "note",
    "main",
    "forms",
    "header9",
    "formLIstNewForm",
    "formList",
    "deleteForm2",
    "deleteForm3",
    "table",
    "newForm",
    "back2",
    "formTitle",
    "enquiryFormBuilder2",
    "newField",
    "dropdown",
    "textarea",
    "dateTimePicker2",
    "radioGroup5",
    "dateTimePicker3",
    "modal",
    "reviews",
    "header8",
    "select",
    "advertisements2",
    "advertisement",
    "header17",
    "table2",
    "setAdvImg",
    "advImage",
    "advPicture3",
    "profilePicture4"
  ],

  layerDefault: [
    "layerDefault",
    "sidebar",
    "columns",
    "button2",
    "desktop",
    "home2",
    "frontStore",
    "enquiries3",
    "forms2",
    "reviews2",
    "advertisements",
    "mobile",
    "advertisements3",
    "content2",
    "welcome",
    "home",
    "header15",
    "analytics2",
    "total2",
    "leads2",
    "conversion2",
    "discarded2",
    "charts2",
    "enquiries4",
    "chart",
    "conversions2",
    "conversions4",
    "recents2",
    "enquiry5",
    "header13",
    "reviews4",
    "header16",
    "frontStore2",
    "content4",
    "header3",
    "buttons",
    "businessInformation2",
    "gallery2",
    "location",
    "pricingPackages",
    "headerButton",
    "viewStore",
    "businessInformation",
    "header4",
    "info5",
    "row",
    "row2",
    "row3",
    "row4",
    "row5",
    "businessInfo",
    "info",
    "inputContainer",
    "businessName",
    "inputContainer4",
    "businessName4",
    "socialMedia",
    "inputContainer5",
    "instagram",
    "inputContainer6",
    "facebook",
    "socialMedia2",
    "inputContainer20",
    "twitter",
    "inputContainer23",
    "pinterest",
    "description",
    "inputContainer7",
    "businessDescription",
    "tags2",
    "inputContainer8",
    "tags",
    "info2",
    "inputContainer9",
    "paymentTerms",
    "inputContainer10",
    "travelCost",
    "inputContainer11",
    "albums2",
    "inputContainer12",
    "deliveryTime",
    "featuringVendorCard",
    "profilePicture",
    "profilePicture2",
    "locationInformation",
    "header14",
    "locationForm",
    "row6",
    "row7",
    "addMoreLocations",
    "enquiries",
    "enquiriesForms",
    "type",
    "all",
    "lead",
    "prospect",
    "followUp",
    "conversions3",
    "discarded3",
    "old",
    "responsiveColumn",
    "content3",
    "messages",
    "noMessages",
    "tabs",
    "enquiry2",
    "enquiryForm",
    "formSelect",
    "sendEnquiryForm",
    "sendEnquiryForm2",
    "notes",
    "notesInput",
    "note",
    "main",
    "forms",
    "header9",
    "formLIstNewForm",
    "formList",
    "deleteForm2",
    "deleteForm3",
    "table",
    "newForm",
    "back2",
    "formTitle",
    "enquiryFormBuilder2",
    "newField",
    "dropdown",
    "textarea",
    "dateTimePicker2",
    "radioGroup5",
    "dateTimePicker3",
    "modal",
    "reviews",
    "header8",
    "select",
    "advertisements2",
    "advertisement",
    "header17",
    "table2",
    "setAdvImg",
    "advImage",
    "advPicture3",
    "profilePicture4"
  ],

  sidebar: [
    "sidebar",
    "columns",
    "button2",
    "desktop",
    "home2",
    "frontStore",
    "enquiries3",
    "forms2",
    "reviews2",
    "advertisements",
    "mobile",
    "advertisements3",
    "content2",
    "welcome",
    "home",
    "header15",
    "analytics2",
    "total2",
    "leads2",
    "conversion2",
    "discarded2",
    "charts2",
    "enquiries4",
    "chart",
    "conversions2",
    "conversions4",
    "recents2",
    "enquiry5",
    "header13",
    "reviews4",
    "header16",
    "frontStore2",
    "content4",
    "header3",
    "buttons",
    "businessInformation2",
    "gallery2",
    "location",
    "pricingPackages",
    "headerButton",
    "viewStore",
    "businessInformation",
    "header4",
    "info5",
    "row",
    "row2",
    "row3",
    "row4",
    "row5",
    "businessInfo",
    "info",
    "inputContainer",
    "businessName",
    "inputContainer4",
    "businessName4",
    "socialMedia",
    "inputContainer5",
    "instagram",
    "inputContainer6",
    "facebook",
    "socialMedia2",
    "inputContainer20",
    "twitter",
    "inputContainer23",
    "pinterest",
    "description",
    "inputContainer7",
    "businessDescription",
    "tags2",
    "inputContainer8",
    "tags",
    "info2",
    "inputContainer9",
    "paymentTerms",
    "inputContainer10",
    "travelCost",
    "inputContainer11",
    "albums2",
    "inputContainer12",
    "deliveryTime",
    "featuringVendorCard",
    "profilePicture",
    "profilePicture2",
    "locationInformation",
    "header14",
    "locationForm",
    "row6",
    "row7",
    "addMoreLocations",
    "enquiries",
    "enquiriesForms",
    "type",
    "all",
    "lead",
    "prospect",
    "followUp",
    "conversions3",
    "discarded3",
    "old",
    "responsiveColumn",
    "content3",
    "messages",
    "noMessages",
    "tabs",
    "enquiry2",
    "enquiryForm",
    "formSelect",
    "sendEnquiryForm",
    "sendEnquiryForm2",
    "notes",
    "notesInput",
    "note",
    "main",
    "forms",
    "header9",
    "formLIstNewForm",
    "formList",
    "deleteForm2",
    "deleteForm3",
    "table",
    "newForm",
    "back2",
    "formTitle",
    "enquiryFormBuilder2",
    "newField",
    "dropdown",
    "textarea",
    "dateTimePicker2",
    "radioGroup5",
    "dateTimePicker3",
    "modal",
    "reviews",
    "header8",
    "select",
    "advertisements2",
    "advertisement",
    "header17",
    "table2",
    "setAdvImg",
    "advImage",
    "advPicture3",
    "profilePicture4"
  ],

  columns: [
    "columns",
    "button2",
    "desktop",
    "home2",
    "frontStore",
    "enquiries3",
    "forms2",
    "reviews2",
    "advertisements",
    "mobile",
    "advertisements3",
    "content2",
    "welcome",
    "home",
    "header15",
    "analytics2",
    "total2",
    "leads2",
    "conversion2",
    "discarded2",
    "charts2",
    "enquiries4",
    "chart",
    "conversions2",
    "conversions4",
    "recents2",
    "enquiry5",
    "header13",
    "reviews4",
    "header16",
    "frontStore2",
    "content4",
    "header3",
    "buttons",
    "businessInformation2",
    "gallery2",
    "location",
    "pricingPackages",
    "headerButton",
    "viewStore",
    "businessInformation",
    "header4",
    "info5",
    "row",
    "row2",
    "row3",
    "row4",
    "row5",
    "businessInfo",
    "info",
    "inputContainer",
    "businessName",
    "inputContainer4",
    "businessName4",
    "socialMedia",
    "inputContainer5",
    "instagram",
    "inputContainer6",
    "facebook",
    "socialMedia2",
    "inputContainer20",
    "twitter",
    "inputContainer23",
    "pinterest",
    "description",
    "inputContainer7",
    "businessDescription",
    "tags2",
    "inputContainer8",
    "tags",
    "info2",
    "inputContainer9",
    "paymentTerms",
    "inputContainer10",
    "travelCost",
    "inputContainer11",
    "albums2",
    "inputContainer12",
    "deliveryTime",
    "featuringVendorCard",
    "profilePicture",
    "profilePicture2",
    "locationInformation",
    "header14",
    "locationForm",
    "row6",
    "row7",
    "addMoreLocations",
    "enquiries",
    "enquiriesForms",
    "type",
    "all",
    "lead",
    "prospect",
    "followUp",
    "conversions3",
    "discarded3",
    "old",
    "responsiveColumn",
    "content3",
    "messages",
    "noMessages",
    "tabs",
    "enquiry2",
    "enquiryForm",
    "formSelect",
    "sendEnquiryForm",
    "sendEnquiryForm2",
    "notes",
    "notesInput",
    "note",
    "main",
    "forms",
    "header9",
    "formLIstNewForm",
    "formList",
    "deleteForm2",
    "deleteForm3",
    "table",
    "newForm",
    "back2",
    "formTitle",
    "enquiryFormBuilder2",
    "newField",
    "dropdown",
    "textarea",
    "dateTimePicker2",
    "radioGroup5",
    "dateTimePicker3",
    "modal",
    "reviews",
    "header8",
    "select",
    "advertisements2",
    "advertisement",
    "header17",
    "table2",
    "setAdvImg",
    "advImage",
    "advPicture3",
    "profilePicture4"
  ],

  button2: [
    "button2",
    "desktop",
    "home2",
    "frontStore",
    "enquiries3",
    "forms2",
    "reviews2",
    "advertisements",
    "mobile",
    "advertisements3"
  ],

  desktop: [
    "desktop",
    "home2",
    "frontStore",
    "enquiries3",
    "forms2",
    "reviews2",
    "advertisements"
  ],

  home2: ["home2"],
  frontStore: ["frontStore"],
  enquiries3: ["enquiries3"],
  forms2: ["forms2"],
  reviews2: ["reviews2"],
  advertisements: ["advertisements"],
  mobile: ["mobile", "advertisements3"],
  advertisements3: ["advertisements3"],
  content2: [
    "content2",
    "welcome",
    "home",
    "header15",
    "analytics2",
    "total2",
    "leads2",
    "conversion2",
    "discarded2",
    "charts2",
    "enquiries4",
    "chart",
    "conversions2",
    "conversions4",
    "recents2",
    "enquiry5",
    "header13",
    "reviews4",
    "header16",
    "frontStore2",
    "content4",
    "header3",
    "buttons",
    "businessInformation2",
    "gallery2",
    "location",
    "pricingPackages",
    "headerButton",
    "viewStore",
    "businessInformation",
    "header4",
    "info5",
    "row",
    "row2",
    "row3",
    "row4",
    "row5",
    "businessInfo",
    "info",
    "inputContainer",
    "businessName",
    "inputContainer4",
    "businessName4",
    "socialMedia",
    "inputContainer5",
    "instagram",
    "inputContainer6",
    "facebook",
    "socialMedia2",
    "inputContainer20",
    "twitter",
    "inputContainer23",
    "pinterest",
    "description",
    "inputContainer7",
    "businessDescription",
    "tags2",
    "inputContainer8",
    "tags",
    "info2",
    "inputContainer9",
    "paymentTerms",
    "inputContainer10",
    "travelCost",
    "inputContainer11",
    "albums2",
    "inputContainer12",
    "deliveryTime",
    "featuringVendorCard",
    "profilePicture",
    "profilePicture2",
    "locationInformation",
    "header14",
    "locationForm",
    "row6",
    "row7",
    "addMoreLocations",
    "enquiries",
    "enquiriesForms",
    "type",
    "all",
    "lead",
    "prospect",
    "followUp",
    "conversions3",
    "discarded3",
    "old",
    "responsiveColumn",
    "content3",
    "messages",
    "noMessages",
    "tabs",
    "enquiry2",
    "enquiryForm",
    "formSelect",
    "sendEnquiryForm",
    "sendEnquiryForm2",
    "notes",
    "notesInput",
    "note",
    "main",
    "forms",
    "header9",
    "formLIstNewForm",
    "formList",
    "deleteForm2",
    "deleteForm3",
    "table",
    "newForm",
    "back2",
    "formTitle",
    "enquiryFormBuilder2",
    "newField",
    "dropdown",
    "textarea",
    "dateTimePicker2",
    "radioGroup5",
    "dateTimePicker3",
    "modal",
    "reviews",
    "header8",
    "select",
    "advertisements2",
    "advertisement",
    "header17",
    "table2",
    "setAdvImg",
    "advImage",
    "advPicture3",
    "profilePicture4"
  ],

  welcome: ["welcome"],
  home: [
    "home",
    "header15",
    "analytics2",
    "total2",
    "leads2",
    "conversion2",
    "discarded2",
    "charts2",
    "enquiries4",
    "chart",
    "conversions2",
    "conversions4",
    "recents2",
    "enquiry5",
    "header13",
    "reviews4",
    "header16"
  ],

  header15: ["header15"],
  analytics2: ["analytics2", "total2", "leads2", "conversion2", "discarded2"],
  total2: ["total2"],
  leads2: ["leads2"],
  conversion2: ["conversion2"],
  discarded2: ["discarded2"],
  charts2: ["charts2", "enquiries4", "chart", "conversions2", "conversions4"],
  enquiries4: ["enquiries4", "chart"],
  chart: ["chart"],
  conversions2: ["conversions2"],
  conversions4: ["conversions4"],
  recents2: ["recents2", "enquiry5", "header13", "reviews4", "header16"],
  enquiry5: ["enquiry5", "header13"],
  header13: ["header13"],
  reviews4: ["reviews4", "header16"],
  header16: ["header16"],
  frontStore2: [
    "frontStore2",
    "content4",
    "header3",
    "buttons",
    "businessInformation2",
    "gallery2",
    "location",
    "pricingPackages",
    "headerButton",
    "viewStore",
    "businessInformation",
    "header4",
    "info5",
    "row",
    "row2",
    "row3",
    "row4",
    "row5",
    "businessInfo",
    "info",
    "inputContainer",
    "businessName",
    "inputContainer4",
    "businessName4",
    "socialMedia",
    "inputContainer5",
    "instagram",
    "inputContainer6",
    "facebook",
    "socialMedia2",
    "inputContainer20",
    "twitter",
    "inputContainer23",
    "pinterest",
    "description",
    "inputContainer7",
    "businessDescription",
    "tags2",
    "inputContainer8",
    "tags",
    "info2",
    "inputContainer9",
    "paymentTerms",
    "inputContainer10",
    "travelCost",
    "inputContainer11",
    "albums2",
    "inputContainer12",
    "deliveryTime",
    "featuringVendorCard",
    "profilePicture",
    "profilePicture2",
    "locationInformation",
    "header14",
    "locationForm",
    "row6",
    "row7",
    "addMoreLocations"
  ],

  content4: [
    "content4",
    "header3",
    "buttons",
    "businessInformation2",
    "gallery2",
    "location",
    "pricingPackages",
    "headerButton",
    "viewStore",
    "businessInformation",
    "header4",
    "info5",
    "row",
    "row2",
    "row3",
    "row4",
    "row5",
    "businessInfo",
    "info",
    "inputContainer",
    "businessName",
    "inputContainer4",
    "businessName4",
    "socialMedia",
    "inputContainer5",
    "instagram",
    "inputContainer6",
    "facebook",
    "socialMedia2",
    "inputContainer20",
    "twitter",
    "inputContainer23",
    "pinterest",
    "description",
    "inputContainer7",
    "businessDescription",
    "tags2",
    "inputContainer8",
    "tags",
    "info2",
    "inputContainer9",
    "paymentTerms",
    "inputContainer10",
    "travelCost",
    "inputContainer11",
    "albums2",
    "inputContainer12",
    "deliveryTime",
    "featuringVendorCard",
    "profilePicture",
    "profilePicture2",
    "locationInformation",
    "header14",
    "locationForm",
    "row6",
    "row7",
    "addMoreLocations"
  ],

  header3: [
    "header3",
    "buttons",
    "businessInformation2",
    "gallery2",
    "location",
    "pricingPackages",
    "headerButton",
    "viewStore"
  ],

  buttons: [
    "buttons",
    "businessInformation2",
    "gallery2",
    "location",
    "pricingPackages",
    "headerButton",
    "viewStore"
  ],

  businessInformation2: ["businessInformation2"],
  gallery2: ["gallery2"],
  location: ["location"],
  pricingPackages: ["pricingPackages"],
  headerButton: ["headerButton"],
  viewStore: ["viewStore"],
  businessInformation: [
    "businessInformation",
    "header4",
    "info5",
    "row",
    "row2",
    "row3",
    "row4",
    "row5",
    "businessInfo",
    "info",
    "inputContainer",
    "businessName",
    "inputContainer4",
    "businessName4",
    "socialMedia",
    "inputContainer5",
    "instagram",
    "inputContainer6",
    "facebook",
    "socialMedia2",
    "inputContainer20",
    "twitter",
    "inputContainer23",
    "pinterest",
    "description",
    "inputContainer7",
    "businessDescription",
    "tags2",
    "inputContainer8",
    "tags",
    "info2",
    "inputContainer9",
    "paymentTerms",
    "inputContainer10",
    "travelCost",
    "inputContainer11",
    "albums2",
    "inputContainer12",
    "deliveryTime",
    "featuringVendorCard",
    "profilePicture",
    "profilePicture2"
  ],

  header4: ["header4"],
  info5: ["info5", "row", "row2", "row3", "row4", "row5"],
  row: ["row"],
  row2: ["row2"],
  row3: ["row3"],
  row4: ["row4"],
  row5: ["row5"],
  businessInfo: [
    "businessInfo",
    "info",
    "inputContainer",
    "businessName",
    "inputContainer4",
    "businessName4",
    "socialMedia",
    "inputContainer5",
    "instagram",
    "inputContainer6",
    "facebook",
    "socialMedia2",
    "inputContainer20",
    "twitter",
    "inputContainer23",
    "pinterest",
    "description",
    "inputContainer7",
    "businessDescription",
    "tags2",
    "inputContainer8",
    "tags",
    "info2",
    "inputContainer9",
    "paymentTerms",
    "inputContainer10",
    "travelCost",
    "inputContainer11",
    "albums2",
    "inputContainer12",
    "deliveryTime"
  ],

  info: [
    "info",
    "inputContainer",
    "businessName",
    "inputContainer4",
    "businessName4"
  ],

  inputContainer: ["inputContainer", "businessName"],
  businessName: ["businessName"],
  inputContainer4: ["inputContainer4", "businessName4"],
  businessName4: ["businessName4"],
  socialMedia: [
    "socialMedia",
    "inputContainer5",
    "instagram",
    "inputContainer6",
    "facebook"
  ],

  inputContainer5: ["inputContainer5", "instagram"],
  instagram: ["instagram"],
  inputContainer6: ["inputContainer6", "facebook"],
  facebook: ["facebook"],
  socialMedia2: [
    "socialMedia2",
    "inputContainer20",
    "twitter",
    "inputContainer23",
    "pinterest"
  ],

  inputContainer20: ["inputContainer20", "twitter"],
  twitter: ["twitter"],
  inputContainer23: ["inputContainer23", "pinterest"],
  pinterest: ["pinterest"],
  description: ["description", "inputContainer7", "businessDescription"],
  inputContainer7: ["inputContainer7", "businessDescription"],
  businessDescription: ["businessDescription"],
  tags2: ["tags2", "inputContainer8", "tags"],
  inputContainer8: ["inputContainer8", "tags"],
  tags: ["tags"],
  info2: [
    "info2",
    "inputContainer9",
    "paymentTerms",
    "inputContainer10",
    "travelCost",
    "inputContainer11",
    "albums2",
    "inputContainer12",
    "deliveryTime"
  ],

  inputContainer9: ["inputContainer9", "paymentTerms"],
  paymentTerms: ["paymentTerms"],
  inputContainer10: ["inputContainer10", "travelCost"],
  travelCost: ["travelCost"],
  inputContainer11: ["inputContainer11", "albums2"],
  albums2: ["albums2"],
  inputContainer12: ["inputContainer12", "deliveryTime"],
  deliveryTime: ["deliveryTime"],
  featuringVendorCard: ["featuringVendorCard"],
  profilePicture: ["profilePicture", "profilePicture2"],
  profilePicture2: ["profilePicture2"],
  locationInformation: [
    "locationInformation",
    "header14",
    "locationForm",
    "row6",
    "row7",
    "addMoreLocations"
  ],

  header14: ["header14"],
  locationForm: ["locationForm"],
  row6: ["row6"],
  row7: ["row7"],
  addMoreLocations: ["addMoreLocations"],
  enquiries: [
    "enquiries",
    "enquiriesForms",
    "type",
    "all",
    "lead",
    "prospect",
    "followUp",
    "conversions3",
    "discarded3",
    "old",
    "responsiveColumn",
    "content3",
    "messages",
    "noMessages",
    "tabs",
    "enquiry2",
    "enquiryForm",
    "formSelect",
    "sendEnquiryForm",
    "sendEnquiryForm2",
    "notes",
    "notesInput",
    "note",
    "main"
  ],

  enquiriesForms: [
    "enquiriesForms",
    "type",
    "all",
    "lead",
    "prospect",
    "followUp",
    "conversions3",
    "discarded3",
    "old",
    "responsiveColumn",
    "content3",
    "messages",
    "noMessages",
    "tabs",
    "enquiry2",
    "enquiryForm",
    "formSelect",
    "sendEnquiryForm",
    "sendEnquiryForm2",
    "notes",
    "notesInput",
    "note",
    "main"
  ],

  type: [
    "type",
    "all",
    "lead",
    "prospect",
    "followUp",
    "conversions3",
    "discarded3"
  ],

  all: ["all"],
  lead: ["lead"],
  prospect: ["prospect"],
  followUp: ["followUp"],
  conversions3: ["conversions3"],
  discarded3: ["discarded3"],
  old: [
    "old",
    "responsiveColumn",
    "content3",
    "messages",
    "noMessages",
    "tabs",
    "enquiry2",
    "enquiryForm",
    "formSelect",
    "sendEnquiryForm",
    "sendEnquiryForm2",
    "notes",
    "notesInput",
    "note",
    "main"
  ],

  responsiveColumn: [
    "responsiveColumn",
    "content3",
    "messages",
    "noMessages",
    "tabs",
    "enquiry2",
    "enquiryForm",
    "formSelect",
    "sendEnquiryForm",
    "sendEnquiryForm2",
    "notes",
    "notesInput",
    "note",
    "main"
  ],

  content3: [
    "content3",
    "messages",
    "noMessages",
    "tabs",
    "enquiry2",
    "enquiryForm",
    "formSelect",
    "sendEnquiryForm",
    "sendEnquiryForm2",
    "notes",
    "notesInput",
    "note",
    "main"
  ],

  messages: [
    "messages",
    "noMessages",
    "tabs",
    "enquiry2",
    "enquiryForm",
    "formSelect",
    "sendEnquiryForm",
    "sendEnquiryForm2",
    "notes",
    "notesInput",
    "note",
    "main"
  ],

  noMessages: ["noMessages"],
  tabs: [
    "tabs",
    "enquiry2",
    "enquiryForm",
    "formSelect",
    "sendEnquiryForm",
    "sendEnquiryForm2",
    "notes",
    "notesInput",
    "note",
    "main"
  ],

  enquiry2: [
    "enquiry2",
    "enquiryForm",
    "formSelect",
    "sendEnquiryForm",
    "sendEnquiryForm2",
    "notes",
    "notesInput",
    "note",
    "main"
  ],

  enquiryForm: ["enquiryForm"],
  formSelect: ["formSelect"],
  sendEnquiryForm: ["sendEnquiryForm"],
  sendEnquiryForm2: ["sendEnquiryForm2"],
  notes: ["notes", "notesInput"],
  notesInput: ["notesInput"],
  note: ["note", "main"],
  main: ["main"],
  forms: [
    "forms",
    "header9",
    "formLIstNewForm",
    "formList",
    "deleteForm2",
    "deleteForm3",
    "table",
    "newForm",
    "back2",
    "formTitle",
    "enquiryFormBuilder2",
    "newField",
    "dropdown",
    "textarea",
    "dateTimePicker2",
    "radioGroup5",
    "dateTimePicker3",
    "modal"
  ],

  header9: ["header9"],
  formLIstNewForm: [
    "formLIstNewForm",
    "formList",
    "deleteForm2",
    "deleteForm3",
    "table",
    "newForm",
    "back2",
    "formTitle",
    "enquiryFormBuilder2",
    "newField",
    "dropdown",
    "textarea",
    "dateTimePicker2",
    "radioGroup5",
    "dateTimePicker3",
    "modal"
  ],

  formList: ["formList", "deleteForm2", "deleteForm3", "table"],
  deleteForm2: ["deleteForm2"],
  deleteForm3: ["deleteForm3"],
  table: ["table"],
  newForm: [
    "newForm",
    "back2",
    "formTitle",
    "enquiryFormBuilder2",
    "newField",
    "dropdown",
    "textarea",
    "dateTimePicker2",
    "radioGroup5",
    "dateTimePicker3",
    "modal"
  ],

  back2: ["back2"],
  formTitle: ["formTitle"],
  enquiryFormBuilder2: ["enquiryFormBuilder2"],
  newField: ["newField"],
  dropdown: [
    "dropdown",
    "textarea",
    "dateTimePicker2",
    "radioGroup5",
    "dateTimePicker3"
  ],

  textarea: ["textarea"],
  dateTimePicker2: ["dateTimePicker2"],
  radioGroup5: ["radioGroup5"],
  dateTimePicker3: ["dateTimePicker3"],
  modal: ["modal"],
  reviews: ["reviews", "header8", "select"],
  header8: ["header8", "select"],
  select: ["select"],
  advertisements2: [
    "advertisements2",
    "advertisement",
    "header17",
    "table2",
    "setAdvImg",
    "advImage",
    "advPicture3",
    "profilePicture4"
  ],

  advertisement: [
    "advertisement",
    "header17",
    "table2",
    "setAdvImg",
    "advImage",
    "advPicture3",
    "profilePicture4"
  ],

  header17: ["header17"],
  table2: ["table2"],
  setAdvImg: ["setAdvImg", "advImage", "advPicture3", "profilePicture4"],
  advImage: ["advImage", "advPicture3", "profilePicture4"],
  advPicture3: ["advPicture3", "profilePicture4"],
  profilePicture4: ["profilePicture4"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDashboard__ArgProps,
          internalVariantPropNames: PlasmicDashboard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "vendorDashboard") {
    func.displayName = "PlasmicDashboard";
  } else {
    func.displayName = `PlasmicDashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicDashboard = Object.assign(
  // Top-level PlasmicDashboard renders the root element
  makeNodeComponent("vendorDashboard"),
  {
    // Helper components rendering sub-elements
    layerDefault: makeNodeComponent("layerDefault"),
    sidebar: makeNodeComponent("sidebar"),
    columns: makeNodeComponent("columns"),
    button2: makeNodeComponent("button2"),
    desktop: makeNodeComponent("desktop"),
    home2: makeNodeComponent("home2"),
    frontStore: makeNodeComponent("frontStore"),
    enquiries3: makeNodeComponent("enquiries3"),
    forms2: makeNodeComponent("forms2"),
    reviews2: makeNodeComponent("reviews2"),
    advertisements: makeNodeComponent("advertisements"),
    mobile: makeNodeComponent("mobile"),
    advertisements3: makeNodeComponent("advertisements3"),
    content2: makeNodeComponent("content2"),
    welcome: makeNodeComponent("welcome"),
    home: makeNodeComponent("home"),
    header15: makeNodeComponent("header15"),
    analytics2: makeNodeComponent("analytics2"),
    total2: makeNodeComponent("total2"),
    leads2: makeNodeComponent("leads2"),
    conversion2: makeNodeComponent("conversion2"),
    discarded2: makeNodeComponent("discarded2"),
    charts2: makeNodeComponent("charts2"),
    enquiries4: makeNodeComponent("enquiries4"),
    chart: makeNodeComponent("chart"),
    conversions2: makeNodeComponent("conversions2"),
    conversions4: makeNodeComponent("conversions4"),
    recents2: makeNodeComponent("recents2"),
    enquiry5: makeNodeComponent("enquiry5"),
    header13: makeNodeComponent("header13"),
    reviews4: makeNodeComponent("reviews4"),
    header16: makeNodeComponent("header16"),
    frontStore2: makeNodeComponent("frontStore2"),
    content4: makeNodeComponent("content4"),
    header3: makeNodeComponent("header3"),
    buttons: makeNodeComponent("buttons"),
    businessInformation2: makeNodeComponent("businessInformation2"),
    gallery2: makeNodeComponent("gallery2"),
    location: makeNodeComponent("location"),
    pricingPackages: makeNodeComponent("pricingPackages"),
    headerButton: makeNodeComponent("headerButton"),
    viewStore: makeNodeComponent("viewStore"),
    businessInformation: makeNodeComponent("businessInformation"),
    header4: makeNodeComponent("header4"),
    info5: makeNodeComponent("info5"),
    row: makeNodeComponent("row"),
    row2: makeNodeComponent("row2"),
    row3: makeNodeComponent("row3"),
    row4: makeNodeComponent("row4"),
    row5: makeNodeComponent("row5"),
    businessInfo: makeNodeComponent("businessInfo"),
    info: makeNodeComponent("info"),
    inputContainer: makeNodeComponent("inputContainer"),
    businessName: makeNodeComponent("businessName"),
    inputContainer4: makeNodeComponent("inputContainer4"),
    businessName4: makeNodeComponent("businessName4"),
    socialMedia: makeNodeComponent("socialMedia"),
    inputContainer5: makeNodeComponent("inputContainer5"),
    instagram: makeNodeComponent("instagram"),
    inputContainer6: makeNodeComponent("inputContainer6"),
    facebook: makeNodeComponent("facebook"),
    socialMedia2: makeNodeComponent("socialMedia2"),
    inputContainer20: makeNodeComponent("inputContainer20"),
    twitter: makeNodeComponent("twitter"),
    inputContainer23: makeNodeComponent("inputContainer23"),
    pinterest: makeNodeComponent("pinterest"),
    description: makeNodeComponent("description"),
    inputContainer7: makeNodeComponent("inputContainer7"),
    businessDescription: makeNodeComponent("businessDescription"),
    tags2: makeNodeComponent("tags2"),
    inputContainer8: makeNodeComponent("inputContainer8"),
    tags: makeNodeComponent("tags"),
    info2: makeNodeComponent("info2"),
    inputContainer9: makeNodeComponent("inputContainer9"),
    paymentTerms: makeNodeComponent("paymentTerms"),
    inputContainer10: makeNodeComponent("inputContainer10"),
    travelCost: makeNodeComponent("travelCost"),
    inputContainer11: makeNodeComponent("inputContainer11"),
    albums2: makeNodeComponent("albums2"),
    inputContainer12: makeNodeComponent("inputContainer12"),
    deliveryTime: makeNodeComponent("deliveryTime"),
    featuringVendorCard: makeNodeComponent("featuringVendorCard"),
    profilePicture: makeNodeComponent("profilePicture"),
    profilePicture2: makeNodeComponent("profilePicture2"),
    locationInformation: makeNodeComponent("locationInformation"),
    header14: makeNodeComponent("header14"),
    locationForm: makeNodeComponent("locationForm"),
    row6: makeNodeComponent("row6"),
    row7: makeNodeComponent("row7"),
    addMoreLocations: makeNodeComponent("addMoreLocations"),
    enquiries: makeNodeComponent("enquiries"),
    enquiriesForms: makeNodeComponent("enquiriesForms"),
    type: makeNodeComponent("type"),
    all: makeNodeComponent("all"),
    lead: makeNodeComponent("lead"),
    prospect: makeNodeComponent("prospect"),
    followUp: makeNodeComponent("followUp"),
    conversions3: makeNodeComponent("conversions3"),
    discarded3: makeNodeComponent("discarded3"),
    old: makeNodeComponent("old"),
    responsiveColumn: makeNodeComponent("responsiveColumn"),
    content3: makeNodeComponent("content3"),
    messages: makeNodeComponent("messages"),
    noMessages: makeNodeComponent("noMessages"),
    tabs: makeNodeComponent("tabs"),
    enquiry2: makeNodeComponent("enquiry2"),
    enquiryForm: makeNodeComponent("enquiryForm"),
    formSelect: makeNodeComponent("formSelect"),
    sendEnquiryForm: makeNodeComponent("sendEnquiryForm"),
    sendEnquiryForm2: makeNodeComponent("sendEnquiryForm2"),
    notes: makeNodeComponent("notes"),
    notesInput: makeNodeComponent("notesInput"),
    note: makeNodeComponent("note"),
    main: makeNodeComponent("main"),
    forms: makeNodeComponent("forms"),
    header9: makeNodeComponent("header9"),
    formLIstNewForm: makeNodeComponent("formLIstNewForm"),
    formList: makeNodeComponent("formList"),
    deleteForm2: makeNodeComponent("deleteForm2"),
    deleteForm3: makeNodeComponent("deleteForm3"),
    table: makeNodeComponent("table"),
    newForm: makeNodeComponent("newForm"),
    back2: makeNodeComponent("back2"),
    formTitle: makeNodeComponent("formTitle"),
    enquiryFormBuilder2: makeNodeComponent("enquiryFormBuilder2"),
    newField: makeNodeComponent("newField"),
    dropdown: makeNodeComponent("dropdown"),
    textarea: makeNodeComponent("textarea"),
    dateTimePicker2: makeNodeComponent("dateTimePicker2"),
    radioGroup5: makeNodeComponent("radioGroup5"),
    dateTimePicker3: makeNodeComponent("dateTimePicker3"),
    modal: makeNodeComponent("modal"),
    reviews: makeNodeComponent("reviews"),
    header8: makeNodeComponent("header8"),
    select: makeNodeComponent("select"),
    advertisements2: makeNodeComponent("advertisements2"),
    advertisement: makeNodeComponent("advertisement"),
    header17: makeNodeComponent("header17"),
    table2: makeNodeComponent("table2"),
    setAdvImg: makeNodeComponent("setAdvImg"),
    advImage: makeNodeComponent("advImage"),
    advPicture3: makeNodeComponent("advPicture3"),
    profilePicture4: makeNodeComponent("profilePicture4"),
    // Metadata about props expected for PlasmicDashboard
    internalVariantProps: PlasmicDashboard__VariantProps,
    internalArgProps: PlasmicDashboard__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Vendor Dashboard",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDashboard;
/* prettier-ignore-end */
