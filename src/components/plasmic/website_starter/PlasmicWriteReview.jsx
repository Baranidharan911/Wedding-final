// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: rvQK5WRNIb_K
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { AntdRate } from "@plasmicpkgs/antd5/skinny/registerRate";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import ButtonContainer from "../../ButtonContainer"; // plasmic-import: dK0EsHLm2W5O/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { useScreenVariants as useScreenVariantszapf5SksSeNd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ZAPF5sksSeNd/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicWriteReview.module.css"; // plasmic-import: rvQK5WRNIb_K/css

createPlasmicElementProxy;

export const PlasmicWriteReview__VariantProps = new Array();

export const PlasmicWriteReview__ArgProps = new Array(
  "vendor",
  "vendorId",
  "userId"
);

const $$ = {};

function PlasmicWriteReview__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          vendor: "Matisha Photography"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "quality.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "responsiveness2.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "professionalism2.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "value2.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "flexibility2.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "price.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "comment.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszapf5SksSeNd()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__ji7AQ
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return `Write a Review To ${$props.vendor}`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"main"}
        data-plasmic-override={overrides.main}
        hasGap={true}
        className={classNames(projectcss.all, sty.main)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"ratings"}
          data-plasmic-override={overrides.ratings}
          hasGap={true}
          className={classNames(projectcss.all, sty.ratings)}
        >
          <div
            data-plasmic-name={"qualityOfService"}
            data-plasmic-override={overrides.qualityOfService}
            className={classNames(projectcss.all, sty.qualityOfService)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__noGh9
              )}
            >
              {"Quality of service"}
            </div>
            <AntdRate
              data-plasmic-name={"quality"}
              data-plasmic-override={overrides.quality}
              className={classNames("__wab_instance", sty.quality)}
              onChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, ["quality", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
              symbols={
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__upOxV
                    )}
                  >
                    {"1"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ts7Tv
                    )}
                  >
                    {"2"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__an5Yi
                    )}
                  >
                    {"3"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__g4Bx
                    )}
                  >
                    {"4"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rJn2
                    )}
                  >
                    {"5"}
                  </div>
                </React.Fragment>
              }
              value={generateStateValueProp($state, ["quality", "value"])}
            />
          </div>
          <div
            data-plasmic-name={"responsiveness"}
            data-plasmic-override={overrides.responsiveness}
            className={classNames(projectcss.all, sty.responsiveness)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pgUh3
              )}
            >
              {"Responsiveness"}
            </div>
            <AntdRate
              data-plasmic-name={"responsiveness2"}
              data-plasmic-override={overrides.responsiveness2}
              className={classNames("__wab_instance", sty.responsiveness2)}
              onChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "responsiveness2",
                  "value"
                ]).apply(null, eventArgs);
              }}
              symbols={
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dIdN3
                    )}
                  >
                    {"1"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nSZs4
                    )}
                  >
                    {"2"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ugIyp
                    )}
                  >
                    {"3"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zcN1O
                    )}
                  >
                    {"4"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kjiLc
                    )}
                  >
                    {"5"}
                  </div>
                </React.Fragment>
              }
              value={generateStateValueProp($state, [
                "responsiveness2",
                "value"
              ])}
            />
          </div>
          <div
            data-plasmic-name={"professionalism"}
            data-plasmic-override={overrides.professionalism}
            className={classNames(projectcss.all, sty.professionalism)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1Jp3Y
              )}
            >
              {"Professionalism"}
            </div>
            <AntdRate
              data-plasmic-name={"professionalism2"}
              data-plasmic-override={overrides.professionalism2}
              className={classNames("__wab_instance", sty.professionalism2)}
              onChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "professionalism2",
                  "value"
                ]).apply(null, eventArgs);
              }}
              symbols={
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tQsZt
                    )}
                  >
                    {"1"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4DpD9
                    )}
                  >
                    {"2"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kpVb
                    )}
                  >
                    {"3"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x5UuI
                    )}
                  >
                    {"4"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__p62ZL
                    )}
                  >
                    {"5"}
                  </div>
                </React.Fragment>
              }
              value={generateStateValueProp($state, [
                "professionalism2",
                "value"
              ])}
            />
          </div>
          <div
            data-plasmic-name={"value"}
            data-plasmic-override={overrides.value}
            className={classNames(projectcss.all, sty.value)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__n5Mkn
              )}
            >
              {"Value"}
            </div>
            <AntdRate
              data-plasmic-name={"value2"}
              data-plasmic-override={overrides.value2}
              className={classNames("__wab_instance", sty.value2)}
              onChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, ["value2", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
              symbols={
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9FYeJ
                    )}
                  >
                    {"1"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gK2U9
                    )}
                  >
                    {"2"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bPeXg
                    )}
                  >
                    {"3"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0EPoS
                    )}
                  >
                    {"4"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lcuJu
                    )}
                  >
                    {"5"}
                  </div>
                </React.Fragment>
              }
              value={generateStateValueProp($state, ["value2", "value"])}
            />
          </div>
          <div
            data-plasmic-name={"flexibility"}
            data-plasmic-override={overrides.flexibility}
            className={classNames(projectcss.all, sty.flexibility)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wEi4S
              )}
            >
              {"Flexibility"}
            </div>
            <AntdRate
              data-plasmic-name={"flexibility2"}
              data-plasmic-override={overrides.flexibility2}
              className={classNames("__wab_instance", sty.flexibility2)}
              onChange={async (...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "flexibility2",
                  "value"
                ]).apply(null, eventArgs);
              }}
              symbols={
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zlf7F
                    )}
                  >
                    {"1"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kb4Eu
                    )}
                  >
                    {"2"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qcwK
                    )}
                  >
                    {"3"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cw0Ps
                    )}
                  >
                    {"4"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lrSno
                    )}
                  >
                    {"5"}
                  </div>
                </React.Fragment>
              }
              value={generateStateValueProp($state, ["flexibility2", "value"])}
            />
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"comments"}
          data-plasmic-override={overrides.comments}
          hasGap={true}
          className={classNames(projectcss.all, sty.comments)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__uJ5MI)}>
            {(() => {
              const child$Props = {
                bordered: false,
                className: classNames("__wab_instance", sty.price),
                disabled: false,
                onChange: async (...eventArgs) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["price", "value"],
                    AntdInput_Helpers
                  ).apply(null, eventArgs);
                },
                placeholder: "How much did you spend on this vendor?",
                value: generateStateValueProp($state, ["price", "value"])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "price.value"
                  }
                ],

                [],
                AntdInput_Helpers ?? {},
                child$Props
              );
              return (
                <AntdInput
                  data-plasmic-name={"price"}
                  data-plasmic-override={overrides.price}
                  {...child$Props}
                />
              );
            })()}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__yoxwt)}>
            <textarea
              data-plasmic-name={"comment"}
              data-plasmic-override={overrides.comment}
              className={classNames(
                projectcss.all,
                projectcss.textarea,
                sty.comment
              )}
              onChange={async (...eventArgs) => {
                (e => {
                  generateStateOnChangeProp($state, ["comment", "value"])(
                    e.target.value
                  );
                }).apply(null, eventArgs);
              }}
              placeholder={"Tell us about your experience..."}
              ref={ref => {
                $refs["comment"] = ref;
              }}
              value={generateStateValueProp($state, ["comment", "value"]) ?? ""}
            />
          </div>
        </Stack__>
      </Stack__>
      <div
        data-plasmic-name={"buttons"}
        data-plasmic-override={overrides.buttons}
        className={classNames(projectcss.all, sty.buttons)}
      >
        <ButtonContainer
          data-plasmic-name={"buttonContainer"}
          data-plasmic-override={overrides.buttonContainer}
          className={classNames("__wab_instance", sty.buttonContainer)}
        >
          <AntdButton
            data-plasmic-name={"submit"}
            data-plasmic-override={overrides.submit}
            className={classNames("__wab_instance", sty.submit)}
            type={"ghost"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__o1VIp
              )}
            >
              {"Submit Review"}
            </div>
          </AntdButton>
        </ButtonContainer>
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "main",
    "ratings",
    "qualityOfService",
    "quality",
    "responsiveness",
    "responsiveness2",
    "professionalism",
    "professionalism2",
    "value",
    "value2",
    "flexibility",
    "flexibility2",
    "comments",
    "price",
    "comment",
    "buttons",
    "buttonContainer",
    "submit"
  ],

  main: [
    "main",
    "ratings",
    "qualityOfService",
    "quality",
    "responsiveness",
    "responsiveness2",
    "professionalism",
    "professionalism2",
    "value",
    "value2",
    "flexibility",
    "flexibility2",
    "comments",
    "price",
    "comment"
  ],

  ratings: [
    "ratings",
    "qualityOfService",
    "quality",
    "responsiveness",
    "responsiveness2",
    "professionalism",
    "professionalism2",
    "value",
    "value2",
    "flexibility",
    "flexibility2"
  ],

  qualityOfService: ["qualityOfService", "quality"],
  quality: ["quality"],
  responsiveness: ["responsiveness", "responsiveness2"],
  responsiveness2: ["responsiveness2"],
  professionalism: ["professionalism", "professionalism2"],
  professionalism2: ["professionalism2"],
  value: ["value", "value2"],
  value2: ["value2"],
  flexibility: ["flexibility", "flexibility2"],
  flexibility2: ["flexibility2"],
  comments: ["comments", "price", "comment"],
  price: ["price"],
  comment: ["comment"],
  buttons: ["buttons", "buttonContainer", "submit"],
  buttonContainer: ["buttonContainer", "submit"],
  submit: ["submit"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWriteReview__ArgProps,
          internalVariantPropNames: PlasmicWriteReview__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWriteReview__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWriteReview";
  } else {
    func.displayName = `PlasmicWriteReview.${nodeName}`;
  }
  return func;
}

export const PlasmicWriteReview = Object.assign(
  // Top-level PlasmicWriteReview renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    main: makeNodeComponent("main"),
    ratings: makeNodeComponent("ratings"),
    qualityOfService: makeNodeComponent("qualityOfService"),
    quality: makeNodeComponent("quality"),
    responsiveness: makeNodeComponent("responsiveness"),
    responsiveness2: makeNodeComponent("responsiveness2"),
    professionalism: makeNodeComponent("professionalism"),
    professionalism2: makeNodeComponent("professionalism2"),
    value: makeNodeComponent("value"),
    value2: makeNodeComponent("value2"),
    flexibility: makeNodeComponent("flexibility"),
    flexibility2: makeNodeComponent("flexibility2"),
    comments: makeNodeComponent("comments"),
    price: makeNodeComponent("price"),
    comment: makeNodeComponent("comment"),
    buttons: makeNodeComponent("buttons"),
    buttonContainer: makeNodeComponent("buttonContainer"),
    submit: makeNodeComponent("submit"),
    // Metadata about props expected for PlasmicWriteReview
    internalVariantProps: PlasmicWriteReview__VariantProps,
    internalArgProps: PlasmicWriteReview__ArgProps
  }
);

export default PlasmicWriteReview;
/* prettier-ignore-end */
