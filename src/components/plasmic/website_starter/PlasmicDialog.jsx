// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: h2KgIVIqaGRq
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  renderPlasmicSlot,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { Dialog } from "@plasmicpkgs/radix-ui";
import Button2 from "../../Button2"; // plasmic-import: x0IYxFtlqF54/component
import { DialogContent } from "@plasmicpkgs/radix-ui";
import { DialogTitle } from "@plasmicpkgs/radix-ui";
import { DialogClose } from "@plasmicpkgs/radix-ui";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicDialog.module.css"; // plasmic-import: h2KgIVIqaGRq/css

createPlasmicElementProxy;

export const PlasmicDialog__VariantProps = new Array("noTrigger");

export const PlasmicDialog__ArgProps = new Array("slot", "children", "body");

const $$ = {};

function PlasmicDialog__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "noTrigger",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noTrigger
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootnoTrigger_unnamedVariant]: hasVariant(
            $state,
            "noTrigger",
            "unnamedVariant"
          )
        }
      )}
    >
      <Dialog
        data-plasmic-name={"dialog"}
        data-plasmic-override={overrides.dialog}
        className={classNames("__wab_instance", sty.dialog, {
          [sty.dialognoTrigger_unnamedVariant]: hasVariant(
            $state,
            "noTrigger",
            "unnamedVariant"
          )
        })}
        defaultOpen={true}
        onOpenChange={async (...eventArgs) => {
          generateStateOnChangeProp($state, ["dialog", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["dialog", "open"])}
        overlayClassName={classNames({ [sty["pcls_t6_fXUfHsbvp"]]: true })}
        themeResetClass={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
        triggerSlot={
          (hasVariant($state, "noTrigger", "unnamedVariant") ? false : true)
            ? renderPlasmicSlot({
                defaultContents: (
                  <Button2>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iasZm
                      )}
                    >
                      {"Show dialog"}
                    </div>
                  </Button2>
                ),

                value: args.slot
              })
            : null
        }
      >
        <DialogContent
          data-plasmic-name={"dialogContent"}
          data-plasmic-override={overrides.dialogContent}
          className={classNames("__wab_instance", sty.dialogContent, {
            [sty.dialogContentnoTrigger_unnamedVariant]: hasVariant(
              $state,
              "noTrigger",
              "unnamedVariant"
            )
          })}
          themeResetClass={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___0TsG)}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__jIlYl, {
                [sty.freeBoxnoTrigger_unnamedVariant__jIlYll5D9X]: hasVariant(
                  $state,
                  "noTrigger",
                  "unnamedVariant"
                )
              })}
            >
              <DialogTitle
                data-plasmic-name={"dialogTitle"}
                data-plasmic-override={overrides.dialogTitle}
                className={classNames("__wab_instance", sty.dialogTitle)}
              >
                <h5
                  data-plasmic-name={"h5"}
                  data-plasmic-override={overrides.h5}
                  className={classNames(projectcss.all, projectcss.h5, sty.h5)}
                >
                  {renderPlasmicSlot({
                    defaultContents: "Dialog title",
                    value: args.children,
                    className: classNames(sty.slotTargetChildren)
                  })}
                </h5>
              </DialogTitle>
              {renderPlasmicSlot({
                defaultContents: (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__xtduc)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6C4KP
                      )}
                    >
                      {"You can insert dialog body content here in this slot."}
                    </div>
                  </Stack__>
                ),

                value: args.body
              })}
            </div>
          </Stack__>
          <DialogClose
            data-plasmic-name={"dialogClose"}
            data-plasmic-override={overrides.dialogClose}
            className={classNames("__wab_instance", sty.dialogClose)}
          />
        </DialogContent>
      </Dialog>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "dialog", "dialogContent", "dialogTitle", "h5", "dialogClose"],
  dialog: ["dialog", "dialogContent", "dialogTitle", "h5", "dialogClose"],
  dialogContent: ["dialogContent", "dialogTitle", "h5", "dialogClose"],
  dialogTitle: ["dialogTitle", "h5"],
  h5: ["h5"],
  dialogClose: ["dialogClose"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDialog__ArgProps,
          internalVariantPropNames: PlasmicDialog__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDialog__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDialog";
  } else {
    func.displayName = `PlasmicDialog.${nodeName}`;
  }
  return func;
}

export const PlasmicDialog = Object.assign(
  // Top-level PlasmicDialog renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dialog: makeNodeComponent("dialog"),
    dialogContent: makeNodeComponent("dialogContent"),
    dialogTitle: makeNodeComponent("dialogTitle"),
    h5: makeNodeComponent("h5"),
    dialogClose: makeNodeComponent("dialogClose"),
    // Metadata about props expected for PlasmicDialog
    internalVariantProps: PlasmicDialog__VariantProps,
    internalArgProps: PlasmicDialog__ArgProps
  }
);

export default PlasmicDialog;
/* prettier-ignore-end */
