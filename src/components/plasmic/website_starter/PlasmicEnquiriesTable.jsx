// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: UmV5lLj7q0il
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import Spinner from "../../Spinner"; // plasmic-import: mr_E4LUxuhwI/component
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdPagination } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { paginationHelpers as AntdPagination_Helpers } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import EnquiryForm from "../../EnquiryForm"; // plasmic-import: o-FKpOvt35MV/component
import { useScreenVariants as useScreenVariantszapf5SksSeNd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ZAPF5sksSeNd/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicEnquiriesTable.module.css"; // plasmic-import: UmV5lLj7q0il/css
import MessageCircleOutline11SvgIcon from "./icons/PlasmicIcon__MessageCircleOutline11Svg"; // plasmic-import: sllr-OTBNEwF/icon
import Trash2Outline1SvgIcon from "./icons/PlasmicIcon__Trash2Outline1Svg"; // plasmic-import: oF73jogW9n41/icon
import CheckCircleSvgrepoComSvgIcon from "./icons/PlasmicIcon__CheckCircleSvgrepoComSvg"; // plasmic-import: DuhYsSUMBDaK/icon
import BackSvgrepoComSvgIcon from "./icons/PlasmicIcon__BackSvgrepoComSvg"; // plasmic-import: wpYSXM7SC3NG/icon

createPlasmicElementProxy;

export const PlasmicEnquiriesTable__VariantProps = new Array("recent");

export const PlasmicEnquiriesTable__ArgProps = new Array("type", "vendorId");

const $$ = {};

function PlasmicEnquiriesTable__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "pagination.currentPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1,
        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "pagination.pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 20,
        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "pagination.startIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "pagination.endIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      },
      {
        path: "pagination2.currentPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1,
        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "pagination2.pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 20,
        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "pagination2.startIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "pagination2.endIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "currentEnquiry",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "recent",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.recent
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszapf5SksSeNd()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootrecent]: hasVariant($state, "recent", "recent") }
      )}
    >
      <TabsContainer
        data-plasmic-name={"tabsContainer"}
        data-plasmic-override={overrides.tabsContainer}
        initialKey={"inbox"}
        previewAll={false}
        previewKey={"inbox"}
      >
        <DataCtxReader__>
          {$ctx => (
            <div className={classNames(projectcss.all, sty.freeBox___1Ldbq)}>
              <TabContent
                data-plasmic-name={"inbox"}
                data-plasmic-override={overrides.inbox}
                className={classNames("__wab_instance", sty.inbox)}
                tabKey={"inbox"}
              >
                {(hasVariant($state, "recent", "recent") ? false : true) ? (
                  <Fetcher
                    data-plasmic-name={"enquiries"}
                    data-plasmic-override={overrides.enquiries}
                    dataOp={{
                      sourceId: "bvg9JqrXbdUtvMXZbC26cd",
                      opId: "07c242f7-ab9f-432d-916e-27c4af1d2822",
                      userArgs: {},
                      cacheKey: `plasmic.$.UBqT4spwr5Zd.$.07c242f7-ab9f-432d-916e-27c4af1d2822.$.`,
                      invalidatedKeys: null,
                      roleId: null
                    }}
                    name={"enquiriesInfo"}
                    queries={{}}
                  >
                    {$queries => (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.enquiriesInfo.isLoading;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Spinner
                            className={classNames(
                              "__wab_instance",
                              sty.spinner__dZo8F
                            )}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return !$queries.enquiriesInfo.isLoading;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"grid"}
                            data-plasmic-override={overrides.grid}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.grid)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column___79Zwo
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__f7AuA
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__eqJre
                                  )}
                                >
                                  {"Client Name"}
                                </div>
                              </div>
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.enquiriesInfo.data.response.data.enquiries.data.map(
                                      item => item.attributes
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__octai
                                    )}
                                    key={currentIndex}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__tqZLx
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem
                                              .users_permissions_user.data
                                              .attributes.username;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Client Name";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__yBvCj
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___683DP
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__khGii
                                  )}
                                >
                                  {"Event Date"}
                                </div>
                              </div>
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.enquiriesInfo.data.response.data.enquiries.data.map(
                                      item => item.attributes
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__pLAk
                                    )}
                                    key={currentIndex}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__frv6U
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return new Date(
                                              currentItem.Date
                                            ).toLocaleDateString("en-US", {
                                              year: "numeric",
                                              month: "long",
                                              day: "numeric"
                                            });
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Event Date";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column___3TpiU
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__bI59B
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__iuezv
                                  )}
                                >
                                  {"Budget"}
                                </div>
                              </div>
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.enquiriesInfo.data.response.data.enquiries.data.map(
                                      item => item.attributes
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__tDBl
                                    )}
                                    key={currentIndex}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__crhG
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.Budget;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Event Type";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__yaDxr
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__fXQtR
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__dryob
                                  )}
                                >
                                  {"Event Location"}
                                </div>
                              </div>
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.enquiriesInfo.data.response.data.enquiries.data.map(
                                      item => item.attributes
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__ePzO
                                    )}
                                    key={currentIndex}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__gHJgI
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem?.location
                                              ?.Location;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Event Location";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__iiXFg
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__szqka
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__iZlmT
                                  )}
                                >
                                  {"Action"}
                                </div>
                              </div>
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.enquiriesInfo.data.response.data.enquiries.data.map(
                                      item => {
                                        return {
                                          id: item.id,
                                          ...item.attributes
                                        };
                                      }
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__t5Mbd
                                    )}
                                    key={currentIndex}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__wYtm1
                                      )}
                                    >
                                      {(() => {
                                        try {
                                          return (
                                            currentItem.Status !== "Lead" &&
                                            currentItem.Status !== "Discarded"
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox___1B0Ew
                                          )}
                                        >
                                          <TabButton
                                            data-plasmic-name={"enquiryButton"}
                                            data-plasmic-override={
                                              overrides.enquiryButton
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.enquiryButton
                                            )}
                                            tabKey={"enquiry"}
                                          >
                                            <AntdButton
                                              data-plasmic-name={"message"}
                                              data-plasmic-override={
                                                overrides.message
                                              }
                                              className={classNames(
                                                "__wab_instance",
                                                sty.message
                                              )}
                                              size={"small"}
                                              type={"ghost"}
                                            >
                                              <MessageCircleOutline11SvgIcon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg__i0KWc
                                                )}
                                                role={"img"}
                                              />
                                            </AntdButton>
                                          </TabButton>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return (
                                            currentItem.Status !== "Discarded"
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox___4MdNs
                                          )}
                                        >
                                          <AntdButton
                                            data-plasmic-name={"discard"}
                                            data-plasmic-override={
                                              overrides.discard
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.discard
                                            )}
                                            size={"small"}
                                            type={"ghost"}
                                          >
                                            <Trash2Outline1SvgIcon
                                              className={classNames(
                                                projectcss.all,
                                                sty.svg__rfiFw
                                              )}
                                              role={"img"}
                                            />
                                          </AntdButton>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.Status === "Lead";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__r2Sqb
                                          )}
                                        >
                                          <AntdButton
                                            data-plasmic-name={"accept"}
                                            data-plasmic-override={
                                              overrides.accept
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.accept
                                            )}
                                            size={"small"}
                                            type={"ghost"}
                                          >
                                            <CheckCircleSvgrepoComSvgIcon
                                              className={classNames(
                                                projectcss.all,
                                                sty.svg___0PLzv
                                              )}
                                              role={"img"}
                                            />
                                          </AntdButton>
                                        </div>
                                      ) : null}
                                    </Stack__>
                                  </div>
                                );
                              })}
                            </div>
                          </Stack__>
                        ) : null}
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.pagination
                            ),
                            current: generateStateValueProp($state, [
                              "pagination",
                              "currentPage"
                            ]),
                            defaultCurrent: 1,
                            defaultPageSize: 20,
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "currentPage",
                                ["pagination", "currentPage"],
                                AntdPagination_Helpers
                              ).apply(null, eventArgs);
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "startIndex",
                                ["pagination", "startIndex"],
                                AntdPagination_Helpers
                              ).apply(null, eventArgs);
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "endIndex",
                                ["pagination", "endIndex"],
                                AntdPagination_Helpers
                              ).apply(null, eventArgs);
                            },
                            onShowSizeChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "pageSize",
                                ["pagination", "pageSize"],
                                AntdPagination_Helpers
                              ).apply(null, eventArgs);
                            },
                            pageSize: generateStateValueProp($state, [
                              "pagination",
                              "pageSize"
                            ]),
                            pageSizeOptions: [
                              { pageSize: 10 },
                              { pageSize: 20 },
                              { pageSize: 50 },
                              { pageSize: 100 }
                            ],

                            total: hasVariant(
                              globalVariants,
                              "screen",
                              "mobileOnly"
                            )
                              ? (() => {
                                  try {
                                    return $queries.enquiriesInfo.data.response
                                      .data.enquiries.meta.pagination.total;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              : undefined
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "currentPage",
                                plasmicStateName: "pagination.currentPage"
                              },
                              {
                                name: "pageSize",
                                plasmicStateName: "pagination.pageSize"
                              },
                              {
                                name: "startIndex",
                                plasmicStateName: "pagination.startIndex"
                              },
                              {
                                name: "endIndex",
                                plasmicStateName: "pagination.endIndex"
                              }
                            ],

                            [],
                            AntdPagination_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdPagination
                              data-plasmic-name={"pagination"}
                              data-plasmic-override={overrides.pagination}
                              {...child$Props}
                            />
                          );
                        })()}
                      </React.Fragment>
                    )}
                  </Fetcher>
                ) : null}
                {(hasVariant($state, "recent", "recent") ? true : false) ? (
                  <Fetcher
                    data-plasmic-name={"enquiries2"}
                    data-plasmic-override={overrides.enquiries2}
                    dataOp={{
                      sourceId: "bvg9JqrXbdUtvMXZbC26cd",
                      opId: "a4a00bd9-efaa-4133-b048-6ffa647bffca",
                      userArgs: {},
                      cacheKey: `plasmic.$.FtvVabfp4bpq.$.a4a00bd9-efaa-4133-b048-6ffa647bffca.$.`,
                      invalidatedKeys: null,
                      roleId: null
                    }}
                    name={"enquiriesInfo"}
                    queries={{}}
                  >
                    {$queries => (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.enquiriesInfo.isLoading;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Spinner
                            className={classNames(
                              "__wab_instance",
                              sty.spinner___5NFyu
                            )}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return !$queries.enquiriesInfo.isLoading;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"grid2"}
                            data-plasmic-override={overrides.grid2}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.grid2)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__mSeaa
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___9DjEw
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__oDx1C
                                  )}
                                >
                                  {"Client Name"}
                                </div>
                              </div>
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.enquiriesInfo.data.response.data.enquiries.data.map(
                                      item => item.attributes
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__j2Yqf
                                    )}
                                    key={currentIndex}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___93Bt4
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem
                                              .users_permissions_user.data
                                              .attributes.username;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Client Name";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__aAKg
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__uIb1T
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___1Zykd
                                  )}
                                >
                                  {"Event Date"}
                                </div>
                              </div>
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.enquiriesInfo.data.response.data.enquiries.data.map(
                                      item => item.attributes
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__xrA0X
                                    )}
                                    key={currentIndex}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__nNbPj
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return new Date(
                                              currentItem.Date
                                            ).toLocaleDateString("en-US", {
                                              year: "numeric",
                                              month: "long",
                                              day: "numeric"
                                            });
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Event Date";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__cXfyf
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__yqJws
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__l9Xho
                                  )}
                                >
                                  {"Budget"}
                                </div>
                              </div>
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.enquiriesInfo.data.response.data.enquiries.data.map(
                                      item => item.attributes
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__fGv
                                    )}
                                    key={currentIndex}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___9NaT
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.Budget;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Event Type";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__fuAj
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__lNjOl
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__gs7Zf
                                  )}
                                >
                                  {"Event Location"}
                                </div>
                              </div>
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.enquiriesInfo.data.response.data.enquiries.data.map(
                                      item => item.attributes
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__joWMb
                                    )}
                                    key={currentIndex}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__rUPfH
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem?.location
                                              ?.Location;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Event Location";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__bleM6
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__yL6Is
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___02ZE
                                  )}
                                >
                                  {"Action"}
                                </div>
                              </div>
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.enquiriesInfo.data.response.data.enquiries.data.map(
                                      item => {
                                        return {
                                          id: item.id,
                                          ...item.attributes
                                        };
                                      }
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__usMkg
                                    )}
                                    key={currentIndex}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__epi4I
                                      )}
                                    >
                                      {(() => {
                                        try {
                                          return (
                                            currentItem.Status !== "Lead" &&
                                            currentItem.Status !== "Discarded"
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__frvA
                                          )}
                                        >
                                          <TabButton
                                            data-plasmic-name={"enquiryButton2"}
                                            data-plasmic-override={
                                              overrides.enquiryButton2
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.enquiryButton2
                                            )}
                                            tabKey={"enquiry"}
                                          >
                                            <AntdButton
                                              data-plasmic-name={"message2"}
                                              data-plasmic-override={
                                                overrides.message2
                                              }
                                              className={classNames(
                                                "__wab_instance",
                                                sty.message2
                                              )}
                                              size={"small"}
                                              type={"ghost"}
                                            >
                                              <MessageCircleOutline11SvgIcon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg__un20Z
                                                )}
                                                role={"img"}
                                              />
                                            </AntdButton>
                                          </TabButton>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return (
                                            currentItem.Status !== "Discarded"
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__iVx7
                                          )}
                                        >
                                          <AntdButton
                                            data-plasmic-name={"discard2"}
                                            data-plasmic-override={
                                              overrides.discard2
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.discard2
                                            )}
                                            size={"small"}
                                            type={"ghost"}
                                          >
                                            <Trash2Outline1SvgIcon
                                              className={classNames(
                                                projectcss.all,
                                                sty.svg__novak
                                              )}
                                              role={"img"}
                                            />
                                          </AntdButton>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return currentItem.Status === "Lead";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__uXo9K
                                          )}
                                        >
                                          <AntdButton
                                            data-plasmic-name={"accept2"}
                                            data-plasmic-override={
                                              overrides.accept2
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.accept2
                                            )}
                                            size={"small"}
                                            type={"ghost"}
                                          >
                                            <CheckCircleSvgrepoComSvgIcon
                                              className={classNames(
                                                projectcss.all,
                                                sty.svg__rpQo
                                              )}
                                              role={"img"}
                                            />
                                          </AntdButton>
                                        </div>
                                      ) : null}
                                    </Stack__>
                                  </div>
                                );
                              })}
                            </div>
                          </Stack__>
                        ) : null}
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.pagination2
                            ),
                            current: generateStateValueProp($state, [
                              "pagination2",
                              "currentPage"
                            ]),
                            defaultCurrent: 1,
                            defaultPageSize: 20,
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "currentPage",
                                ["pagination2", "currentPage"],
                                AntdPagination_Helpers
                              ).apply(null, eventArgs);
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "startIndex",
                                ["pagination2", "startIndex"],
                                AntdPagination_Helpers
                              ).apply(null, eventArgs);
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "endIndex",
                                ["pagination2", "endIndex"],
                                AntdPagination_Helpers
                              ).apply(null, eventArgs);
                            },
                            onShowSizeChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "pageSize",
                                ["pagination2", "pageSize"],
                                AntdPagination_Helpers
                              ).apply(null, eventArgs);
                            },
                            pageSize: generateStateValueProp($state, [
                              "pagination2",
                              "pageSize"
                            ]),
                            pageSizeOptions: [
                              { pageSize: 10 },
                              { pageSize: 20 },
                              { pageSize: 50 },
                              { pageSize: 100 }
                            ]
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "currentPage",
                                plasmicStateName: "pagination2.currentPage"
                              },
                              {
                                name: "pageSize",
                                plasmicStateName: "pagination2.pageSize"
                              },
                              {
                                name: "startIndex",
                                plasmicStateName: "pagination2.startIndex"
                              },
                              {
                                name: "endIndex",
                                plasmicStateName: "pagination2.endIndex"
                              }
                            ],

                            [],
                            AntdPagination_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdPagination
                              data-plasmic-name={"pagination2"}
                              data-plasmic-override={overrides.pagination2}
                              {...child$Props}
                            />
                          );
                        })()}
                      </React.Fragment>
                    )}
                  </Fetcher>
                ) : null}
              </TabContent>
              <TabContent
                data-plasmic-name={"enquiry"}
                data-plasmic-override={overrides.enquiry}
                className={classNames("__wab_instance", sty.enquiry)}
                tabKey={"enquiry"}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lq3S9)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__d7N7J)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__lUa89)}
                    >
                      <TabButton
                        data-plasmic-name={"back"}
                        data-plasmic-override={overrides.back}
                        className={classNames("__wab_instance", sty.back)}
                        tabKey={"inbox"}
                      >
                        <AntdButton
                          data-plasmic-name={"button"}
                          data-plasmic-override={overrides.button}
                          className={classNames("__wab_instance", sty.button)}
                          danger={true}
                          size={"small"}
                          type={"primary"}
                        >
                          <BackSvgrepoComSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__eeIjk
                            )}
                            role={"img"}
                          />
                        </AntdButton>
                      </TabButton>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rBpmK
                        )}
                      >
                        {""}
                      </div>
                    </Stack__>
                    <AntdSelect
                      data-plasmic-name={"select"}
                      data-plasmic-override={overrides.select}
                      bordered={false}
                      className={classNames("__wab_instance", sty.select)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      disabled={true}
                      onChange={async (...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "select",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      options={(() => {
                        try {
                          return [
                            "Lead",
                            "Prospect",
                            "Follow Up",
                            "Conversion",
                            "Discarded"
                          ].map(item => ({ label: item, value: item }));
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [
                              {
                                value: "option1",
                                label: "Option 1",
                                type: "option"
                              },
                              {
                                value: "option2",
                                label: "Option 2",
                                type: "option"
                              }
                            ];
                          }
                          throw e;
                        }
                      })()}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hgJBi
                          )}
                        >
                          {"Status"}
                        </div>
                      }
                      popupScopeClassName={sty["select__popup"]}
                      value={generateStateValueProp($state, [
                        "select",
                        "value"
                      ])}
                    />
                  </div>
                  <EnquiryForm
                    data-plasmic-name={"enquiryForm"}
                    data-plasmic-override={overrides.enquiryForm}
                    className={classNames("__wab_instance", sty.enquiryForm)}
                  />
                </Stack__>
              </TabContent>
            </div>
          )}
        </DataCtxReader__>
      </TabsContainer>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "tabsContainer",
    "inbox",
    "enquiries",
    "grid",
    "enquiryButton",
    "message",
    "discard",
    "accept",
    "pagination",
    "enquiries2",
    "grid2",
    "enquiryButton2",
    "message2",
    "discard2",
    "accept2",
    "pagination2",
    "enquiry",
    "back",
    "button",
    "select",
    "enquiryForm"
  ],

  tabsContainer: [
    "tabsContainer",
    "inbox",
    "enquiries",
    "grid",
    "enquiryButton",
    "message",
    "discard",
    "accept",
    "pagination",
    "enquiries2",
    "grid2",
    "enquiryButton2",
    "message2",
    "discard2",
    "accept2",
    "pagination2",
    "enquiry",
    "back",
    "button",
    "select",
    "enquiryForm"
  ],

  inbox: [
    "inbox",
    "enquiries",
    "grid",
    "enquiryButton",
    "message",
    "discard",
    "accept",
    "pagination",
    "enquiries2",
    "grid2",
    "enquiryButton2",
    "message2",
    "discard2",
    "accept2",
    "pagination2"
  ],

  enquiries: [
    "enquiries",
    "grid",
    "enquiryButton",
    "message",
    "discard",
    "accept",
    "pagination"
  ],

  grid: ["grid", "enquiryButton", "message", "discard", "accept"],
  enquiryButton: ["enquiryButton", "message"],
  message: ["message"],
  discard: ["discard"],
  accept: ["accept"],
  pagination: ["pagination"],
  enquiries2: [
    "enquiries2",
    "grid2",
    "enquiryButton2",
    "message2",
    "discard2",
    "accept2",
    "pagination2"
  ],

  grid2: ["grid2", "enquiryButton2", "message2", "discard2", "accept2"],
  enquiryButton2: ["enquiryButton2", "message2"],
  message2: ["message2"],
  discard2: ["discard2"],
  accept2: ["accept2"],
  pagination2: ["pagination2"],
  enquiry: ["enquiry", "back", "button", "select", "enquiryForm"],
  back: ["back", "button"],
  button: ["button"],
  select: ["select"],
  enquiryForm: ["enquiryForm"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEnquiriesTable__ArgProps,
          internalVariantPropNames: PlasmicEnquiriesTable__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEnquiriesTable__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEnquiriesTable";
  } else {
    func.displayName = `PlasmicEnquiriesTable.${nodeName}`;
  }
  return func;
}

export const PlasmicEnquiriesTable = Object.assign(
  // Top-level PlasmicEnquiriesTable renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tabsContainer: makeNodeComponent("tabsContainer"),
    inbox: makeNodeComponent("inbox"),
    enquiries: makeNodeComponent("enquiries"),
    grid: makeNodeComponent("grid"),
    enquiryButton: makeNodeComponent("enquiryButton"),
    message: makeNodeComponent("message"),
    discard: makeNodeComponent("discard"),
    accept: makeNodeComponent("accept"),
    pagination: makeNodeComponent("pagination"),
    enquiries2: makeNodeComponent("enquiries2"),
    grid2: makeNodeComponent("grid2"),
    enquiryButton2: makeNodeComponent("enquiryButton2"),
    message2: makeNodeComponent("message2"),
    discard2: makeNodeComponent("discard2"),
    accept2: makeNodeComponent("accept2"),
    pagination2: makeNodeComponent("pagination2"),
    enquiry: makeNodeComponent("enquiry"),
    back: makeNodeComponent("back"),
    button: makeNodeComponent("button"),
    select: makeNodeComponent("select"),
    enquiryForm: makeNodeComponent("enquiryForm"),
    // Metadata about props expected for PlasmicEnquiriesTable
    internalVariantProps: PlasmicEnquiriesTable__VariantProps,
    internalArgProps: PlasmicEnquiriesTable__ArgProps
  }
);

export default PlasmicEnquiriesTable;
/* prettier-ignore-end */
