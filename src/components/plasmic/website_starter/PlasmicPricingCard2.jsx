// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: Nk9988jZi8WG
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv, useGlobalActions } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import ButtonContainer from "../../ButtonContainer"; // plasmic-import: dK0EsHLm2W5O/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Prompt from "../../Prompt"; // plasmic-import: j21kCiisYxeO/component
import { useScreenVariants as useScreenVariantszapf5SksSeNd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ZAPF5sksSeNd/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicPricingCard2.module.css"; // plasmic-import: Nk9988jZi8WG/css
import CheckCircleSvgrepoComSvgIcon from "./icons/PlasmicIcon__CheckCircleSvgrepoComSvg"; // plasmic-import: DuhYsSUMBDaK/icon

createPlasmicElementProxy;

export const PlasmicPricingCard2__VariantProps = new Array("highlight");

export const PlasmicPricingCard2__ArgProps = new Array(
  "features",
  "title",
  "price",
  "description2",
  "phone",
  "userId",
  "storeId",
  "serviceId"
);

const $$ = {};

function PlasmicPricingCard2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          features: [
            "6-hour coverage.",
            "Edited online image gallery.",
            "5-minute highlight video.",
            "Additional custom."
          ],

          title: "Elegant Moments",
          price: 20000,
          description2:
            "Six hours of coverage, professional photography, videography, highlight video.",
          phone: "9876543210"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const $globalActions = useGlobalActions?.();
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "highlight",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.highlight
      },
      {
        path: "requestPricing.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "enquiryForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "enquiryForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "enquiryForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "enquiryForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "dateTimePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "textArea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszapf5SksSeNd()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"card"}
      data-plasmic-override={overrides.card}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.card
      )}
    >
      <div
        data-plasmic-name={"info"}
        data-plasmic-override={overrides.info}
        className={classNames(projectcss.all, sty.info)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__y4VWh,
            {
              [sty.texthighlight__y4VWhZahNu]: hasVariant(
                $state,
                "highlight",
                "highlight"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.title;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Elegant Moments";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__mRyeO
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return "INR " + Intl.NumberFormat("en-IN").format($props.price);
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "INR 20,000";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__qdBpX
          )}
        >
          {"Per Day"}
        </div>
      </div>
      <div
        data-plasmic-name={"description"}
        data-plasmic-override={overrides.description}
        className={classNames(projectcss.all, sty.description)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__nasqx
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.description2;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Six hours of coverage, professional photography, videography, highlight video.";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"list"}
        data-plasmic-override={overrides.list}
        hasGap={true}
        className={classNames(projectcss.all, sty.list)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.features;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <Stack__
              as={"div"}
              data-plasmic-name={"listItem"}
              data-plasmic-override={overrides.listItem}
              hasGap={true}
              className={classNames(projectcss.all, sty.listItem)}
              key={currentIndex}
            >
              <CheckCircleSvgrepoComSvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fFyh0
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return currentItem;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "6-hour coverage.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
          );
        })}
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"contact"}
        data-plasmic-override={overrides.contact}
        hasGap={true}
        className={classNames(projectcss.all, sty.contact)}
      >
        <AntdModal
          data-plasmic-name={"requestPricing"}
          data-plasmic-override={overrides.requestPricing}
          className={classNames("__wab_instance", sty.requestPricing)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          hideFooter={true}
          modalContentClassName={classNames({
            [sty["pcls_tstDPrA7mTkI"]]: true
          })}
          modalScopeClassName={sty["requestPricing__modal"]}
          onOpenChange={async (...eventArgs) => {
            generateStateOnChangeProp($state, ["requestPricing", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["requestPricing", "open"])}
          title={
            <React.Fragment>
              {(() => {
                try {
                  return `Enquiry Form`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Modal title";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          }
          trigger={
            <ButtonContainer
              className={classNames(
                "__wab_instance",
                sty.buttonContainer___5Cs4Z
              )}
            >
              <AntdButton
                className={classNames("__wab_instance", sty.button__mhOx1)}
                type={"ghost"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__giNCa
                  )}
                >
                  {"Request Pricing"}
                </div>
              </AntdButton>
            </ButtonContainer>
          }
          wrapClassName={classNames({ [sty["pcls_OhF7DORrGaiX"]]: true })}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            {(() => {
              try {
                return $props.userId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
              ? (() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.enquiryForm),
                    extendedOnValuesChange: async (...eventArgs) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["enquiryForm", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],

                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};
                      $steps["useIntegration"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "bvg9JqrXbdUtvMXZbC26cd",
                                opId: "6cc62005-8f0d-4872-a6d5-d91e40908b63",
                                userArgs: {
                                  variables: [
                                    $state.enquiryForm.value.message,
                                    parseInt($state.enquiryForm.value.budget),
                                    $state.enquiryForm.value?.date.split(
                                      "T"
                                    )[0],
                                    {
                                      Location:
                                        $state.enquiryForm.value.location
                                    },
                                    $props.serviceId,
                                    $props.storeId,
                                    $props.userId
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              },
                              continueOnError: true
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["useIntegration"] != null &&
                        typeof $steps["useIntegration"] === "object" &&
                        typeof $steps["useIntegration"].then === "function"
                      ) {
                        $steps["useIntegration"] = await $steps[
                          "useIntegration"
                        ];
                      }
                      $steps["invokeGlobalAction"] = !$steps.graphqlMutation
                        ?.data?.response?.errors
                        ? (() => {
                            const actionArgs = {
                              args: ["success", "Enquiry Sent!"]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                      $steps["invokeGlobalAction2"] = $steps.graphqlMutation
                        ?.data?.response?.errors
                        ? (() => {
                            const actionArgs = {
                              args: ["error", "Enquiry Failed! Try again!"]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }
                      $steps["updateRequestPricingOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["requestPricing", "open"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateRequestPricingOpen"] != null &&
                        typeof $steps["updateRequestPricingOpen"] ===
                          "object" &&
                        typeof $steps["updateRequestPricingOpen"].then ===
                          "function"
                      ) {
                        $steps["updateRequestPricingOpen"] = await $steps[
                          "updateRequestPricingOpen"
                        ];
                      }
                    },
                    onIsSubmittingChange: async (...eventArgs) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["enquiryForm", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["enquiryForm"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "enquiryForm.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "enquiryForm.isSubmitting"
                      }
                    ],

                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );
                  return (
                    <FormWrapper
                      data-plasmic-name={"enquiryForm"}
                      data-plasmic-override={overrides.enquiryForm}
                      {...child$Props}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__d6YiP
                        )}
                        label={"Wedding Date"}
                        name={"date"}
                        rules={[{ ruleType: "required" }]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.dateTimePicker
                            ),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["dateTimePicker", "value"],
                                AntdDatePicker_Helpers
                              ).apply(null, eventArgs);
                            },
                            popupScopeClassName:
                              sty["dateTimePicker__datePickerPopup"],
                            value: generateStateValueProp($state, [
                              "dateTimePicker",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "dateTimePicker.value"
                              }
                            ],

                            [],
                            AntdDatePicker_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdDatePicker
                              data-plasmic-name={"dateTimePicker"}
                              data-plasmic-override={overrides.dateTimePicker}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__jJYj9
                        )}
                        label={"Details about the Wedding"}
                        name={"message"}
                        rules={[{ ruleType: "required" }]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.textArea2
                            ),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["textArea2", "value"],
                                AntdTextArea_Helpers
                              ).apply(null, eventArgs);
                            },
                            value: generateStateValueProp($state, [
                              "textArea2",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "textArea2.value"
                              }
                            ],

                            [],
                            AntdTextArea_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdTextArea
                              data-plasmic-name={"textArea2"}
                              data-plasmic-override={overrides.textArea2}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__tjRal
                        )}
                        label={"Budget in mind"}
                        name={"budget"}
                        rules={[
                          { ruleType: "required" },
                          {
                            ruleType: "advanced",
                            custom: (rule, value) => {
                              return !isNaN(value);
                            },
                            message: "Please enter a number"
                          }
                        ]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input3),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input3", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            value: generateStateValueProp($state, [
                              "input3",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input3.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"input3"}
                              data-plasmic-override={overrides.input3}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__wTlHi
                        )}
                        label={"Location of Event"}
                        name={"location"}
                        rules={[{ ruleType: "required" }]}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input2),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input2", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            value: generateStateValueProp($state, [
                              "input2",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input2.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"input2"}
                              data-plasmic-override={overrides.input2}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <ButtonContainer
                        className={classNames(
                          "__wab_instance",
                          sty.buttonContainer__uGqm7
                        )}
                      >
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__lbynr
                          )}
                          ghost={false}
                          submitsForm={true}
                          type={"ghost"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cyzQv
                            )}
                          >
                            {"Send Enquiry"}
                          </div>
                        </AntdButton>
                      </ButtonContainer>
                    </FormWrapper>
                  );
                })()
              : null}
            {(() => {
              try {
                return !$props.userId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <Prompt
                data-plasmic-name={"prompt"}
                data-plasmic-override={overrides.prompt}
                className={classNames("__wab_instance", sty.prompt)}
                subHeading={"Login to send enquiry"}
                type={"login"}
              />
            ) : null}
          </Stack__>
        </AntdModal>
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  card: [
    "card",
    "info",
    "description",
    "list",
    "listItem",
    "svg",
    "contact",
    "requestPricing",
    "freeBox",
    "enquiryForm",
    "dateTimePicker",
    "textArea2",
    "input3",
    "input2",
    "prompt"
  ],

  info: ["info"],
  description: ["description"],
  list: ["list", "listItem", "svg"],
  listItem: ["listItem", "svg"],
  svg: ["svg"],
  contact: [
    "contact",
    "requestPricing",
    "freeBox",
    "enquiryForm",
    "dateTimePicker",
    "textArea2",
    "input3",
    "input2",
    "prompt"
  ],

  requestPricing: [
    "requestPricing",
    "freeBox",
    "enquiryForm",
    "dateTimePicker",
    "textArea2",
    "input3",
    "input2",
    "prompt"
  ],

  freeBox: [
    "freeBox",
    "enquiryForm",
    "dateTimePicker",
    "textArea2",
    "input3",
    "input2",
    "prompt"
  ],

  enquiryForm: [
    "enquiryForm",
    "dateTimePicker",
    "textArea2",
    "input3",
    "input2"
  ],

  dateTimePicker: ["dateTimePicker"],
  textArea2: ["textArea2"],
  input3: ["input3"],
  input2: ["input2"],
  prompt: ["prompt"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPricingCard2__ArgProps,
          internalVariantPropNames: PlasmicPricingCard2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPricingCard2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "card") {
    func.displayName = "PlasmicPricingCard2";
  } else {
    func.displayName = `PlasmicPricingCard2.${nodeName}`;
  }
  return func;
}

export const PlasmicPricingCard2 = Object.assign(
  // Top-level PlasmicPricingCard2 renders the root element
  makeNodeComponent("card"),
  {
    // Helper components rendering sub-elements
    info: makeNodeComponent("info"),
    description: makeNodeComponent("description"),
    list: makeNodeComponent("list"),
    listItem: makeNodeComponent("listItem"),
    svg: makeNodeComponent("svg"),
    contact: makeNodeComponent("contact"),
    requestPricing: makeNodeComponent("requestPricing"),
    freeBox: makeNodeComponent("freeBox"),
    enquiryForm: makeNodeComponent("enquiryForm"),
    dateTimePicker: makeNodeComponent("dateTimePicker"),
    textArea2: makeNodeComponent("textArea2"),
    input3: makeNodeComponent("input3"),
    input2: makeNodeComponent("input2"),
    prompt: makeNodeComponent("prompt"),
    // Metadata about props expected for PlasmicPricingCard2
    internalVariantProps: PlasmicPricingCard2__VariantProps,
    internalArgProps: PlasmicPricingCard2__ArgProps
  }
);

export default PlasmicPricingCard2;
/* prettier-ignore-end */
