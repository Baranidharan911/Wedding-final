// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: Z1Z56s9kLegE
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicPopularDestinationCard.module.css"; // plasmic-import: Z1Z56s9kLegE/css

createPlasmicElementProxy;

export const PlasmicPopularDestinationCard__VariantProps = new Array();

export const PlasmicPopularDestinationCard__ArgProps = new Array();

const $$ = {};

function PlasmicPopularDestinationCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"popularDestinationsCard"}
      data-plasmic-override={overrides.popularDestinationsCard}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.popularDestinationsCard
      )}
    >
      <div
        data-plasmic-name={"images"}
        data-plasmic-override={overrides.images}
        className={classNames(projectcss.all, sty.images)}
      >
        <div
          data-plasmic-name={"base"}
          data-plasmic-override={overrides.base}
          className={classNames(projectcss.all, sty.base)}
        />

        <div
          data-plasmic-name={"base2"}
          data-plasmic-override={overrides.base2}
          className={classNames(projectcss.all, sty.base2)}
        />

        <div
          data-plasmic-name={"base3"}
          data-plasmic-override={overrides.base3}
          className={classNames(projectcss.all, sty.base3)}
        />

        <div
          data-plasmic-name={"base4"}
          data-plasmic-override={overrides.base4}
          className={classNames(projectcss.all, sty.base4)}
        />
      </div>
      <div
        data-plasmic-name={"overlay"}
        data-plasmic-override={overrides.overlay}
        className={classNames(projectcss.all, sty.overlay)}
      />

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"Chennai"}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  popularDestinationsCard: [
    "popularDestinationsCard",
    "images",
    "base",
    "base2",
    "base3",
    "base4",
    "overlay",
    "text"
  ],

  images: ["images", "base", "base2", "base3", "base4"],
  base: ["base"],
  base2: ["base2"],
  base3: ["base3"],
  base4: ["base4"],
  overlay: ["overlay"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPopularDestinationCard__ArgProps,
          internalVariantPropNames: PlasmicPopularDestinationCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPopularDestinationCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "popularDestinationsCard") {
    func.displayName = "PlasmicPopularDestinationCard";
  } else {
    func.displayName = `PlasmicPopularDestinationCard.${nodeName}`;
  }
  return func;
}

export const PlasmicPopularDestinationCard = Object.assign(
  // Top-level PlasmicPopularDestinationCard renders the root element
  makeNodeComponent("popularDestinationsCard"),
  {
    // Helper components rendering sub-elements
    images: makeNodeComponent("images"),
    base: makeNodeComponent("base"),
    base2: makeNodeComponent("base2"),
    base3: makeNodeComponent("base3"),
    base4: makeNodeComponent("base4"),
    overlay: makeNodeComponent("overlay"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicPopularDestinationCard
    internalVariantProps: PlasmicPopularDestinationCard__VariantProps,
    internalArgProps: PlasmicPopularDestinationCard__ArgProps
  }
);

export default PlasmicPopularDestinationCard;
/* prettier-ignore-end */
