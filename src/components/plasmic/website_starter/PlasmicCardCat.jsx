// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: JknaE6edRkuS
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button2 from "../../Button2"; // plasmic-import: x0IYxFtlqF54/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicCardCat.module.css"; // plasmic-import: JknaE6edRkuS/css
import ConversationChatIcon from "./icons/PlasmicIcon__ConversationChat"; // plasmic-import: eXIVTgR96iiF/icon

createPlasmicElementProxy;

export const PlasmicCardCat__VariantProps = new Array("normal");

export const PlasmicCardCat__ArgProps = new Array(
  "title",
  "desc",
  "btnLink",
  "btnText",
  "group129"
);

const $$ = {};

function PlasmicCardCat__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "normal",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.normal
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"card"}
      data-plasmic-override={overrides.card}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.card,
        { [sty.cardnormal]: hasVariant($state, "normal", "normal") }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"content"}
        data-plasmic-override={overrides.content}
        hasGap={true}
        className={classNames(projectcss.all, sty.content)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__x63Jy
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.title;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Wedgenie";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__c0WQ
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.desc;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Planning Your Dream Day? Wedgenie\\u2019s Got Your Back \\u2013 Every Step of the Way.";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <Button2
          data-plasmic-name={"button2"}
          data-plasmic-override={overrides.button2}
          className={classNames("__wab_instance", sty.button2, {
            [sty.button2normal]: hasVariant($state, "normal", "normal")
          })}
          color={"softRed"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__q7MuY,
              {
                [sty.textnormal__q7MuYgbfs0]: hasVariant(
                  $state,
                  "normal",
                  "normal"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.btnText;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </Button2>
      </Stack__>
      <div
        data-plasmic-name={"icons"}
        data-plasmic-override={overrides.icons}
        className={classNames(projectcss.all, sty.icons)}
      >
        <div
          data-plasmic-name={"messagesChatSmileysConversationConversationChat"}
          data-plasmic-override={
            overrides.messagesChatSmileysConversationConversationChat
          }
          className={classNames(
            projectcss.all,
            sty.messagesChatSmileysConversationConversationChat
          )}
        >
          <div
            data-plasmic-name={"group128"}
            data-plasmic-override={overrides.group128}
            className={classNames(projectcss.all, sty.group128)}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <ConversationChatIcon
                  className={classNames(projectcss.all, sty.svg__qbYD)}
                  role={"img"}
                />
              ),

              value: args.group129
            })}
          </div>
        </div>
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  card: [
    "card",
    "content",
    "button2",
    "icons",
    "messagesChatSmileysConversationConversationChat",
    "group128"
  ],

  content: ["content", "button2"],
  button2: ["button2"],
  icons: [
    "icons",
    "messagesChatSmileysConversationConversationChat",
    "group128"
  ],

  messagesChatSmileysConversationConversationChat: [
    "messagesChatSmileysConversationConversationChat",
    "group128"
  ],

  group128: ["group128"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCardCat__ArgProps,
          internalVariantPropNames: PlasmicCardCat__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCardCat__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "card") {
    func.displayName = "PlasmicCardCat";
  } else {
    func.displayName = `PlasmicCardCat.${nodeName}`;
  }
  return func;
}

export const PlasmicCardCat = Object.assign(
  // Top-level PlasmicCardCat renders the root element
  makeNodeComponent("card"),
  {
    // Helper components rendering sub-elements
    content: makeNodeComponent("content"),
    button2: makeNodeComponent("button2"),
    icons: makeNodeComponent("icons"),
    messagesChatSmileysConversationConversationChat: makeNodeComponent(
      "messagesChatSmileysConversationConversationChat"
    ),
    group128: makeNodeComponent("group128"),
    // Metadata about props expected for PlasmicCardCat
    internalVariantProps: PlasmicCardCat__VariantProps,
    internalArgProps: PlasmicCardCat__ArgProps
  }
);

export default PlasmicCardCat;
/* prettier-ignore-end */
