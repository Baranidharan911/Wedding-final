// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: TGJOp_zR1KIZ
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicPhotographyVideographyCard.module.css"; // plasmic-import: TGJOp_zR1KIZ/css
import Star1Icon from "./icons/PlasmicIcon__Star1"; // plasmic-import: cvwjNJfd8g1H/icon

createPlasmicElementProxy;

export const PlasmicPhotographyVideographyCard__VariantProps = new Array();

export const PlasmicPhotographyVideographyCard__ArgProps = new Array();

const $$ = {};

function PlasmicPhotographyVideographyCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"card"}
      data-plasmic-override={overrides.card}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.card
      )}
    >
      <div
        data-plasmic-name={"cardImage"}
        data-plasmic-override={overrides.cardImage}
        className={classNames(projectcss.all, sty.cardImage)}
      >
        <div
          data-plasmic-name={"image"}
          data-plasmic-override={overrides.image}
          className={classNames(projectcss.all, sty.image)}
        />

        <Stack__
          as={"div"}
          data-plasmic-name={"tag"}
          data-plasmic-override={overrides.tag}
          hasGap={true}
          className={classNames(projectcss.all, sty.tag)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__z3KVg
            )}
          >
            {"HAND PICKED"}
          </div>
        </Stack__>
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"cardContent"}
        data-plasmic-override={overrides.cardContent}
        hasGap={true}
        className={classNames(projectcss.all, sty.cardContent)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"content"}
          data-plasmic-override={overrides.content}
          hasGap={true}
          className={classNames(projectcss.all, sty.content)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"reviewsRatings"}
            data-plasmic-override={overrides.reviewsRatings}
            hasGap={true}
            className={classNames(projectcss.all, sty.reviewsRatings)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"rating"}
              data-plasmic-override={overrides.rating}
              hasGap={true}
              className={classNames(projectcss.all, sty.rating)}
            >
              <Star1Icon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fg1Lq
                )}
              >
                {"5.0"}
              </div>
            </Stack__>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__g9ZZp
              )}
            >
              {"1000 Reviews"}
            </div>
          </Stack__>
          <div
            data-plasmic-name={"highTidePhotography"}
            data-plasmic-override={overrides.highTidePhotography}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.highTidePhotography
            )}
          >
            {"Parbliss Photography"}
          </div>
          <div
            data-plasmic-name={"linkButton"}
            data-plasmic-override={overrides.linkButton}
            className={classNames(projectcss.all, sty.linkButton)}
          >
            <div
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.button
              )}
            >
              {"GTB Nagar, Delhi NCR"}
            </div>
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"amount"}
          data-plasmic-override={overrides.amount}
          hasGap={true}
          className={classNames(projectcss.all, sty.amount)}
        >
          <div
            data-plasmic-name={"minimumCosting"}
            data-plasmic-override={overrides.minimumCosting}
            className={classNames(projectcss.all, sty.minimumCosting)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bJnh7
              )}
            >
              {"Minimum"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__c0CRo
              )}
            >
              {"INR 50,000"}
            </div>
          </div>
          {false ? (
            <div
              data-plasmic-name={"maximumCosting"}
              data-plasmic-override={overrides.maximumCosting}
              className={classNames(projectcss.all, sty.maximumCosting)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ckwGa
                )}
              >
                {"Maximum"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mVGhi
                )}
              >
                {"INR 50,000"}
              </div>
            </div>
          ) : null}
        </Stack__>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  card: [
    "card",
    "cardImage",
    "image",
    "tag",
    "cardContent",
    "content",
    "reviewsRatings",
    "rating",
    "svg",
    "highTidePhotography",
    "linkButton",
    "button",
    "amount",
    "minimumCosting",
    "maximumCosting"
  ],

  cardImage: ["cardImage", "image", "tag"],
  image: ["image"],
  tag: ["tag"],
  cardContent: [
    "cardContent",
    "content",
    "reviewsRatings",
    "rating",
    "svg",
    "highTidePhotography",
    "linkButton",
    "button",
    "amount",
    "minimumCosting",
    "maximumCosting"
  ],

  content: [
    "content",
    "reviewsRatings",
    "rating",
    "svg",
    "highTidePhotography",
    "linkButton",
    "button"
  ],

  reviewsRatings: ["reviewsRatings", "rating", "svg"],
  rating: ["rating", "svg"],
  svg: ["svg"],
  highTidePhotography: ["highTidePhotography"],
  linkButton: ["linkButton", "button"],
  button: ["button"],
  amount: ["amount", "minimumCosting", "maximumCosting"],
  minimumCosting: ["minimumCosting"],
  maximumCosting: ["maximumCosting"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPhotographyVideographyCard__ArgProps,
          internalVariantPropNames:
            PlasmicPhotographyVideographyCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPhotographyVideographyCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "card") {
    func.displayName = "PlasmicPhotographyVideographyCard";
  } else {
    func.displayName = `PlasmicPhotographyVideographyCard.${nodeName}`;
  }
  return func;
}

export const PlasmicPhotographyVideographyCard = Object.assign(
  // Top-level PlasmicPhotographyVideographyCard renders the root element
  makeNodeComponent("card"),
  {
    // Helper components rendering sub-elements
    cardImage: makeNodeComponent("cardImage"),
    image: makeNodeComponent("image"),
    tag: makeNodeComponent("tag"),
    cardContent: makeNodeComponent("cardContent"),
    content: makeNodeComponent("content"),
    reviewsRatings: makeNodeComponent("reviewsRatings"),
    rating: makeNodeComponent("rating"),
    svg: makeNodeComponent("svg"),
    highTidePhotography: makeNodeComponent("highTidePhotography"),
    linkButton: makeNodeComponent("linkButton"),
    button: makeNodeComponent("button"),
    amount: makeNodeComponent("amount"),
    minimumCosting: makeNodeComponent("minimumCosting"),
    maximumCosting: makeNodeComponent("maximumCosting"),
    // Metadata about props expected for PlasmicPhotographyVideographyCard
    internalVariantProps: PlasmicPhotographyVideographyCard__VariantProps,
    internalArgProps: PlasmicPhotographyVideographyCard__ArgProps
  }
);

export default PlasmicPhotographyVideographyCard;
/* prettier-ignore-end */
