// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: 1K70K7XxiBCG
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import LayerDefault from "../../LayerDefault"; // plasmic-import: 4uZwDUl-gHmp/component
import EnquiryFormBuilder from "../../EnquiryFormBuilder"; // plasmic-import: LGQvbE5rkMbS/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicEnquiry.module.css"; // plasmic-import: 1K70K7XxiBCG/css

createPlasmicElementProxy;

export const PlasmicEnquiry__VariantProps = new Array();

export const PlasmicEnquiry__ArgProps = new Array();

const $$ = {};

function PlasmicEnquiry__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
        opId: "d601eccc-4ce0-4155-aadf-df759265513a",
        userArgs: {},
        cacheKey: `plasmic.$.d601eccc-4ce0-4155-aadf-df759265513a.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <LayerDefault
            data-plasmic-name={"layerDefault"}
            data-plasmic-override={overrides.layerDefault}
            className={classNames("__wab_instance", sty.layerDefault)}
          >
            {(() => {
              try {
                return (() => {
                  if (!$queries.formInfo.data.response.data.form.data)
                    return false;
                  if (
                    $queries.formInfo.data.response.data.form.data.attributes
                      .replied
                  )
                    return false;
                  return (
                    $queries.formInfo.data.response.data.form.data.attributes
                      .enquiry.data.attributes.users_permissions_user.data
                      .id === $queries.userId.data.response.data.me.id ||
                    $queries.formInfo.data.response.data.form.data.attributes
                      .store.data.id ===
                      $queries.venderInfo.data.response.data
                        .usersPermissionsUser.data?.attributes.store_owner.data
                        ?.attributes.stores.data[0].id
                  );
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <EnquiryFormBuilder
                data-plasmic-name={"enquiryFormBuilder"}
                data-plasmic-override={overrides.enquiryFormBuilder}
                className={classNames("__wab_instance", sty.enquiryFormBuilder)}
                currentEnquiry={(() => {
                  try {
                    return $queries.formInfo.data.response.data.form.data
                      .attributes.enquiry.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return {};
                    }
                    throw e;
                  }
                })()}
                currentUser={(() => {
                  try {
                    return $queries.formInfo.data.response.data.form.data
                      .attributes.users_permissions_user.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return {};
                    }
                    throw e;
                  }
                })()}
                enquiryForm={(() => {
                  try {
                    return $queries.formInfo.data.response.data.form.data
                      .attributes.questions;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                formId={(() => {
                  try {
                    return $ctx.params.id;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            ) : null}
          </LayerDefault>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "layerDefault", "enquiryFormBuilder"],
  layerDefault: ["layerDefault", "enquiryFormBuilder"],
  enquiryFormBuilder: ["enquiryFormBuilder"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEnquiry__ArgProps,
          internalVariantPropNames: PlasmicEnquiry__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEnquiry__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEnquiry";
  } else {
    func.displayName = `PlasmicEnquiry.${nodeName}`;
  }
  return func;
}

export const PlasmicEnquiry = Object.assign(
  // Top-level PlasmicEnquiry renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    layerDefault: makeNodeComponent("layerDefault"),
    enquiryFormBuilder: makeNodeComponent("enquiryFormBuilder"),
    // Metadata about props expected for PlasmicEnquiry
    internalVariantProps: PlasmicEnquiry__VariantProps,
    internalArgProps: PlasmicEnquiry__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEnquiry;
/* prettier-ignore-end */
