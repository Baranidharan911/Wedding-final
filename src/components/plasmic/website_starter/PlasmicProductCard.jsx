// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: LDMSBDnEKnls
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Card from "../../Card"; // plasmic-import: xmUSLuJq3B--/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicProductCard.module.css"; // plasmic-import: LDMSBDnEKnls/css
import Star1Icon from "./icons/PlasmicIcon__Star1"; // plasmic-import: cvwjNJfd8g1H/icon

createPlasmicElementProxy;

export const PlasmicProductCard__VariantProps = new Array();

export const PlasmicProductCard__ArgProps = new Array();

const $$ = {};

function PlasmicProductCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        ``
      )}
    >
      <Card
        data-plasmic-name={"card"}
        data-plasmic-override={overrides.card}
        className={classNames("__wab_instance", sty.card)}
        title={
          <React.Fragment>
            <PlasmicImg__
              data-plasmic-name={"cardImage"}
              data-plasmic-override={overrides.cardImage}
              alt={""}
              className={classNames(sty.cardImage)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"352px"}
              height={"248"}
              loading={"lazy"}
              width={"auto"}
            />

            <div
              data-plasmic-name={"tags"}
              data-plasmic-override={overrides.tags}
              className={classNames(projectcss.all, sty.tags)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ksezk
                )}
              >
                {""}
              </div>
            </div>
          </React.Fragment>
        }
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"cardContent"}
          data-plasmic-override={overrides.cardContent}
          hasGap={true}
          className={classNames(projectcss.all, sty.cardContent)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"content"}
            data-plasmic-override={overrides.content}
            hasGap={true}
            className={classNames(projectcss.all, sty.content)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"reviewsRatings"}
              data-plasmic-override={overrides.reviewsRatings}
              hasGap={true}
              className={classNames(projectcss.all, sty.reviewsRatings)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"rating"}
                data-plasmic-override={overrides.rating}
                hasGap={true}
                className={classNames(projectcss.all, sty.rating)}
              >
                <Star1Icon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2Im8H
                  )}
                >
                  {"5.0"}
                </div>
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kzDW
                )}
              >
                {"1000 Reviews"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"contentCopy"}
              data-plasmic-override={overrides.contentCopy}
              hasGap={true}
              className={classNames(projectcss.all, sty.contentCopy)}
            >
              <div
                data-plasmic-name={"highTidePhotography"}
                data-plasmic-override={overrides.highTidePhotography}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.highTidePhotography
                )}
              >
                {""}
              </div>
              <div
                data-plasmic-name={"mapLink"}
                data-plasmic-override={overrides.mapLink}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.mapLink
                )}
              >
                {"GTB Nagar, Delhi NCR"}
              </div>
            </Stack__>
          </Stack__>
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2WoOu
              )}
            >
              {"Minimum"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__azOly
              )}
            >
              {""}
            </div>
          </div>
          {false ? (
            <div
              data-plasmic-name={"maximumCosting"}
              data-plasmic-override={overrides.maximumCosting}
              className={classNames(projectcss.all, sty.maximumCosting)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lQxeU
                )}
              >
                {"Maximum"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rxyr8
                )}
              >
                {"INR 50,000"}
              </div>
            </div>
          ) : null}
        </Stack__>
      </Card>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "card",
    "cardImage",
    "tags",
    "cardContent",
    "content",
    "reviewsRatings",
    "rating",
    "svg",
    "contentCopy",
    "highTidePhotography",
    "mapLink",
    "freeBox",
    "maximumCosting"
  ],

  card: [
    "card",
    "cardImage",
    "tags",
    "cardContent",
    "content",
    "reviewsRatings",
    "rating",
    "svg",
    "contentCopy",
    "highTidePhotography",
    "mapLink",
    "freeBox",
    "maximumCosting"
  ],

  cardImage: ["cardImage"],
  tags: ["tags"],
  cardContent: [
    "cardContent",
    "content",
    "reviewsRatings",
    "rating",
    "svg",
    "contentCopy",
    "highTidePhotography",
    "mapLink",
    "freeBox",
    "maximumCosting"
  ],

  content: [
    "content",
    "reviewsRatings",
    "rating",
    "svg",
    "contentCopy",
    "highTidePhotography",
    "mapLink"
  ],

  reviewsRatings: ["reviewsRatings", "rating", "svg"],
  rating: ["rating", "svg"],
  svg: ["svg"],
  contentCopy: ["contentCopy", "highTidePhotography", "mapLink"],
  highTidePhotography: ["highTidePhotography"],
  mapLink: ["mapLink"],
  freeBox: ["freeBox"],
  maximumCosting: ["maximumCosting"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductCard__ArgProps,
          internalVariantPropNames: PlasmicProductCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCard";
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    card: makeNodeComponent("card"),
    cardImage: makeNodeComponent("cardImage"),
    tags: makeNodeComponent("tags"),
    cardContent: makeNodeComponent("cardContent"),
    content: makeNodeComponent("content"),
    reviewsRatings: makeNodeComponent("reviewsRatings"),
    rating: makeNodeComponent("rating"),
    svg: makeNodeComponent("svg"),
    contentCopy: makeNodeComponent("contentCopy"),
    highTidePhotography: makeNodeComponent("highTidePhotography"),
    mapLink: makeNodeComponent("mapLink"),
    freeBox: makeNodeComponent("freeBox"),
    maximumCosting: makeNodeComponent("maximumCosting"),
    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps
  }
);

export default PlasmicProductCard;
/* prettier-ignore-end */
