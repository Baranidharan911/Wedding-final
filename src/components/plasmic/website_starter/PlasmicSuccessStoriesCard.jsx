// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: MKLRp68iJcO_
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { useScreenVariants as useScreenVariantszapf5SksSeNd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ZAPF5sksSeNd/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicSuccessStoriesCard.module.css"; // plasmic-import: MKLRp68iJcO_/css
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: hl3Nu5D0FvuO/icon

createPlasmicElementProxy;

export const PlasmicSuccessStoriesCard__VariantProps = new Array();

export const PlasmicSuccessStoriesCard__ArgProps = new Array();

const $$ = {};

function PlasmicSuccessStoriesCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszapf5SksSeNd()
  });
  return (
    <PlasmicLink__
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      platform={"react"}
    >
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"auto"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"auto"}
        height={"100%"}
        loading={"lazy"}
        width={"100%"}
      />

      <div className={classNames(projectcss.all, sty.freeBox___96Ffe)}>
        <div className={classNames(projectcss.all, sty.freeBox__dLm6F)}>
          <div className={classNames(projectcss.all, sty.freeBox__zu3OJ)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hSdl3
              )}
            >
              {""}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fAqj
              )}
            >
              {""}
            </div>
          </div>
          <AntdButton
            className={classNames("__wab_instance", sty.button__nQoc6)}
            size={"small"}
            type={"default"}
          >
            <Icon38Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </AntdButton>
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__aZpWs)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___6MWz
            )}
          >
            {""}
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__bAoPg)}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              []
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <AntdButton
                  className={classNames("__wab_instance", sty.button__lpA8U)}
                  key={currentIndex}
                  type={"primary"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gfPqL
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Button";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </AntdButton>
              );
            })}
          </Stack__>
        </Stack__>
      </div>
      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      />
    </PlasmicLink__>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "svg", "section"],
  img: ["img"],
  svg: ["svg"],
  section: ["section"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSuccessStoriesCard__ArgProps,
          internalVariantPropNames: PlasmicSuccessStoriesCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSuccessStoriesCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSuccessStoriesCard";
  } else {
    func.displayName = `PlasmicSuccessStoriesCard.${nodeName}`;
  }
  return func;
}

export const PlasmicSuccessStoriesCard = Object.assign(
  // Top-level PlasmicSuccessStoriesCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),
    section: makeNodeComponent("section"),
    // Metadata about props expected for PlasmicSuccessStoriesCard
    internalVariantProps: PlasmicSuccessStoriesCard__VariantProps,
    internalArgProps: PlasmicSuccessStoriesCard__ArgProps
  }
);

export default PlasmicSuccessStoriesCard;
/* prettier-ignore-end */
