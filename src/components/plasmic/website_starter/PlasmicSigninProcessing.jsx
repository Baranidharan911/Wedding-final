// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: o920249xu5eg
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import LayerDefault from "../../LayerDefault"; // plasmic-import: 4uZwDUl-gHmp/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicSigninProcessing.module.css"; // plasmic-import: o920249xu5eg/css

createPlasmicElementProxy;

export const PlasmicSigninProcessing__VariantProps = new Array();

export const PlasmicSigninProcessing__ArgProps = new Array();

const $$ = {};

function PlasmicSigninProcessing__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <LayerDefault
            data-plasmic-name={"layerDefault"}
            data-plasmic-override={overrides.layerDefault}
            className={classNames("__wab_instance", sty.layerDefault)}
          >
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <DataFetcher
                data-plasmic-name={"httpRestApiFetcher"}
                data-plasmic-override={overrides.httpRestApiFetcher}
                body={(() => {
                  try {
                    return { code: $ctx.query.code };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames("__wab_instance", sty.httpRestApiFetcher)}
                dataName={"fetchedData"}
                errorDisplay={
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ip7St
                        )}
                      >
                        {"Error, please try again"}
                      </div>
                    )}
                  </DataCtxReader__>
                }
                errorName={"fetchError"}
                loadingDisplay={
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dpMb1
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return "Signing in, Please wait...";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Loading...";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    )}
                  </DataCtxReader__>
                }
                method={"POST"}
                noLayout={false}
                url={
                  "https://admin.weddingvows.com/strapi-google-auth/user-profile-extended"
                }
              >
                <DataCtxReader__>
                  {$ctx => (
                    <React.Fragment>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tw6Ap
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return "Sign in successful! Redirecting...";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Loading...";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <Embed
                        data-plasmic-name={"embedHtml"}
                        data-plasmic-override={overrides.embedHtml}
                        className={classNames("__wab_instance", sty.embedHtml)}
                        code={(() => {
                          try {
                            return (() => {
                              console.log($ctx.fetchedData);
                              localStorage.setItem(
                                "strapi-jwt",
                                $ctx.fetchedData.data.token
                              );
                              return setTimeout(() => {
                                window.history.go(-3);
                              }, 2000);
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return '<script>\r\n    localStorage.setItem("strapi-jwt", $ctx.fetchedData.token)\r\n    console.log($ctx.fetchedData)\r\n</script>';
                            }
                            throw e;
                          }
                        })()}
                      />
                    </React.Fragment>
                  )}
                </DataCtxReader__>
              </DataFetcher>
            </div>
          </LayerDefault>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "layerDefault", "freeBox", "httpRestApiFetcher", "embedHtml"],
  layerDefault: ["layerDefault", "freeBox", "httpRestApiFetcher", "embedHtml"],
  freeBox: ["freeBox", "httpRestApiFetcher", "embedHtml"],
  httpRestApiFetcher: ["httpRestApiFetcher", "embedHtml"],
  embedHtml: ["embedHtml"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSigninProcessing__ArgProps,
          internalVariantPropNames: PlasmicSigninProcessing__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSigninProcessing__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSigninProcessing";
  } else {
    func.displayName = `PlasmicSigninProcessing.${nodeName}`;
  }
  return func;
}

export const PlasmicSigninProcessing = Object.assign(
  // Top-level PlasmicSigninProcessing renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    layerDefault: makeNodeComponent("layerDefault"),
    freeBox: makeNodeComponent("freeBox"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    embedHtml: makeNodeComponent("embedHtml"),
    // Metadata about props expected for PlasmicSigninProcessing
    internalVariantProps: PlasmicSigninProcessing__VariantProps,
    internalArgProps: PlasmicSigninProcessing__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSigninProcessing;
/* prettier-ignore-end */
