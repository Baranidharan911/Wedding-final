// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: sB-Ff4Mc314_
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import LayerDefault from "../../LayerDefault"; // plasmic-import: 4uZwDUl-gHmp/component
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdBreadcrumb } from "@plasmicpkgs/antd5/skinny/registerBreadcrumb";
import { AntdBreadcrumbItem } from "@plasmicpkgs/antd5/skinny/registerBreadcrumb";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import Promotions from "../../Promotions"; // plasmic-import: zGFI5NjGDbek/component
import SectionCardWrapper2 from "../../SectionCardWrapper2"; // plasmic-import: 60GYi7c5AWbx/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import FeaturingVendorCard from "../../FeaturingVendorCard"; // plasmic-import: FymR_Rf9uBOI/component
import { AntdPagination } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { paginationHelpers as AntdPagination_Helpers } from "@plasmicpkgs/antd5/skinny/registerPagination";
import WeddingArticlesCard2 from "../../WeddingArticlesCard2"; // plasmic-import: Gtd0WTfGHInR/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { useScreenVariants as useScreenVariantszapf5SksSeNd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ZAPF5sksSeNd/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicSearch.module.css"; // plasmic-import: sB-Ff4Mc314_/css
import DownAngleSvgIcon from "./icons/PlasmicIcon__DownAngleSvg"; // plasmic-import: zPP2D2BXmuYX/icon
import Frame1000006045Icon from "./icons/PlasmicIcon__Frame1000006045"; // plasmic-import: ZBUtOtQKpJ6u/icon

createPlasmicElementProxy;

export const PlasmicSearch__VariantProps = new Array();

export const PlasmicSearch__ArgProps = new Array();

const $$ = {};

function PlasmicSearch__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "filterState",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const queryParameters = {
                  city:
                    $ctx.query?.city && $ctx.query?.city === "All"
                      ? ""
                      : $ctx.query?.city || "",
                  type:
                    $ctx.query?.type && $ctx.query?.type === "All"
                      ? ""
                      : $ctx.query?.type || "",
                  budget: "",
                  rating: "",
                  review: "",
                  searchTerm: ($ctx.query?.key && $ctx.query?.key) || "",
                  venue:
                    $ctx.query?.venue && $ctx.query?.venue === "All"
                      ? ""
                      : $ctx.query?.venue.replaceAll(/%20/g, " ") || ""
                };
                return queryParameters;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {
                  city: "",
                  type: "",
                  budget: "",
                  rating: "",
                  review: "",
                  searchTerm: "",
                  venue: ""
                };
              }
              throw e;
            }
          })()
      },
      {
        path: "locations",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.cards.data.response.data.homeCards.data.filter(
                item => item.attributes.type === "Popular_Destination"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "types",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.cards.data.response.data.homeCards.data.filter(
                item => item.attributes.type === "Wedding_Vendor"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "totalItems",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "venues",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.cards.data.response.data.homeCards.data.filter(
                item => item.attributes.type === "Popular_Venue"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "collapse.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : true,
        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "city.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.city || "All";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "All";
              }
              throw e;
            }
          })()
      },
      {
        path: "collapse7.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : true,
        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "venue.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.venue.replaceAll(/%20/g, " ") || "All";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "All";
              }
              throw e;
            }
          })()
      },
      {
        path: "collapse2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : true,
        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "vendor.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.type;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "All";
              }
              throw e;
            }
          })()
      },
      {
        path: "collapse4.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : true,
        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "budget.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.budget;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "All";
              }
              throw e;
            }
          })()
      },
      {
        path: "collapse5.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : true,
        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "rating.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.rating || "All";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "All";
              }
              throw e;
            }
          })()
      },
      {
        path: "collapse6.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : true,
        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "review.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.review || "All";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "All";
              }
              throw e;
            }
          })()
      },
      {
        path: "sliderCarousel8.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,
        refName: "sliderCarousel8",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "popularVenues",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.cards.data.response.data.homeCards.data.filter(
                item => item.attributes.type === "Popular_Venue"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "pagination.currentPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1,
        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "pagination.pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 15,
        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "pagination.startIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "pagination.endIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      },
      {
        path: "sliderCarousel7.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,
        refName: "sliderCarousel7",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    cards: usePlasmicDataOp(() => {
      return {
        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
        opId: "a2dde5f3-3b1a-42c8-b7e3-8af4df8db0ca",
        userArgs: {},
        cacheKey: `plasmic.$.a2dde5f3-3b1a-42c8-b7e3-8af4df8db0ca.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    advertisements: usePlasmicDataOp(() => {
      return {
        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
        opId: "90d31346-a08c-4b5e-b3eb-78e2b101e835",
        userArgs: {},
        cacheKey: `plasmic.$.90d31346-a08c-4b5e-b3eb-78e2b101e835.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszapf5SksSeNd()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <LayerDefault
            data-plasmic-name={"layerDefault"}
            data-plasmic-override={overrides.layerDefault}
            className={classNames("__wab_instance", sty.layerDefault)}
          >
            <div
              data-plasmic-name={"bodyContainer"}
              data-plasmic-override={overrides.bodyContainer}
              className={classNames(projectcss.all, sty.bodyContainer)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"leftContainer"}
                data-plasmic-override={overrides.leftContainer}
                hasGap={true}
                className={classNames(projectcss.all, sty.leftContainer)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"filterCity"}
                  data-plasmic-override={overrides.filterCity}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.filterCity)}
                >
                  {(() => {
                    const child$Props = {
                      bordered: false,
                      className: classNames("__wab_instance", sty.collapse),
                      defaultOpen: hasVariant(
                        globalVariants,
                        "screen",
                        "mobileOnly"
                      )
                        ? false
                        : true,
                      expandIcon: (
                        <DownAngleSvgIcon
                          className={classNames(projectcss.all, sty.svg__ej8S4)}
                          role={"img"}
                        />
                      ),

                      expandIconPosition: "end",
                      ghost: true,
                      label2: (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yBe
                          )}
                        >
                          {"Location"}
                        </div>
                      ),

                      onChange: async (...eventArgs) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "open",
                          ["collapse", "open"],
                          AntdSingleCollapse_Helpers
                        ).apply(null, eventArgs);
                      },
                      open: generateStateValueProp($state, [
                        "collapse",
                        "open"
                      ]),
                      showArrow: true
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "open",
                          plasmicStateName: "collapse.open"
                        }
                      ],

                      [],
                      AntdSingleCollapse_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <AntdSingleCollapse
                        data-plasmic-name={"collapse"}
                        data-plasmic-override={overrides.collapse}
                        {...child$Props}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.city),
                            defaultValue: (() => {
                              try {
                                return $ctx.query.city || "All";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "All";
                                }
                                throw e;
                              }
                            })(),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "city",
                                "value"
                              ]).apply(null, eventArgs);
                              (async value => {
                                const $steps = {};
                                $steps["updateFilterStateCity"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["filterState", "city"]
                                        },
                                        operation: 0,
                                        value:
                                          $state.city.value === "All"
                                            ? ""
                                            : $state.city.value
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;
                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateFilterStateCity"] != null &&
                                  typeof $steps["updateFilterStateCity"] ===
                                    "object" &&
                                  typeof $steps["updateFilterStateCity"]
                                    .then === "function"
                                ) {
                                  $steps["updateFilterStateCity"] =
                                    await $steps["updateFilterStateCity"];
                                }
                              }).apply(null, eventArgs);
                            },
                            optionType: "default",
                            options: (() => {
                              try {
                                return [
                                  "All",
                                  ...new Set(
                                    $state.locations.map(
                                      item => item.attributes.title
                                    )
                                  )
                                ];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [
                                    { value: "option1", label: "Option 1" }
                                  ];
                                }
                                throw e;
                              }
                            })(),
                            value: generateStateValueProp($state, [
                              "city",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "city.value"
                              }
                            ],

                            [],
                            undefined ?? {},
                            child$Props
                          );
                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "city.value",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return $ctx.query.city || "All";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "All";
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],

                            []
                          );
                          return (
                            <AntdRadioGroup
                              data-plasmic-name={"city"}
                              data-plasmic-override={overrides.city}
                              {...child$Props}
                            >
                              <AntdRadio
                                className={classNames(
                                  "__wab_instance",
                                  sty.radio__qk3B7
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___3V6U2
                                  )}
                                >
                                  {"Option 1"}
                                </div>
                              </AntdRadio>
                              <AntdRadio
                                className={classNames(
                                  "__wab_instance",
                                  sty.radio__op9H4
                                )}
                                value={"op2"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__khbiI
                                  )}
                                >
                                  {"Option 2"}
                                </div>
                              </AntdRadio>
                            </AntdRadioGroup>
                          );
                        })()}
                      </AntdSingleCollapse>
                    );
                  })()}
                </Stack__>
                {(() => {
                  try {
                    return $ctx.params.slug === "Venue";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"filterVenue"}
                    data-plasmic-override={overrides.filterVenue}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.filterVenue)}
                  >
                    {(() => {
                      const child$Props = {
                        bordered: false,
                        className: classNames("__wab_instance", sty.collapse7),
                        defaultOpen: hasVariant(
                          globalVariants,
                          "screen",
                          "mobileOnly"
                        )
                          ? false
                          : true,
                        expandIcon: (
                          <DownAngleSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___6W7Kx
                            )}
                            role={"img"}
                          />
                        ),

                        expandIconPosition: "end",
                        ghost: true,
                        label2: (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mpu0D
                            )}
                          >
                            {"Venues"}
                          </div>
                        ),

                        onChange: async (...eventArgs) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "open",
                            ["collapse7", "open"],
                            AntdSingleCollapse_Helpers
                          ).apply(null, eventArgs);
                        },
                        open: generateStateValueProp($state, [
                          "collapse7",
                          "open"
                        ]),
                        showArrow: true
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "open",
                            plasmicStateName: "collapse7.open"
                          }
                        ],

                        [],
                        AntdSingleCollapse_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdSingleCollapse
                          data-plasmic-name={"collapse7"}
                          data-plasmic-override={overrides.collapse7}
                          {...child$Props}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.venue
                              ),
                              defaultValue: (() => {
                                try {
                                  return (
                                    $ctx.query.venue.replaceAll(/%20/g, " ") ||
                                    "All"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "All";
                                  }
                                  throw e;
                                }
                              })(),
                              onChange: async (...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "venue",
                                  "value"
                                ]).apply(null, eventArgs);
                              },
                              optionType: "default",
                              options: [
                                { value: "option1", label: "Option 1" },
                                { value: "option2", label: "Option 2" }
                              ],

                              value: generateStateValueProp($state, [
                                "venue",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "venue.value"
                                }
                              ],

                              [],
                              undefined ?? {},
                              child$Props
                            );
                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "venue.value",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return (
                                          $ctx.query.venue.replaceAll(
                                            /%20/g,
                                            " "
                                          ) || "All"
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "All";
                                        }
                                        throw e;
                                      }
                                    })()
                                }
                              ],

                              []
                            );
                            return (
                              <AntdRadioGroup
                                data-plasmic-name={"venue"}
                                data-plasmic-override={overrides.venue}
                                {...child$Props}
                              >
                                <AntdRadio
                                  className={classNames(
                                    "__wab_instance",
                                    sty.radio__myRyh
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__u59Zy
                                    )}
                                  >
                                    {"Option 1"}
                                  </div>
                                </AntdRadio>
                                <AntdRadio
                                  className={classNames(
                                    "__wab_instance",
                                    sty.radio___3OlGb
                                  )}
                                  value={"op2"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__kc6WP
                                    )}
                                  >
                                    {"Option 2"}
                                  </div>
                                </AntdRadio>
                              </AntdRadioGroup>
                            );
                          })()}
                        </AntdSingleCollapse>
                      );
                    })()}
                  </Stack__>
                ) : null}
                {(() => {
                  try {
                    return $ctx.params.slug === "Service";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"filterType"}
                    data-plasmic-override={overrides.filterType}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.filterType)}
                  >
                    {(() => {
                      const child$Props = {
                        bordered: false,
                        className: classNames("__wab_instance", sty.collapse2),
                        defaultOpen: hasVariant(
                          globalVariants,
                          "screen",
                          "mobileOnly"
                        )
                          ? false
                          : true,
                        expandIcon: (
                          <DownAngleSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___8UBqg
                            )}
                            role={"img"}
                          />
                        ),

                        expandIconPosition: "end",
                        ghost: true,
                        label2: (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___3AfxL
                            )}
                          >
                            {"Vendors"}
                          </div>
                        ),

                        onChange: async (...eventArgs) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "open",
                            ["collapse2", "open"],
                            AntdSingleCollapse_Helpers
                          ).apply(null, eventArgs);
                        },
                        open: generateStateValueProp($state, [
                          "collapse2",
                          "open"
                        ]),
                        showArrow: true
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "open",
                            plasmicStateName: "collapse2.open"
                          }
                        ],

                        [],
                        AntdSingleCollapse_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdSingleCollapse
                          data-plasmic-name={"collapse2"}
                          data-plasmic-override={overrides.collapse2}
                          {...child$Props}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.vendor
                              ),
                              defaultValue: (() => {
                                try {
                                  return $ctx.query.type;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "All";
                                  }
                                  throw e;
                                }
                              })(),
                              onChange: async (...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "vendor",
                                  "value"
                                ]).apply(null, eventArgs);
                              },
                              optionType: "default",
                              options: (() => {
                                try {
                                  return [
                                    "All",
                                    ...$state.types.map(
                                      item => item.attributes.title
                                    )
                                  ];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })(),
                              value: generateStateValueProp($state, [
                                "vendor",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "vendor.value"
                                }
                              ],

                              [],
                              undefined ?? {},
                              child$Props
                            );
                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "vendor.value",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return $ctx.query.type;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "All";
                                        }
                                        throw e;
                                      }
                                    })()
                                }
                              ],

                              []
                            );
                            return (
                              <AntdRadioGroup
                                data-plasmic-name={"vendor"}
                                data-plasmic-override={overrides.vendor}
                                {...child$Props}
                              >
                                <AntdRadio
                                  className={classNames(
                                    "__wab_instance",
                                    sty.radio__a4PZx
                                  )}
                                  value={"op1"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__zWF
                                    )}
                                  >
                                    {"Option 1"}
                                  </div>
                                </AntdRadio>
                                <AntdRadio
                                  className={classNames(
                                    "__wab_instance",
                                    sty.radio__q9M7R
                                  )}
                                  value={"op2"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__uHbDm
                                    )}
                                  >
                                    {"Option 2"}
                                  </div>
                                </AntdRadio>
                              </AntdRadioGroup>
                            );
                          })()}
                        </AntdSingleCollapse>
                      );
                    })()}
                  </Stack__>
                ) : null}
                <Stack__
                  as={"div"}
                  data-plasmic-name={"filterBudget"}
                  data-plasmic-override={overrides.filterBudget}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.filterBudget)}
                >
                  {(() => {
                    const child$Props = {
                      bordered: false,
                      className: classNames("__wab_instance", sty.collapse4),
                      defaultOpen: hasVariant(
                        globalVariants,
                        "screen",
                        "mobileOnly"
                      )
                        ? false
                        : true,
                      expandIcon: (
                        <DownAngleSvgIcon
                          className={classNames(projectcss.all, sty.svg__erZw5)}
                          role={"img"}
                        />
                      ),

                      expandIconPosition: "end",
                      ghost: true,
                      label2: (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hKx96
                          )}
                        >
                          {"Budget"}
                        </div>
                      ),

                      onChange: async (...eventArgs) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "open",
                          ["collapse4", "open"],
                          AntdSingleCollapse_Helpers
                        ).apply(null, eventArgs);
                      },
                      open: generateStateValueProp($state, [
                        "collapse4",
                        "open"
                      ]),
                      showArrow: true
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "open",
                          plasmicStateName: "collapse4.open"
                        }
                      ],

                      [],
                      AntdSingleCollapse_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <AntdSingleCollapse
                        data-plasmic-name={"collapse4"}
                        data-plasmic-override={overrides.collapse4}
                        {...child$Props}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.budget),
                            defaultValue: (() => {
                              try {
                                return $ctx.query.budget;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "All";
                                }
                                throw e;
                              }
                            })(),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "budget",
                                "value"
                              ]).apply(null, eventArgs);
                            },
                            optionType: "default",
                            options: (() => {
                              try {
                                return [
                                  "Below INR 50,000",
                                  "INR 50,000 to INR 1,00,000",
                                  "INR 1,00,000 to INR 1,50,000",
                                  "INR 1,50,000 to INR 2,00,000",
                                  "Above INR 2,00,000"
                                ];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })(),
                            value: generateStateValueProp($state, [
                              "budget",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "budget.value"
                              }
                            ],

                            [],
                            undefined ?? {},
                            child$Props
                          );
                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "budget.value",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return $ctx.query.budget;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "All";
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],

                            []
                          );
                          return (
                            <AntdRadioGroup
                              data-plasmic-name={"budget"}
                              data-plasmic-override={overrides.budget}
                              {...child$Props}
                            >
                              <AntdRadio
                                className={classNames(
                                  "__wab_instance",
                                  sty.radio__dtuo2
                                )}
                                value={"op1"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__m6LT
                                  )}
                                >
                                  {"Option 1"}
                                </div>
                              </AntdRadio>
                              <AntdRadio
                                className={classNames(
                                  "__wab_instance",
                                  sty.radio__dkLs1
                                )}
                                value={"op2"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___9FAu7
                                  )}
                                >
                                  {"Option 2"}
                                </div>
                              </AntdRadio>
                            </AntdRadioGroup>
                          );
                        })()}
                      </AntdSingleCollapse>
                    );
                  })()}
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"filterRatings"}
                  data-plasmic-override={overrides.filterRatings}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.filterRatings)}
                >
                  {(() => {
                    const child$Props = {
                      bordered: false,
                      className: classNames("__wab_instance", sty.collapse5),
                      defaultOpen: hasVariant(
                        globalVariants,
                        "screen",
                        "mobileOnly"
                      )
                        ? false
                        : true,
                      expandIcon: (
                        <DownAngleSvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___2Z4Ki
                          )}
                          role={"img"}
                        />
                      ),

                      expandIconPosition: "end",
                      ghost: true,
                      label2: (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__h3UAc
                          )}
                        >
                          {"Ratings"}
                        </div>
                      ),

                      onChange: async (...eventArgs) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "open",
                          ["collapse5", "open"],
                          AntdSingleCollapse_Helpers
                        ).apply(null, eventArgs);
                      },
                      open: generateStateValueProp($state, [
                        "collapse5",
                        "open"
                      ]),
                      showArrow: true
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "open",
                          plasmicStateName: "collapse5.open"
                        }
                      ],

                      [],
                      AntdSingleCollapse_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <AntdSingleCollapse
                        data-plasmic-name={"collapse5"}
                        data-plasmic-override={overrides.collapse5}
                        {...child$Props}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.rating),
                            defaultValue: (() => {
                              try {
                                return $ctx.query.rating || "All";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "All";
                                }
                                throw e;
                              }
                            })(),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "rating",
                                "value"
                              ]).apply(null, eventArgs);
                            },
                            optionType: "default",
                            options: (() => {
                              try {
                                return [
                                  "All",
                                  "Above 4.8+ Ratings",
                                  "Above 4.5+ Ratings",
                                  "Above 4+ Ratings",
                                  "Below 4 Ratings"
                                ];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })(),
                            value: generateStateValueProp($state, [
                              "rating",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "rating.value"
                              }
                            ],

                            [],
                            undefined ?? {},
                            child$Props
                          );
                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "rating.value",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return $ctx.query.rating || "All";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "All";
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],

                            []
                          );
                          return (
                            <AntdRadioGroup
                              data-plasmic-name={"rating"}
                              data-plasmic-override={overrides.rating}
                              {...child$Props}
                            >
                              <AntdRadio
                                className={classNames(
                                  "__wab_instance",
                                  sty.radio__egSZf
                                )}
                                value={"op1"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__uN7Pe
                                  )}
                                >
                                  {"Option 1"}
                                </div>
                              </AntdRadio>
                              <AntdRadio
                                className={classNames(
                                  "__wab_instance",
                                  sty.radio__kR10B
                                )}
                                value={"op2"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lFgAx
                                  )}
                                >
                                  {"Option 2"}
                                </div>
                              </AntdRadio>
                            </AntdRadioGroup>
                          );
                        })()}
                      </AntdSingleCollapse>
                    );
                  })()}
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"filterReviews"}
                  data-plasmic-override={overrides.filterReviews}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.filterReviews)}
                >
                  {(() => {
                    const child$Props = {
                      bordered: false,
                      className: classNames("__wab_instance", sty.collapse6),
                      defaultOpen: hasVariant(
                        globalVariants,
                        "screen",
                        "mobileOnly"
                      )
                        ? false
                        : true,
                      expandIcon: (
                        <DownAngleSvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___8RHum
                          )}
                          role={"img"}
                        />
                      ),

                      expandIconPosition: "end",
                      ghost: true,
                      label2: (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wZyc
                          )}
                        >
                          {"Reviews"}
                        </div>
                      ),

                      onChange: async (...eventArgs) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "open",
                          ["collapse6", "open"],
                          AntdSingleCollapse_Helpers
                        ).apply(null, eventArgs);
                      },
                      open: generateStateValueProp($state, [
                        "collapse6",
                        "open"
                      ]),
                      showArrow: true
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "open",
                          plasmicStateName: "collapse6.open"
                        }
                      ],

                      [],
                      AntdSingleCollapse_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <AntdSingleCollapse
                        data-plasmic-name={"collapse6"}
                        data-plasmic-override={overrides.collapse6}
                        {...child$Props}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.review),
                            defaultValue: (() => {
                              try {
                                return $ctx.query.review || "All";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "All";
                                }
                                throw e;
                              }
                            })(),
                            onChange: async (...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "review",
                                "value"
                              ]).apply(null, eventArgs);
                            },
                            optionType: "default",
                            options: (() => {
                              try {
                                return [
                                  "All",
                                  "Above 100+ Reviews",
                                  "Above 75+ Reviews",
                                  "Above 50+ Reviews",
                                  "Below 25 Reviews"
                                ];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })(),
                            value: generateStateValueProp($state, [
                              "review",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "review.value"
                              }
                            ],

                            [],
                            undefined ?? {},
                            child$Props
                          );
                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "review.value",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return $ctx.query.review || "All";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "All";
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],

                            []
                          );
                          return (
                            <AntdRadioGroup
                              data-plasmic-name={"review"}
                              data-plasmic-override={overrides.review}
                              {...child$Props}
                            >
                              <AntdRadio
                                className={classNames(
                                  "__wab_instance",
                                  sty.radio__v49ZW
                                )}
                                value={"op1"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xcDIq
                                  )}
                                >
                                  {"Option 1"}
                                </div>
                              </AntdRadio>
                              <AntdRadio
                                className={classNames(
                                  "__wab_instance",
                                  sty.radio__kdxGs
                                )}
                                value={"op2"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__evVmO
                                  )}
                                >
                                  {"Option 2"}
                                </div>
                              </AntdRadio>
                            </AntdRadioGroup>
                          );
                        })()}
                      </AntdSingleCollapse>
                    );
                  })()}
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"rightContainer"}
                data-plasmic-override={overrides.rightContainer}
                hasGap={true}
                className={classNames(projectcss.all, sty.rightContainer)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"breadcrumbContainer"}
                  data-plasmic-override={overrides.breadcrumbContainer}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.breadcrumbContainer
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__y5Kki
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.filterState.type || "All Vendors";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <AntdBreadcrumb
                    data-plasmic-name={"breadcrumb"}
                    data-plasmic-override={overrides.breadcrumb}
                    className={classNames("__wab_instance", sty.breadcrumb)}
                    itemsRaw={
                      <React.Fragment>
                        <AntdBreadcrumbItem
                          className={classNames(
                            "__wab_instance",
                            sty.breadcrumbItem__q3TdO
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tjoko
                            )}
                          >
                            {"Home"}
                          </div>
                        </AntdBreadcrumbItem>
                        <AntdBreadcrumbItem
                          className={classNames(
                            "__wab_instance",
                            sty.breadcrumbItem__lyY42
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hxvuE
                            )}
                          >
                            {"Vendor"}
                          </div>
                        </AntdBreadcrumbItem>
                        <AntdBreadcrumbItem
                          className={classNames(
                            "__wab_instance",
                            sty.breadcrumbItem__xSpfj
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rdHr3
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.filterState.type || "All";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </AntdBreadcrumbItem>
                      </React.Fragment>
                    }
                    separator={
                      <Frame1000006045Icon
                        className={classNames(projectcss.all, sty.svg__gkg7T)}
                        role={"img"}
                      />
                    }
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"productCardDetails"}
                  data-plasmic-override={overrides.productCardDetails}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.productCardDetails)}
                >
                  <Fetcher
                    data-plasmic-name={"productData"}
                    data-plasmic-override={overrides.productData}
                    dataOp={{
                      sourceId: "bvg9JqrXbdUtvMXZbC26cd",
                      opId: "2d5ae80c-c550-48d5-b597-347432e6f811",
                      userArgs: {},
                      cacheKey: `plasmic.$.m8Aerz2eBHjb.$.2d5ae80c-c550-48d5-b597-347432e6f811.$.`,
                      invalidatedKeys: null,
                      roleId: null
                    }}
                    queries={$queries}
                  >
                    {$queries => (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.advertisements.data.response.data.advSlots.data.filter(
                              item =>
                                item.attributes.Adv_Space.includes("Banner")
                            ).length;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })() ? (
                          <Promotions
                            data-plasmic-name={"promotions"}
                            data-plasmic-override={overrides.promotions}
                            className={classNames(
                              "__wab_instance",
                              sty.promotions
                            )}
                            featuredVendors={(() => {
                              try {
                                return $queries.advertisements.data.response.data.advSlots.data.filter(
                                  item =>
                                    item.attributes.Adv_Space.includes("Banner")
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return $queries.advertisements.data.response.data.advSlots.data.filter(
                              item => item.attributes.Adv_Space.includes("Card")
                            ).length;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <SectionCardWrapper2
                            data-plasmic-name={"featuringVendor"}
                            data-plasmic-override={overrides.featuringVendor}
                            btnLink={(() => {
                              try {
                                return "/city";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            cards2={
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"featuringVendorCard"}
                                data-plasmic-override={
                                  overrides.featuringVendorCard
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.featuringVendorCard
                                )}
                              >
                                <Reveal
                                  className={classNames(
                                    "__wab_instance",
                                    sty.reveal__b01OU
                                  )}
                                  triggerOnce={true}
                                >
                                  {(() => {
                                    const child$Props = {
                                      arrows: false,
                                      autoplay: true,
                                      beforeChange: async (...eventArgs) => {
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "currentSlide",
                                          ["sliderCarousel8", "currentSlide"],
                                          SliderWrapper_Helpers
                                        ).apply(null, eventArgs);
                                      },
                                      centerMode: hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? false
                                        : false,
                                      centerPadding: hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "0"
                                        : undefined,
                                      className: classNames(
                                        "__wab_instance",
                                        sty.sliderCarousel8
                                      ),
                                      initialSlide: generateStateValueProp(
                                        $state,
                                        ["sliderCarousel8", "currentSlide"]
                                      ),
                                      lazyLoad: "ondemand",
                                      ref: ref => {
                                        $refs["sliderCarousel8"] = ref;
                                      },
                                      sliderScopeClassName:
                                        sty["sliderCarousel8__slider"],
                                      slidesPerRow: hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? 1
                                        : 3
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "currentSlide",
                                          plasmicStateName:
                                            "sliderCarousel8.currentSlide"
                                        }
                                      ],

                                      [],
                                      SliderWrapper_Helpers ?? {},
                                      child$Props
                                    );
                                    return (
                                      <SliderWrapper
                                        data-plasmic-name={"sliderCarousel8"}
                                        data-plasmic-override={
                                          overrides.sliderCarousel8
                                        }
                                        {...child$Props}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return $queries.advertisements.data.response.data.advSlots.data.filter(
                                                item =>
                                                  item.attributes.Adv_Space.includes(
                                                    "Card"
                                                  )
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_0,
                                            __plasmic_idx_0
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_0;
                                            const currentIndex =
                                              __plasmic_idx_0;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__m13Hf
                                                )}
                                                key={currentIndex}
                                              >
                                                <FeaturingVendorCard
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.featuringVendorCard__nzJra
                                                  )}
                                                  featured={(() => {
                                                    try {
                                                      return currentItem.attributes;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return false;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  id={(() => {
                                                    try {
                                                      return currentItem
                                                        .attributes.store.id;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  images={(() => {
                                                    try {
                                                      return currentItem
                                                        .attributes.Banner.data
                                                        .attributes.url;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  location={(() => {
                                                    try {
                                                      return (() => {
                                                        const location =
                                                          currentItem.attributes
                                                            .store.data
                                                            .attributes
                                                            .locations.data[0]
                                                            .attributes;
                                                        return `${location.City}, ${location.State}`;
                                                      })();
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  name={(() => {
                                                    try {
                                                      return currentItem
                                                        .attributes.store.data
                                                        .attributes.Name;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  price={(() => {
                                                    try {
                                                      return (() => {
                                                        const services =
                                                          currentItem.attributes
                                                            .store.data
                                                            .attributes.services
                                                            .data;
                                                        const price =
                                                          services.map(
                                                            item =>
                                                              item.attributes
                                                                .serviceCharge
                                                          );
                                                        return price.length
                                                          ? Math.min(...price)
                                                          : 0;
                                                      })();
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  rating={(() => {
                                                    try {
                                                      return currentItem
                                                        .attributes.store.data
                                                        .attributes.rating;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return 4;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                />
                                              </div>
                                            );
                                          }
                                        )}
                                      </SliderWrapper>
                                    );
                                  })()}
                                </Reveal>
                              </Stack__>
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.featuringVendor
                            )}
                          />
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qoGqN
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return (() => {
                                  const rating =
                                    $state.filterState.rating.split(" ");
                                  const ratingDirection = rating[0];
                                  const ratingValue = Number.parseFloat(
                                    rating[1]
                                  );
                                  const review =
                                    $state.filterState.review.split(" ");
                                  const reviewDirection = review[0];
                                  const reviewValue = review[1];
                                  const result =
                                    $queries.vendors.data.response.data.stores.data.filter(
                                      item => {
                                        return (
                                          (!$state.filterState.city ||
                                            item.attributes?.locations?.data[0]
                                              ?.attributes?.City ===
                                              $state.filterState.city) &&
                                          (!$state.filterState.type ||
                                            item.attributes?.tags.includes(
                                              $state.filterState.type
                                            )) &&
                                          (!$state.filterState.venue ||
                                            item.attributes?.tags.includes(
                                              $state.filterState.venue
                                            )) &&
                                          (!$state.filterState.rating ||
                                            (ratingDirection === "Above"
                                              ? item.attributes?.rating >=
                                                ratingValue
                                              : item.attributes?.rating <=
                                                ratingValue)) &&
                                          (!$state.filterState.review ||
                                            (reviewDirection === "Above"
                                              ? item.attributes?.reviews?.data
                                                  ?.length >= reviewValue
                                              : item.attributes?.reviews?.data
                                                  ?.length <= ratingValue)) &&
                                          (!$state.filterState.searchTerm ||
                                            item.attributes?.Name.toLowerCase().includes(
                                              $ctx.query.key.toLowerCase()
                                            ))
                                        );
                                      }
                                    );
                                  return result;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <FeaturingVendorCard
                                className={classNames(
                                  "__wab_instance",
                                  sty.featuringVendorCard__wVpL
                                )}
                                id={(() => {
                                  try {
                                    return currentItem.id;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                images={(() => {
                                  try {
                                    return currentItem?.attributes
                                      ?.profile_picture?.data?.attributes?.url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                key={currentIndex}
                                location={(() => {
                                  try {
                                    return `${currentItem.attributes.locations.data[0].attributes.City}, ${currentItem.attributes.locations.data[0].attributes.State}`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                name={(() => {
                                  try {
                                    return currentItem.attributes.Name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                price={`60000${(() => {
                                  const services =
                                    currentItem.attributes.services.data;
                                  const price = services.map(
                                    item => item.attributes.serviceCharge
                                  );
                                  return price.length ? Math.min(...price) : 0;
                                })()}`}
                                rating={(() => {
                                  try {
                                    return $state.rating.value;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return 4;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            );
                          })}
                        </div>
                      </React.Fragment>
                    )}
                  </Fetcher>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.pagination),
                      current: generateStateValueProp($state, [
                        "pagination",
                        "currentPage"
                      ]),
                      defaultCurrent: 1,
                      defaultPageSize: 15,
                      onChange: async (...eventArgs) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "currentPage",
                          ["pagination", "currentPage"],
                          AntdPagination_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "startIndex",
                          ["pagination", "startIndex"],
                          AntdPagination_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "endIndex",
                          ["pagination", "endIndex"],
                          AntdPagination_Helpers
                        ).apply(null, eventArgs);
                      },
                      onShowSizeChange: async (...eventArgs) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "pageSize",
                          ["pagination", "pageSize"],
                          AntdPagination_Helpers
                        ).apply(null, eventArgs);
                      },
                      pageSize: generateStateValueProp($state, [
                        "pagination",
                        "pageSize"
                      ]),
                      pageSizeOptions: [
                        { pageSize: 10 },
                        { pageSize: 20 },
                        { pageSize: 50 },
                        { pageSize: 100 }
                      ],

                      simple: false,
                      total: (() => {
                        try {
                          return $queries.vendors.data.response.data.stores.meta
                            .pagination.total;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 30;
                          }
                          throw e;
                        }
                      })()
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "currentPage",
                          plasmicStateName: "pagination.currentPage"
                        },
                        {
                          name: "pageSize",
                          plasmicStateName: "pagination.pageSize"
                        },
                        {
                          name: "startIndex",
                          plasmicStateName: "pagination.startIndex"
                        },
                        {
                          name: "endIndex",
                          plasmicStateName: "pagination.endIndex"
                        }
                      ],

                      [],
                      AntdPagination_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <AntdPagination
                        data-plasmic-name={"pagination"}
                        data-plasmic-override={overrides.pagination}
                        {...child$Props}
                      />
                    );
                  })()}
                </Stack__>
              </Stack__>
            </div>
            <SectionCardWrapper2
              data-plasmic-name={"weddingArticles"}
              data-plasmic-override={overrides.weddingArticles}
              btnName={"View All Articles"}
              cards2={
                <Stack__
                  as={"div"}
                  data-plasmic-name={"weddingArticlesCard"}
                  data-plasmic-override={overrides.weddingArticlesCard}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.weddingArticlesCard
                  )}
                >
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal___0HGeQ)}
                    triggerOnce={true}
                  >
                    {(() => {
                      const child$Props = {
                        arrows: false,
                        autoplay: true,
                        beforeChange: async (...eventArgs) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "currentSlide",
                            ["sliderCarousel7", "currentSlide"],
                            SliderWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        centerMode: hasVariant(
                          globalVariants,
                          "screen",
                          "mobileOnly"
                        )
                          ? false
                          : false,
                        centerPadding: hasVariant(
                          globalVariants,
                          "screen",
                          "mobileOnly"
                        )
                          ? "0"
                          : undefined,
                        className: classNames(
                          "__wab_instance",
                          sty.sliderCarousel7
                        ),
                        initialSlide: generateStateValueProp($state, [
                          "sliderCarousel7",
                          "currentSlide"
                        ]),
                        ref: ref => {
                          $refs["sliderCarousel7"] = ref;
                        },
                        sliderScopeClassName: sty["sliderCarousel7__slider"],
                        slidesPerRow: hasVariant(
                          globalVariants,
                          "screen",
                          "mobileOnly"
                        )
                          ? 1
                          : 4
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "currentSlide",
                            plasmicStateName: "sliderCarousel7.currentSlide"
                          }
                        ],

                        [],
                        SliderWrapper_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <SliderWrapper
                          data-plasmic-name={"sliderCarousel7"}
                          data-plasmic-override={overrides.sliderCarousel7}
                          {...child$Props}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return [
                                  {
                                    image:
                                      "https://s3-alpha-sig.figma.com/img/f759/226d/9e7119048aa3678d20f59e1dbbe61957?Expires=1721001600&Key-Pair-Id=APKAQ4GOSFWCVNEHN3O4&Signature=UnzcYpPY5u6oQi45PXimhQEtChRrIEgV~cXddtOOXEf3oFuHyleOeAynbwikRy0nv4PfMI3B2GsbJbuTo5Q2bEgcdKuOpuZQI1EDj3v8-RdKXHMQDNw5d--YYdOSZWkeADMtBH3-Yxn7PiOqc1myldgDOPmPbQb4Sq8ZqeKWVvX9rJqN4f-3I6ltSBhtGxiTh75xXjZLLhkBR7SJqIqst116JPSgp0~wrviMkCrLbHTuiK2EJ~AJgafIM-0Y6ypNsa4PjuLH6NKTqbM7fv7wYRTrH7ct9lOL6MKUEjUORX2Yf9G6Z8efhtNX~VY5~HUzi8fEEWJcUFbqC~0i2lHrPw__",
                                    title:
                                      "Choose the Perfect wedding Photographer",
                                    description: `Discover tips for selecting a wedding photographer who can capture your special moments beautifully.`,
                                    tags: [
                                      "Photography",
                                      "WeddingPlanning",
                                      "Tips"
                                    ]
                                  },
                                  {
                                    image:
                                      "https://s3-alpha-sig.figma.com/img/2740/c2ae/4fc573a120d4080b70011dc291162357?Expires=1721001600&Key-Pair-Id=APKAQ4GOSFWCVNEHN3O4&Signature=S22YTCWi1NUlhH5zWH12-u1lsA7ZdP8lja2ZfdMZB6pjPIPRzQgpF-wiaDAWlGxxrX5rjJkIYyFroRhWwJNuRGi2JKOecl1Zjd7DlUUijbq5shKkF5gflC4b1nL1vbBBDZ1mzi0sGFNnKL5uimZV9m1QZZZeyleSQtGX9-sDYGX~rZoL5an~4C1kibKoGzhYfU5NlgQXAOvBr7-Tf3k8BbM0Kq5kbpBgxxzp6ymJrCMlcqd4nLxryPXOah7dKgXx4FLLZkTPBTp3hhf6k~yNFPqt6PGuGZP1vl3voD5N8~tNJ5E9k4PDZ9bvTipFpGezBTxzJoB~4H~huu9Pr~7ehA__",
                                    title: "Gourmet Catering Ideas",
                                    description: `Explore delicious and customizable menu ideas to make your wedding feast unforgettable.`,
                                    tags: ["Catering", "WeddingFood", "Gourmet"]
                                  },
                                  {
                                    image:
                                      "https://s3-alpha-sig.figma.com/img/950d/2845/9d364bfe0e1fc1d9ba5fc985046784bf?Expires=1721001600&Key-Pair-Id=APKAQ4GOSFWCVNEHN3O4&Signature=hkNpTdx-XO-G8DHgc~1eCoFVHxZEnxsXniQ2eVuiYHjLr-U2hn2BO55NsthjhmLSSNYtV5riaBhEXEZB-BWdtnSJ7adSXdl64WsLsXX4~gWrZMuc7YD2o5O3IZLZdshUX-TsImohNdXE1xexAk9ijn7-6jFgHD2Xz~vemhnUsxqz028n5W36j~R492ajYNQ7V74Z8R~886CFUYV9aO8keuwuk5dhJWpv6xER3lcgkZj1MnRU1oAIWXFAqiq89PN4hYHXZ76wm1Res1ZtjvskocOLzaHjcxAtWf0l19iXUO3UU13XhcyjHwSXPW54FjhUGLsc1MwUcM-fs4MP02gQ~g__",
                                    title: "Stunning Floral Arrangements",
                                    description: `Learn how to transform your wedding venue with breathtaking floral designs.`,
                                    tags: [
                                      "Florists",
                                      "FloralDesign",
                                      "WeddingDecor"
                                    ]
                                  },
                                  {
                                    image:
                                      "https://s3-alpha-sig.figma.com/img/5125/cfe1/3b4ad08956f66a7fa5f0869a3a16b57b?Expires=1721001600&Key-Pair-Id=APKAQ4GOSFWCVNEHN3O4&Signature=a7OXwNKh6xZX66yHWd9THoP0~uJVteBRCvYXIxJ8Gl~X2ZTT2wq54dn2521U9HnDSVM5q6qVE-iSPFNSOOentPSraaJ-N5qQXXrEGqoPftC8XtO1HZc9BMGr0DKh9IaCbRz0ZfpaT1UrZYR-9ZXX0TgQbMD-AH9-BBxT4wFlZyDk04SHiGvA5bpqMQPqW6LXdW8zKJ-w-ynzmblFnCl9Lu6GXq0ZQOcF1ps9I5CI1ve5tu8OM2nfJr77mIqOB7z21U5gZjFOvOgLl5cVS5anW8TB-f1QiseI08eSXo8MXMv4ao0-E-JtzrnqPWbJY~7TtIFekYIAfusCAglWZ1rDMQ__",
                                    title:
                                      "Top Wedding Entertainment Options for your wedding.",
                                    description: `Find the best live music and entertainment options to set the perfect mood for your wedding.`,
                                    tags: [
                                      "Music",
                                      "Entertainment",
                                      "WeddingIdeas"
                                    ]
                                  },
                                  {
                                    image:
                                      "https://s3-alpha-sig.figma.com/img/d0f7/7a2b/002ddab225b508929febd8ab1f845102?Expires=1721001600&Key-Pair-Id=APKAQ4GOSFWCVNEHN3O4&Signature=GsfmUOdWBdr3lVqs8pW0SOwrV~aA-G~na924W-BC8RlNZ7jTQJ73TRLLotopDMFSHCiZ-QFOm1AgLPFJaY4mPDdsMZKC8JWroDVsMhAhVKx7Mn3PoxGq7xM4mpvEf1VPwaf~u6RF~L0naVl9-J9s5-N5bBsNdatsIJR20w03Kw2tEpzUG6YqWkx4Hs3tUusH-Vp9fcfG8ENilht8V-ByrcNrWTe5H8b~cDJQn7siudS5Ew0TLWnFXy5OL8VTdV~Bj7cmZ-nQYTig8ajZQDcOvhr9w4TuOjGqd3UIlr96uyHctlMDASKYQP7RnvCRO9ZuS0c8mOgoZ-hpTiMCBVS4MA__",
                                    title: "Gourmet Catering Ideas",
                                    description: `Explore delicious and customizable menu ideas to make your wedding feast unforgettable.`,
                                    tags: ["Catering", "WeddingFood", "Gourmet"]
                                  },
                                  {
                                    image:
                                      "https://s3-alpha-sig.figma.com/img/f759/226d/9e7119048aa3678d20f59e1dbbe61957?Expires=1721001600&Key-Pair-Id=APKAQ4GOSFWCVNEHN3O4&Signature=UnzcYpPY5u6oQi45PXimhQEtChRrIEgV~cXddtOOXEf3oFuHyleOeAynbwikRy0nv4PfMI3B2GsbJbuTo5Q2bEgcdKuOpuZQI1EDj3v8-RdKXHMQDNw5d--YYdOSZWkeADMtBH3-Yxn7PiOqc1myldgDOPmPbQb4Sq8ZqeKWVvX9rJqN4f-3I6ltSBhtGxiTh75xXjZLLhkBR7SJqIqst116JPSgp0~wrviMkCrLbHTuiK2EJ~AJgafIM-0Y6ypNsa4PjuLH6NKTqbM7fv7wYRTrH7ct9lOL6MKUEjUORX2Yf9G6Z8efhtNX~VY5~HUzi8fEEWJcUFbqC~0i2lHrPw__",
                                    title:
                                      "Choose the Perfect wedding Photographer",
                                    description: `Discover tips for selecting a wedding photographer who can capture your special moments beautifully.`,
                                    tags: [
                                      "Photography",
                                      "WeddingPlanning",
                                      "Tips"
                                    ]
                                  },
                                  {
                                    image:
                                      "https://s3-alpha-sig.figma.com/img/2740/c2ae/4fc573a120d4080b70011dc291162357?Expires=1721001600&Key-Pair-Id=APKAQ4GOSFWCVNEHN3O4&Signature=S22YTCWi1NUlhH5zWH12-u1lsA7ZdP8lja2ZfdMZB6pjPIPRzQgpF-wiaDAWlGxxrX5rjJkIYyFroRhWwJNuRGi2JKOecl1Zjd7DlUUijbq5shKkF5gflC4b1nL1vbBBDZ1mzi0sGFNnKL5uimZV9m1QZZZeyleSQtGX9-sDYGX~rZoL5an~4C1kibKoGzhYfU5NlgQXAOvBr7-Tf3k8BbM0Kq5kbpBgxxzp6ymJrCMlcqd4nLxryPXOah7dKgXx4FLLZkTPBTp3hhf6k~yNFPqt6PGuGZP1vl3voD5N8~tNJ5E9k4PDZ9bvTipFpGezBTxzJoB~4H~huu9Pr~7ehA__",
                                    title: "Gourmet Catering Ideas",
                                    description: `Explore delicious and customizable menu ideas to make your wedding feast unforgettable.`,
                                    tags: ["Catering", "WeddingFood", "Gourmet"]
                                  },
                                  {
                                    image:
                                      "https://s3-alpha-sig.figma.com/img/950d/2845/9d364bfe0e1fc1d9ba5fc985046784bf?Expires=1721001600&Key-Pair-Id=APKAQ4GOSFWCVNEHN3O4&Signature=hkNpTdx-XO-G8DHgc~1eCoFVHxZEnxsXniQ2eVuiYHjLr-U2hn2BO55NsthjhmLSSNYtV5riaBhEXEZB-BWdtnSJ7adSXdl64WsLsXX4~gWrZMuc7YD2o5O3IZLZdshUX-TsImohNdXE1xexAk9ijn7-6jFgHD2Xz~vemhnUsxqz028n5W36j~R492ajYNQ7V74Z8R~886CFUYV9aO8keuwuk5dhJWpv6xER3lcgkZj1MnRU1oAIWXFAqiq89PN4hYHXZ76wm1Res1ZtjvskocOLzaHjcxAtWf0l19iXUO3UU13XhcyjHwSXPW54FjhUGLsc1MwUcM-fs4MP02gQ~g__",
                                    title: "Stunning Floral Arrangements",
                                    description: `Learn how to transform your wedding venue with breathtaking floral designs.`,
                                    tags: [
                                      "Florists",
                                      "FloralDesign",
                                      "WeddingDecor"
                                    ]
                                  }
                                ];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__gtHob
                                )}
                                key={currentIndex}
                              >
                                <WeddingArticlesCard2
                                  data-plasmic-name={"weddingArticlesCard2"}
                                  data-plasmic-override={
                                    overrides.weddingArticlesCard2
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.weddingArticlesCard2
                                  )}
                                  description={(() => {
                                    try {
                                      return currentItem.description;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  image={(() => {
                                    try {
                                      return currentItem.image;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  name={(() => {
                                    try {
                                      return currentItem.title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  tags={(() => {
                                    try {
                                      return { tag: currentItem.tags };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return {
                                          tag: [
                                            "Photography",
                                            "WeddingPlanning",
                                            "Tips"
                                          ]
                                        };
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              </div>
                            );
                          })}
                        </SliderWrapper>
                      );
                    })()}
                  </Reveal>
                </Stack__>
              }
              className={classNames("__wab_instance", sty.weddingArticles)}
              title={"Wedding Articles"}
            />
          </LayerDefault>
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={(() => {
              try {
                return console.log($state.filterState);
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "layerDefault",
    "bodyContainer",
    "leftContainer",
    "filterCity",
    "collapse",
    "city",
    "filterVenue",
    "collapse7",
    "venue",
    "filterType",
    "collapse2",
    "vendor",
    "filterBudget",
    "collapse4",
    "budget",
    "filterRatings",
    "collapse5",
    "rating",
    "filterReviews",
    "collapse6",
    "review",
    "rightContainer",
    "breadcrumbContainer",
    "breadcrumb",
    "productCardDetails",
    "productData",
    "promotions",
    "featuringVendor",
    "featuringVendorCard",
    "sliderCarousel8",
    "pagination",
    "weddingArticles",
    "weddingArticlesCard",
    "sliderCarousel7",
    "weddingArticlesCard2",
    "embedHtml"
  ],

  layerDefault: [
    "layerDefault",
    "bodyContainer",
    "leftContainer",
    "filterCity",
    "collapse",
    "city",
    "filterVenue",
    "collapse7",
    "venue",
    "filterType",
    "collapse2",
    "vendor",
    "filterBudget",
    "collapse4",
    "budget",
    "filterRatings",
    "collapse5",
    "rating",
    "filterReviews",
    "collapse6",
    "review",
    "rightContainer",
    "breadcrumbContainer",
    "breadcrumb",
    "productCardDetails",
    "productData",
    "promotions",
    "featuringVendor",
    "featuringVendorCard",
    "sliderCarousel8",
    "pagination",
    "weddingArticles",
    "weddingArticlesCard",
    "sliderCarousel7",
    "weddingArticlesCard2"
  ],

  bodyContainer: [
    "bodyContainer",
    "leftContainer",
    "filterCity",
    "collapse",
    "city",
    "filterVenue",
    "collapse7",
    "venue",
    "filterType",
    "collapse2",
    "vendor",
    "filterBudget",
    "collapse4",
    "budget",
    "filterRatings",
    "collapse5",
    "rating",
    "filterReviews",
    "collapse6",
    "review",
    "rightContainer",
    "breadcrumbContainer",
    "breadcrumb",
    "productCardDetails",
    "productData",
    "promotions",
    "featuringVendor",
    "featuringVendorCard",
    "sliderCarousel8",
    "pagination"
  ],

  leftContainer: [
    "leftContainer",
    "filterCity",
    "collapse",
    "city",
    "filterVenue",
    "collapse7",
    "venue",
    "filterType",
    "collapse2",
    "vendor",
    "filterBudget",
    "collapse4",
    "budget",
    "filterRatings",
    "collapse5",
    "rating",
    "filterReviews",
    "collapse6",
    "review"
  ],

  filterCity: ["filterCity", "collapse", "city"],
  collapse: ["collapse", "city"],
  city: ["city"],
  filterVenue: ["filterVenue", "collapse7", "venue"],
  collapse7: ["collapse7", "venue"],
  venue: ["venue"],
  filterType: ["filterType", "collapse2", "vendor"],
  collapse2: ["collapse2", "vendor"],
  vendor: ["vendor"],
  filterBudget: ["filterBudget", "collapse4", "budget"],
  collapse4: ["collapse4", "budget"],
  budget: ["budget"],
  filterRatings: ["filterRatings", "collapse5", "rating"],
  collapse5: ["collapse5", "rating"],
  rating: ["rating"],
  filterReviews: ["filterReviews", "collapse6", "review"],
  collapse6: ["collapse6", "review"],
  review: ["review"],
  rightContainer: [
    "rightContainer",
    "breadcrumbContainer",
    "breadcrumb",
    "productCardDetails",
    "productData",
    "promotions",
    "featuringVendor",
    "featuringVendorCard",
    "sliderCarousel8",
    "pagination"
  ],

  breadcrumbContainer: ["breadcrumbContainer", "breadcrumb"],
  breadcrumb: ["breadcrumb"],
  productCardDetails: [
    "productCardDetails",
    "productData",
    "promotions",
    "featuringVendor",
    "featuringVendorCard",
    "sliderCarousel8",
    "pagination"
  ],

  productData: [
    "productData",
    "promotions",
    "featuringVendor",
    "featuringVendorCard",
    "sliderCarousel8"
  ],

  promotions: ["promotions"],
  featuringVendor: [
    "featuringVendor",
    "featuringVendorCard",
    "sliderCarousel8"
  ],

  featuringVendorCard: ["featuringVendorCard", "sliderCarousel8"],
  sliderCarousel8: ["sliderCarousel8"],
  pagination: ["pagination"],
  weddingArticles: [
    "weddingArticles",
    "weddingArticlesCard",
    "sliderCarousel7",
    "weddingArticlesCard2"
  ],

  weddingArticlesCard: [
    "weddingArticlesCard",
    "sliderCarousel7",
    "weddingArticlesCard2"
  ],

  sliderCarousel7: ["sliderCarousel7", "weddingArticlesCard2"],
  weddingArticlesCard2: ["weddingArticlesCard2"],
  embedHtml: ["embedHtml"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSearch__ArgProps,
          internalVariantPropNames: PlasmicSearch__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSearch__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearch";
  } else {
    func.displayName = `PlasmicSearch.${nodeName}`;
  }
  return func;
}

export const PlasmicSearch = Object.assign(
  // Top-level PlasmicSearch renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    layerDefault: makeNodeComponent("layerDefault"),
    bodyContainer: makeNodeComponent("bodyContainer"),
    leftContainer: makeNodeComponent("leftContainer"),
    filterCity: makeNodeComponent("filterCity"),
    collapse: makeNodeComponent("collapse"),
    city: makeNodeComponent("city"),
    filterVenue: makeNodeComponent("filterVenue"),
    collapse7: makeNodeComponent("collapse7"),
    venue: makeNodeComponent("venue"),
    filterType: makeNodeComponent("filterType"),
    collapse2: makeNodeComponent("collapse2"),
    vendor: makeNodeComponent("vendor"),
    filterBudget: makeNodeComponent("filterBudget"),
    collapse4: makeNodeComponent("collapse4"),
    budget: makeNodeComponent("budget"),
    filterRatings: makeNodeComponent("filterRatings"),
    collapse5: makeNodeComponent("collapse5"),
    rating: makeNodeComponent("rating"),
    filterReviews: makeNodeComponent("filterReviews"),
    collapse6: makeNodeComponent("collapse6"),
    review: makeNodeComponent("review"),
    rightContainer: makeNodeComponent("rightContainer"),
    breadcrumbContainer: makeNodeComponent("breadcrumbContainer"),
    breadcrumb: makeNodeComponent("breadcrumb"),
    productCardDetails: makeNodeComponent("productCardDetails"),
    productData: makeNodeComponent("productData"),
    promotions: makeNodeComponent("promotions"),
    featuringVendor: makeNodeComponent("featuringVendor"),
    featuringVendorCard: makeNodeComponent("featuringVendorCard"),
    sliderCarousel8: makeNodeComponent("sliderCarousel8"),
    pagination: makeNodeComponent("pagination"),
    weddingArticles: makeNodeComponent("weddingArticles"),
    weddingArticlesCard: makeNodeComponent("weddingArticlesCard"),
    sliderCarousel7: makeNodeComponent("sliderCarousel7"),
    weddingArticlesCard2: makeNodeComponent("weddingArticlesCard2"),
    embedHtml: makeNodeComponent("embedHtml"),
    // Metadata about props expected for PlasmicSearch
    internalVariantProps: PlasmicSearch__VariantProps,
    internalArgProps: PlasmicSearch__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSearch;
/* prettier-ignore-end */
