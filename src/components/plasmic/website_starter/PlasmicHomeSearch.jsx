// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: FUlO4nunxKtN
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import ButtonContainer from "../../ButtonContainer"; // plasmic-import: dK0EsHLm2W5O/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { useScreenVariants as useScreenVariantszapf5SksSeNd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ZAPF5sksSeNd/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicHomeSearch.module.css"; // plasmic-import: FUlO4nunxKtN/css
import DownAngleSvgIcon from "./icons/PlasmicIcon__DownAngleSvg"; // plasmic-import: zPP2D2BXmuYX/icon

createPlasmicElementProxy;

export const PlasmicHomeSearch__VariantProps = new Array();

export const PlasmicHomeSearch__ArgProps = new Array("data");

const $$ = {};

function PlasmicHomeSearch__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          data: {
            vendors: [],
            locations: [],
            availability: [],
            pricing: [
              "Below INR 50,000",
              "INR 50,000 to INR 1,00,000",
              "INR 1,00,000 to INR 1,50,000",
              "INR 1,50,000 to INR 2,00,000",
              "INR 2,00,000 Above"
            ]
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "vendors.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "location.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "pricing.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "availability.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszapf5SksSeNd()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__iaCbn
        )}
      >
        {"Find the Perfect Wedding Vendors"}
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <AntdSelect
          data-plasmic-name={"vendors"}
          data-plasmic-override={overrides.vendors}
          bordered={false}
          className={classNames("__wab_instance", sty.vendors)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          onChange={async (...eventArgs) => {
            generateStateOnChangeProp($state, ["vendors", "value"]).apply(
              null,
              eventArgs
            );
          }}
          options={(() => {
            try {
              return $props.data.vendors.map(label => ({
                label,
                value: label
              }));
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  { value: "option1", label: "Option 1", type: "option" },
                  { value: "option2", label: "Option 2", type: "option" }
                ];
              }
              throw e;
            }
          })()}
          placeholder={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dDWg
              )}
            >
              {"Vendors"}
            </div>
          }
          popupScopeClassName={sty["vendors__popup"]}
          showSearch={true}
          suffixIcon={
            <DownAngleSvgIcon
              className={classNames(projectcss.all, sty.svg__a9PmA)}
              role={"img"}
            />
          }
          value={generateStateValueProp($state, ["vendors", "value"])}
        />

        <AntdSelect
          data-plasmic-name={"location"}
          data-plasmic-override={overrides.location}
          bordered={false}
          className={classNames("__wab_instance", sty.location)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          onChange={async (...eventArgs) => {
            generateStateOnChangeProp($state, ["location", "value"]).apply(
              null,
              eventArgs
            );
          }}
          options={(() => {
            try {
              return $props.data.locations.map(label => ({
                label,
                value: label
              }));
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  { value: "option1", label: "Option 1", type: "option" },
                  { value: "option2", label: "Option 2", type: "option" }
                ];
              }
              throw e;
            }
          })()}
          placeholder={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uxBfW
              )}
            >
              {"Location"}
            </div>
          }
          popupScopeClassName={sty["location__popup"]}
          showSearch={true}
          suffixIcon={
            <DownAngleSvgIcon
              className={classNames(projectcss.all, sty.svg__pbUr6)}
              role={"img"}
            />
          }
          value={generateStateValueProp($state, ["location", "value"])}
        />

        <AntdSelect
          data-plasmic-name={"pricing"}
          data-plasmic-override={overrides.pricing}
          bordered={false}
          className={classNames("__wab_instance", sty.pricing)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          onChange={async (...eventArgs) => {
            generateStateOnChangeProp($state, ["pricing", "value"]).apply(
              null,
              eventArgs
            );
          }}
          options={(() => {
            try {
              return $props.data.pricing.map(label => ({
                label,
                value: label
              }));
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  { value: "option1", label: "Option 1", type: "option" },
                  { value: "option2", label: "Option 2", type: "option" }
                ];
              }
              throw e;
            }
          })()}
          placeholder={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1ZB5E
              )}
            >
              {"Pricing"}
            </div>
          }
          popupScopeClassName={sty["pricing__popup"]}
          showSearch={true}
          suffixIcon={
            <DownAngleSvgIcon
              className={classNames(projectcss.all, sty.svg__h5C0N)}
              role={"img"}
            />
          }
          value={generateStateValueProp($state, ["pricing", "value"])}
        />

        <AntdSelect
          data-plasmic-name={"availability"}
          data-plasmic-override={overrides.availability}
          bordered={false}
          className={classNames("__wab_instance", sty.availability)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          onChange={async (...eventArgs) => {
            generateStateOnChangeProp($state, ["availability", "value"]).apply(
              null,
              eventArgs
            );
          }}
          options={[
            { value: "option1", label: "Option 1", type: "option" },
            { value: "option2", label: "Option 2", type: "option" }
          ]}
          placeholder={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__q3ZaI
              )}
            >
              {"Availability"}
            </div>
          }
          popupScopeClassName={sty["availability__popup"]}
          showSearch={true}
          suffixIcon={
            <DownAngleSvgIcon
              className={classNames(projectcss.all, sty.svg__zQvby)}
              role={"img"}
            />
          }
          value={generateStateValueProp($state, ["availability", "value"])}
        />

        <ButtonContainer
          data-plasmic-name={"buttonContainer"}
          data-plasmic-override={overrides.buttonContainer}
          className={classNames("__wab_instance", sty.buttonContainer)}
        >
          <AntdButton
            data-plasmic-name={"search"}
            data-plasmic-override={overrides.search}
            className={classNames("__wab_instance", sty.search)}
            type={"ghost"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___0XpZj
              )}
            >
              {"Search"}
            </div>
          </AntdButton>
        </ButtonContainer>
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "vendors",
    "location",
    "pricing",
    "availability",
    "buttonContainer",
    "search"
  ],

  freeBox: [
    "freeBox",
    "vendors",
    "location",
    "pricing",
    "availability",
    "buttonContainer",
    "search"
  ],

  vendors: ["vendors"],
  location: ["location"],
  pricing: ["pricing"],
  availability: ["availability"],
  buttonContainer: ["buttonContainer", "search"],
  search: ["search"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomeSearch__ArgProps,
          internalVariantPropNames: PlasmicHomeSearch__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomeSearch__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomeSearch";
  } else {
    func.displayName = `PlasmicHomeSearch.${nodeName}`;
  }
  return func;
}

export const PlasmicHomeSearch = Object.assign(
  // Top-level PlasmicHomeSearch renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    vendors: makeNodeComponent("vendors"),
    location: makeNodeComponent("location"),
    pricing: makeNodeComponent("pricing"),
    availability: makeNodeComponent("availability"),
    buttonContainer: makeNodeComponent("buttonContainer"),
    search: makeNodeComponent("search"),
    // Metadata about props expected for PlasmicHomeSearch
    internalVariantProps: PlasmicHomeSearch__VariantProps,
    internalArgProps: PlasmicHomeSearch__ArgProps
  }
);

export default PlasmicHomeSearch;
/* prettier-ignore-end */
