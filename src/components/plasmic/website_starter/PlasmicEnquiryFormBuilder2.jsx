// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: MfbC6E--Zvyv
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  initializePlasmicStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv, useGlobalActions } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import TextInput from "../../TextInput"; // plasmic-import: leRyjw1OHU5j/component
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import ButtonContainer from "../../ButtonContainer"; // plasmic-import: dK0EsHLm2W5O/component
import Button2 from "../../Button2"; // plasmic-import: x0IYxFtlqF54/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicEnquiryFormBuilder2.module.css"; // plasmic-import: MfbC6E--Zvyv/css

createPlasmicElementProxy;

export const PlasmicEnquiryFormBuilder2__VariantProps = new Array();

export const PlasmicEnquiryFormBuilder2__ArgProps = new Array(
  "enquiryForm",
  "currentEnquiry",
  "building",
  "currentUser",
  "formId"
);

const $$ = {};

function PlasmicEnquiryFormBuilder2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          enquiryForm: [],
          currentEnquiry: {},
          building: true,
          currentUser: {}
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const $globalActions = useGlobalActions?.();
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "typeone[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "typethreeradio[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "typethreedate[].value",
        type: "private",
        variableType: "text",
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "typetwo[].value",
        type: "private",
        variableType: "text",
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "replyForm",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.enquiryForm;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return { questions: [] };
              }
              throw e;
            }
          })()
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___65FXy
        )}
      >
        {"DETAILED ENQUIRY FORM"}
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___2KQcM
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return (
                "Dear " +
                $props.currentEnquiry.attributes.users_permissions_user.data
                  .attributes.username +
                ", thanks for getting in touch with us. Fill this following form to get our estimate."
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "User";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__xsyqh)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.enquiryForm.questions.filter(
                ques => ques.Type === "Type_1"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__agKcu)}
              key={currentIndex}
            >
              <div className={classNames(projectcss.all, sty.column__z8BmJ)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dG1V
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.Question;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__uwml4)}>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.typeone),
                    name: (() => {
                      try {
                        return currentItem.id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    onChange: async (...eventArgs) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "typeone",
                          __plasmic_idx_0,
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                      (async event => {
                        const $steps = {};
                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return ($state.replyForm.questions[
                                    currentItem.id
                                  ] = {
                                    id: currentItem.id,
                                    Type: currentItem.Type,
                                    Question: currentItem.Question,
                                    Answer: $state.typeone[currentIndex].value
                                  });
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }).apply(null, eventArgs);
                    },
                    placeholder: "Type here...",
                    value:
                      generateStateValueProp($state, [
                        "typeone",
                        __plasmic_idx_0,
                        "value"
                      ]) ?? ""
                  };
                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "typeone[].value",
                        initFunc: ({ $props, $state, $queries }) => ""
                      }
                    ],

                    [__plasmic_idx_0]
                  );
                  return (
                    <TextInput
                      data-plasmic-name={"typeone"}
                      data-plasmic-override={overrides.typeone}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
            </Stack__>
          );
        })}
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.enquiryForm.questions.filter(
                ques => ques.Type === "Type_2"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__kqXoU)}
              key={currentIndex}
            >
              <div className={classNames(projectcss.all, sty.column__xonyx)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nnY6E
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.Question;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__oUuQ)}>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.typetwo),
                    onChange: async (...eventArgs) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["typetwo", __plasmic_idx_0, "value"],
                        AntdDatePicker_Helpers
                      ).apply(null, eventArgs);
                      (async value => {
                        const $steps = {};
                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return ($state.replyForm.questions[
                                    currentItem.id
                                  ] = {
                                    id: currentItem.id,
                                    Type: currentItem.Type,
                                    Question: currentItem.Question,
                                    Date: $state.typetwo[currentIndex].value
                                  });
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }).apply(null, eventArgs);
                    },
                    popupScopeClassName: sty["typetwo__datePickerPopup"],
                    value: generateStateValueProp($state, [
                      "typetwo",
                      __plasmic_idx_0,
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "typetwo[].value"
                      }
                    ],

                    [__plasmic_idx_0],
                    AntdDatePicker_Helpers ?? {},
                    child$Props
                  );
                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "typetwo[].value",
                        initFunc: ({ $props, $state, $queries }) => undefined
                      }
                    ],

                    [__plasmic_idx_0]
                  );
                  return (
                    <AntdDatePicker
                      data-plasmic-name={"typetwo"}
                      data-plasmic-override={overrides.typetwo}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
            </Stack__>
          );
        })}
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.enquiryForm.questions.filter(
                ques => ques.Type === "Type_3"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__vrCR)}
              key={currentIndex}
            >
              <div className={classNames(projectcss.all, sty.column___8OMyT)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gyZz6
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.Question;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__ivjA0)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__p68Cq)}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames(
                        "__wab_instance",
                        sty.typethreeradio
                      ),
                      onChange: async (...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "typethreeradio",
                          __plasmic_idx_0,
                          "value"
                        ]).apply(null, eventArgs);
                        (async value => {
                          const $steps = {};
                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return ($state.replyForm.questions[
                                      currentItem.id
                                    ] = {
                                      id: currentItem.id,
                                      Type: currentItem.Type,
                                      Question: currentItem.Question,
                                      Answer:
                                        $state.typethreeradio[currentIndex]
                                          .value
                                    });
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }).apply(null, eventArgs);
                      },
                      options: (() => {
                        const __composite = [
                          { value: null, label: null },
                          { value: null, label: null }
                        ];

                        __composite["0"]["value"] = "Yes";
                        __composite["0"]["label"] = "Yes";
                        __composite["1"]["value"] = "No";
                        __composite["1"]["label"] = "No";
                        return __composite;
                      })(),
                      value: generateStateValueProp($state, [
                        "typethreeradio",
                        __plasmic_idx_0,
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "typethreeradio[].value"
                        }
                      ],

                      [__plasmic_idx_0],
                      undefined ?? {},
                      child$Props
                    );
                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "typethreeradio[].value",
                          initFunc: ({ $props, $state, $queries }) => undefined
                        }
                      ],

                      [__plasmic_idx_0]
                    );
                    return (
                      <AntdRadioGroup
                        data-plasmic-name={"typethreeradio"}
                        data-plasmic-override={overrides.typethreeradio}
                        {...child$Props}
                      >
                        <AntdRadio
                          className={classNames(
                            "__wab_instance",
                            sty.radio__hWt9D
                          )}
                          value={"op1"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__brdz9
                            )}
                          >
                            {"Option 1"}
                          </div>
                        </AntdRadio>
                        <AntdRadio
                          className={classNames(
                            "__wab_instance",
                            sty.radio__ikPrN
                          )}
                          value={"op2"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hj6B
                            )}
                          >
                            {"Option 2"}
                          </div>
                        </AntdRadio>
                      </AntdRadioGroup>
                    );
                  })()}
                  {(() => {
                    const child$Props = {
                      className: classNames(
                        "__wab_instance",
                        sty.typethreedate
                      ),
                      disabled: (() => {
                        try {
                          return (
                            $state.typethreeradio[currentIndex].value !== "Yes"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })(),
                      onChange: async (...eventArgs) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["typethreedate", __plasmic_idx_0, "value"],
                          AntdDatePicker_Helpers
                        ).apply(null, eventArgs);
                        (async value => {
                          const $steps = {};
                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return ($state.replyForm.questions[
                                      currentItem.id
                                    ] = {
                                      id: currentItem.id,
                                      Type: currentItem.Type,
                                      Question: currentItem.Question,
                                      Answer:
                                        $state.typethreeradio[currentIndex]
                                          .value,
                                      Date: $state.typethreedate[currentIndex]
                                        .value
                                    });
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }).apply(null, eventArgs);
                      },
                      popupScopeClassName:
                        sty["typethreedate__datePickerPopup"],
                      value: generateStateValueProp($state, [
                        "typethreedate",
                        __plasmic_idx_0,
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "typethreedate[].value"
                        }
                      ],

                      [__plasmic_idx_0],
                      AntdDatePicker_Helpers ?? {},
                      child$Props
                    );
                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "typethreedate[].value",
                          initFunc: ({ $props, $state, $queries }) => undefined
                        }
                      ],

                      [__plasmic_idx_0]
                    );
                    return (
                      <AntdDatePicker
                        data-plasmic-name={"typethreedate"}
                        data-plasmic-override={overrides.typethreedate}
                        {...child$Props}
                      />
                    );
                  })()}
                </Stack__>
              </div>
            </Stack__>
          );
        })}
        <ButtonContainer
          data-plasmic-name={"buttonContainer"}
          data-plasmic-override={overrides.buttonContainer}
          className={classNames("__wab_instance", sty.buttonContainer)}
        >
          {(() => {
            try {
              return !$props.building;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Button2
              data-plasmic-name={"button2"}
              data-plasmic-override={overrides.button2}
              className={classNames("__wab_instance", sty.button2)}
              color={"red"}
              isDisabled={(() => {
                try {
                  return !(
                    $state.typeone.every(ques => ques.value) &&
                    $state.typetwo.every(ques => ques.value) &&
                    $state.typethreeradio.every(ques => ques.value) &&
                    $state.typethreeradio.every((ques, index) =>
                      ques.value === "Yes"
                        ? $state.typethreedate[index].value
                        : true
                    )
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};
                $steps["httpPut"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "9Ec94AiZppYUapp3zS4mTp",
                          opId: "1d861cb7-a040-45db-b7e7-bbb41b8b3e42",
                          userArgs: {
                            path: [$props.currentEnquiry.id],
                            body: [
                              {
                                answers: $state.replyForm,
                                Status: "Conversion",
                                forms: { disconnect: [$props.formId] }
                              }
                            ]
                          },
                          cacheKey: null,
                          invalidatedKeys: ["plasmic_refresh_all"],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["httpPut"] != null &&
                  typeof $steps["httpPut"] === "object" &&
                  typeof $steps["httpPut"].then === "function"
                ) {
                  $steps["httpPut"] = await $steps["httpPut"];
                }
                $steps["invokeGlobalAction"] = $steps.httpPut.data.response
                  ? (() => {
                      const actionArgs = {
                        args: ["success", "Form submitted!"]
                      };
                      return $globalActions[
                        "plasmic-antd5-config-provider.showNotification"
                      ]?.apply(null, [...actionArgs.args]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }
                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return console.log($steps.httpPut);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8Nduv
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FFFFFFE0" }}
                  >
                    {"Submit"}
                  </span>
                </React.Fragment>
              </div>
            </Button2>
          ) : null}
        </ButtonContainer>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "typeone",
    "typetwo",
    "typethreeradio",
    "typethreedate",
    "buttonContainer",
    "button2"
  ],

  typeone: ["typeone"],
  typetwo: ["typetwo"],
  typethreeradio: ["typethreeradio"],
  typethreedate: ["typethreedate"],
  buttonContainer: ["buttonContainer", "button2"],
  button2: ["button2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEnquiryFormBuilder2__ArgProps,
          internalVariantPropNames: PlasmicEnquiryFormBuilder2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEnquiryFormBuilder2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEnquiryFormBuilder2";
  } else {
    func.displayName = `PlasmicEnquiryFormBuilder2.${nodeName}`;
  }
  return func;
}

export const PlasmicEnquiryFormBuilder2 = Object.assign(
  // Top-level PlasmicEnquiryFormBuilder2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    typeone: makeNodeComponent("typeone"),
    typetwo: makeNodeComponent("typetwo"),
    typethreeradio: makeNodeComponent("typethreeradio"),
    typethreedate: makeNodeComponent("typethreedate"),
    buttonContainer: makeNodeComponent("buttonContainer"),
    button2: makeNodeComponent("button2"),
    // Metadata about props expected for PlasmicEnquiryFormBuilder2
    internalVariantProps: PlasmicEnquiryFormBuilder2__VariantProps,
    internalArgProps: PlasmicEnquiryFormBuilder2__ArgProps
  }
);

export default PlasmicEnquiryFormBuilder2;
/* prettier-ignore-end */
