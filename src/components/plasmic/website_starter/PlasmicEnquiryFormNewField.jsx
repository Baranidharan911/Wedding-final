// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: p4TzcZn14AEL
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import Button2 from "../../Button2"; // plasmic-import: x0IYxFtlqF54/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicEnquiryFormNewField.module.css"; // plasmic-import: p4TzcZn14AEL/css

createPlasmicElementProxy;

export const PlasmicEnquiryFormNewField__VariantProps = new Array();

export const PlasmicEnquiryFormNewField__ArgProps = new Array("enquiryForm");

const $$ = {};

function PlasmicEnquiryFormNewField__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "dateTimePicker2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dateTimePicker3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Type here..."
      },
      {
        path: "showQuestion",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      {(() => {
        const child$Props = {
          addonAfter: (
            <AntdButton
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wO0Vb
                )}
              >
                {"Add"}
              </div>
            </AntdButton>
          ),

          addonBefore: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uZ8Go
              )}
            >
              {"Enter  Question"}
            </div>
          ),

          bordered: true,
          className: classNames("__wab_instance", sty.input),
          onChange: async (...eventArgs) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "value",
              ["input", "value"],
              AntdInput_Helpers
            ).apply(null, eventArgs);
            (async event => {
              const $steps = {};
              $steps["updateDateTimePicker2Value"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["dateTimePicker2", "value"]
                      },
                      operation: 0
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;
                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDateTimePicker2Value"] != null &&
                typeof $steps["updateDateTimePicker2Value"] === "object" &&
                typeof $steps["updateDateTimePicker2Value"].then === "function"
              ) {
                $steps["updateDateTimePicker2Value"] = await $steps[
                  "updateDateTimePicker2Value"
                ];
              }
            }).apply(null, eventArgs);
          },
          value: generateStateValueProp($state, ["input", "value"])
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "value",
              plasmicStateName: "input.value"
            }
          ],

          [],
          AntdInput_Helpers ?? {},
          child$Props
        );
        return (
          <AntdInput
            data-plasmic-name={"input"}
            data-plasmic-override={overrides.input}
            {...child$Props}
          />
        );
      })()}
      <AntdDropdown
        data-plasmic-name={"dropdown"}
        data-plasmic-override={overrides.dropdown}
        className={classNames("__wab_instance", sty.dropdown)}
        dropdownMenuScopeClassName={sty["dropdown__dropdownMenu"]}
        fakeOpen={false}
        menuItems={() => (
          <React.Fragment>
            <AntdMenuItem
              className={classNames("__wab_instance", sty.menuItem__wArSd)}
              key={"menu-item-1"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__liIfF
                )}
              >
                {"Type 1"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__cUpBq)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__z3YnQ
                  )}
                >
                  {"Question"}
                </div>
                <input
                  data-plasmic-name={"textarea"}
                  data-plasmic-override={overrides.textarea}
                  className={classNames(
                    projectcss.all,
                    projectcss.input,
                    sty.textarea
                  )}
                  disabled={true}
                  onChange={async (...eventArgs) => {
                    (e => {
                      generateStateOnChangeProp($state, ["textarea", "value"])(
                        e.target.value
                      );
                    }).apply(null, eventArgs);
                  }}
                  ref={ref => {
                    $refs["textarea"] = ref;
                  }}
                  type={"text"}
                  value={
                    generateStateValueProp($state, ["textarea", "value"]) ?? ""
                  }
                />
              </Stack__>
            </AntdMenuItem>
            <AntdMenuItem
              className={classNames("__wab_instance", sty.menuItem__ccz7C)}
              key={"menu-item-2"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__w7Mg9
                )}
              >
                {"Type 2"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__tXe9A)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8Bb1L
                  )}
                >
                  {"Question"}
                </div>
                {(() => {
                  const child$Props = {
                    className: classNames(
                      "__wab_instance",
                      sty.dateTimePicker2
                    ),
                    disabled: true,
                    onChange: async (...eventArgs) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["dateTimePicker2", "value"],
                        AntdDatePicker_Helpers
                      ).apply(null, eventArgs);
                    },
                    popupScopeClassName:
                      sty["dateTimePicker2__datePickerPopup"],
                    value: generateStateValueProp($state, [
                      "dateTimePicker2",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "dateTimePicker2.value"
                      }
                    ],

                    [],
                    AntdDatePicker_Helpers ?? {},
                    child$Props
                  );
                  return (
                    <AntdDatePicker
                      data-plasmic-name={"dateTimePicker2"}
                      data-plasmic-override={overrides.dateTimePicker2}
                      {...child$Props}
                    />
                  );
                })()}
              </Stack__>
            </AntdMenuItem>
            <AntdMenuItem
              className={classNames("__wab_instance", sty.menuItem__okct7)}
              key={"menu-item-3"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e58Dx
                )}
              >
                {"Type 3"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__xnJxN)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dp2Vn
                  )}
                >
                  {"Question"}
                </div>
                <AntdRadioGroup
                  data-plasmic-name={"radioGroup"}
                  data-plasmic-override={overrides.radioGroup}
                  className={classNames("__wab_instance", sty.radioGroup)}
                  disabled={true}
                  onChange={async (...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "radioGroup",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  options={(() => {
                    const __composite = [
                      { value: null, label: null },
                      { value: null, label: null }
                    ];

                    __composite["0"]["value"] = "yes";
                    __composite["0"]["label"] = "Yes";
                    __composite["1"]["value"] = "no";
                    __composite["1"]["label"] = "No";
                    return __composite;
                  })()}
                  value={generateStateValueProp($state, [
                    "radioGroup",
                    "value"
                  ])}
                >
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio___3HkVh)}
                    value={"op1"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cTsDf
                      )}
                    >
                      {"Option 1"}
                    </div>
                  </AntdRadio>
                  <AntdRadio
                    className={classNames("__wab_instance", sty.radio___0KIzh)}
                    value={"op2"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iKyDj
                      )}
                    >
                      {"Option 2"}
                    </div>
                  </AntdRadio>
                </AntdRadioGroup>
                {(() => {
                  const child$Props = {
                    className: classNames(
                      "__wab_instance",
                      sty.dateTimePicker3
                    ),
                    disabled: true,
                    onChange: async (...eventArgs) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["dateTimePicker3", "value"],
                        AntdDatePicker_Helpers
                      ).apply(null, eventArgs);
                    },
                    popupScopeClassName:
                      sty["dateTimePicker3__datePickerPopup"],
                    value: generateStateValueProp($state, [
                      "dateTimePicker3",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "dateTimePicker3.value"
                      }
                    ],

                    [],
                    AntdDatePicker_Helpers ?? {},
                    child$Props
                  );
                  return (
                    <AntdDatePicker
                      data-plasmic-name={"dateTimePicker3"}
                      data-plasmic-override={overrides.dateTimePicker3}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
            </AntdMenuItem>
          </React.Fragment>
        )}
        menuItemsJson={[
          { type: "item", value: "action1", label: "Action 1" },
          { type: "item", value: "action2", label: "Action 2" }
        ]}
        placement={"topCenter"}
        useMenuItemsSlot={true}
      >
        <Button2
          data-plasmic-name={"button2"}
          data-plasmic-override={overrides.button2}
          className={classNames("__wab_instance", sty.button2)}
          color={"red"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wGn0O
            )}
          >
            {"Add new field"}
          </div>
        </Button2>
      </AntdDropdown>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "input",
    "button",
    "dropdown",
    "textarea",
    "dateTimePicker2",
    "radioGroup",
    "dateTimePicker3",
    "button2"
  ],

  input: ["input", "button"],
  button: ["button"],
  dropdown: [
    "dropdown",
    "textarea",
    "dateTimePicker2",
    "radioGroup",
    "dateTimePicker3",
    "button2"
  ],

  textarea: ["textarea"],
  dateTimePicker2: ["dateTimePicker2"],
  radioGroup: ["radioGroup"],
  dateTimePicker3: ["dateTimePicker3"],
  button2: ["button2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEnquiryFormNewField__ArgProps,
          internalVariantPropNames: PlasmicEnquiryFormNewField__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEnquiryFormNewField__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEnquiryFormNewField";
  } else {
    func.displayName = `PlasmicEnquiryFormNewField.${nodeName}`;
  }
  return func;
}

export const PlasmicEnquiryFormNewField = Object.assign(
  // Top-level PlasmicEnquiryFormNewField renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    input: makeNodeComponent("input"),
    button: makeNodeComponent("button"),
    dropdown: makeNodeComponent("dropdown"),
    textarea: makeNodeComponent("textarea"),
    dateTimePicker2: makeNodeComponent("dateTimePicker2"),
    radioGroup: makeNodeComponent("radioGroup"),
    dateTimePicker3: makeNodeComponent("dateTimePicker3"),
    button2: makeNodeComponent("button2"),
    // Metadata about props expected for PlasmicEnquiryFormNewField
    internalVariantProps: PlasmicEnquiryFormNewField__VariantProps,
    internalArgProps: PlasmicEnquiryFormNewField__ArgProps
  }
);

export default PlasmicEnquiryFormNewField;
/* prettier-ignore-end */
