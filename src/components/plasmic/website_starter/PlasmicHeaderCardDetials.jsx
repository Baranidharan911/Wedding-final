// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: uJDLuof9GsRX
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { AntdRate } from "@plasmicpkgs/antd5/skinny/registerRate";
import ArrowButton from "../../ArrowButton"; // plasmic-import: GPJwH2d4oKSt/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicHeaderCardDetials.module.css"; // plasmic-import: uJDLuof9GsRX/css

createPlasmicElementProxy;

export const PlasmicHeaderCardDetials__VariantProps = new Array();

export const PlasmicHeaderCardDetials__ArgProps = new Array();

const $$ = {};

function PlasmicHeaderCardDetials__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "rate.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___06Nqk)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__nfj96
          )}
        >
          {""}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___54Y1J
          )}
        >
          {""}
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___1YzOz)}
        >
          <AntdRate
            data-plasmic-name={"rate"}
            data-plasmic-override={overrides.rate}
            className={classNames("__wab_instance", sty.rate)}
            onChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, ["rate", "value"]).apply(
                null,
                eventArgs
              );
            }}
            symbols={
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__de6Os
                  )}
                >
                  {"1"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zHc26
                  )}
                >
                  {"2"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kfhB2
                  )}
                >
                  {"3"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tmuDd
                  )}
                >
                  {"4"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9U44G
                  )}
                >
                  {"5"}
                </div>
              </React.Fragment>
            }
            value={generateStateValueProp($state, ["rate", "value"])}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jggAt
            )}
          >
            {""}
          </div>
        </Stack__>
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__d1Ybm)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__p9Q8
          )}
        >
          {""}
        </div>
        <ArrowButton
          data-plasmic-name={"arrowButton"}
          data-plasmic-override={overrides.arrowButton}
          className={classNames("__wab_instance", sty.arrowButton)}
        />
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "rate", "arrowButton"],
  rate: ["rate"],
  arrowButton: ["arrowButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeaderCardDetials__ArgProps,
          internalVariantPropNames: PlasmicHeaderCardDetials__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeaderCardDetials__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeaderCardDetials";
  } else {
    func.displayName = `PlasmicHeaderCardDetials.${nodeName}`;
  }
  return func;
}

export const PlasmicHeaderCardDetials = Object.assign(
  // Top-level PlasmicHeaderCardDetials renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    rate: makeNodeComponent("rate"),
    arrowButton: makeNodeComponent("arrowButton"),
    // Metadata about props expected for PlasmicHeaderCardDetials
    internalVariantProps: PlasmicHeaderCardDetials__VariantProps,
    internalArgProps: PlasmicHeaderCardDetials__ArgProps
  }
);

export default PlasmicHeaderCardDetials;
/* prettier-ignore-end */
