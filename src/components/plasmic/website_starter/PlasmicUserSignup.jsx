// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: VaDaeNgKfVwH
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import LayerDefault from "../../LayerDefault"; // plasmic-import: 4uZwDUl-gHmp/component
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import Button2 from "../../Button2"; // plasmic-import: x0IYxFtlqF54/component
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicUserSignup.module.css"; // plasmic-import: VaDaeNgKfVwH/css

createPlasmicElementProxy;

export const PlasmicUserSignup__VariantProps = new Array();

export const PlasmicUserSignup__ArgProps = new Array();

const $$ = {};

function PlasmicUserSignup__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "registerForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "registerForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "registerForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "registerForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "loginForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "loginForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "loginForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "loginForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <LayerDefault
            data-plasmic-name={"layerDefault"}
            data-plasmic-override={overrides.layerDefault}
            className={classNames("__wab_instance", sty.layerDefault)}
          >
            <TabsContainer
              data-plasmic-name={"tabsContainer"}
              data-plasmic-override={overrides.tabsContainer}
              initialKey={"login"}
              previewKey={"login"}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nuBl)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sl4Bu)}
                    >
                      <TabButton
                        data-plasmic-name={"loginButton"}
                        data-plasmic-override={overrides.loginButton}
                        className={classNames(
                          "__wab_instance",
                          sty.loginButton
                        )}
                        tabKey={"login"}
                      >
                        <Button2 color={"clear"}>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nw1Lg
                            )}
                          >
                            {"Login"}
                          </div>
                        </Button2>
                      </TabButton>
                      <TabButton
                        data-plasmic-name={"registerButton"}
                        data-plasmic-override={overrides.registerButton}
                        className={classNames(
                          "__wab_instance",
                          sty.registerButton
                        )}
                        tabKey={"register"}
                      >
                        <Button2 color={"clear"}>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9SGby
                            )}
                          >
                            {"Sign up"}
                          </div>
                        </Button2>
                      </TabButton>
                      <TabUnderline
                        data-plasmic-name={"tabUnderline"}
                        data-plasmic-override={overrides.tabUnderline}
                        className={classNames(
                          "__wab_instance",
                          sty.tabUnderline
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ebx8A)}
                    >
                      <TabContent
                        data-plasmic-name={"register"}
                        data-plasmic-override={overrides.register}
                        className={classNames("__wab_instance", sty.register)}
                        tabKey={"register"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dePck
                          )}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.registerForm
                              ),
                              extendedOnValuesChange: async (...eventArgs) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["registerForm", "value"],
                                  FormWrapper_Helpers
                                ).apply(null, eventArgs);
                              },
                              formItems: undefined,
                              labelCol: { span: 8, horizontalOnly: true },
                              layout: "vertical",
                              mode: undefined,
                              onIsSubmittingChange: async (...eventArgs) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "isSubmitting",
                                  ["registerForm", "isSubmitting"],
                                  FormWrapper_Helpers
                                ).apply(null, eventArgs);
                              },
                              ref: ref => {
                                $refs["registerForm"] = ref;
                              },
                              wrapperCol: { span: 16, horizontalOnly: true }
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "registerForm.value"
                                },
                                {
                                  name: "isSubmitting",
                                  plasmicStateName: "registerForm.isSubmitting"
                                }
                              ],

                              [],
                              FormWrapper_Helpers ?? {},
                              child$Props
                            );
                            return (
                              <FormWrapper
                                data-plasmic-name={"registerForm"}
                                data-plasmic-override={overrides.registerForm}
                                {...child$Props}
                              >
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField___9087
                                  )}
                                  label={"Username"}
                                  name={"username"}
                                >
                                  <AntdInput
                                    className={classNames(
                                      "__wab_instance",
                                      sty.input__kyU0C
                                    )}
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__c7RA1
                                  )}
                                  label={"Email"}
                                  name={"email"}
                                >
                                  <AntdInput
                                    className={classNames(
                                      "__wab_instance",
                                      sty.input__lwob2
                                    )}
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__ombm4
                                  )}
                                  label={"Password"}
                                  name={"password"}
                                >
                                  <AntdPassword
                                    className={classNames(
                                      "__wab_instance",
                                      sty.passwordInput__pEjp2
                                    )}
                                  />
                                </FormItemWrapper>
                                <AntdButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__xYXtl
                                  )}
                                  danger={true}
                                  submitsForm={true}
                                  type={"primary"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__fyZ3
                                    )}
                                  >
                                    {"Submit"}
                                  </div>
                                </AntdButton>
                              </FormWrapper>
                            );
                          })()}
                        </div>
                      </TabContent>
                      <TabContent
                        data-plasmic-name={"login"}
                        data-plasmic-override={overrides.login}
                        className={classNames("__wab_instance", sty.login)}
                        tabKey={"login"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bBmq2
                          )}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.loginForm
                              ),
                              extendedOnValuesChange: async (...eventArgs) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["loginForm", "value"],
                                  FormWrapper_Helpers
                                ).apply(null, eventArgs);
                              },
                              formItems: undefined,
                              labelCol: { span: 8, horizontalOnly: true },
                              layout: "vertical",
                              mode: undefined,
                              onIsSubmittingChange: async (...eventArgs) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "isSubmitting",
                                  ["loginForm", "isSubmitting"],
                                  FormWrapper_Helpers
                                ).apply(null, eventArgs);
                              },
                              ref: ref => {
                                $refs["loginForm"] = ref;
                              },
                              wrapperCol: { span: 16, horizontalOnly: true }
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "loginForm.value"
                                },
                                {
                                  name: "isSubmitting",
                                  plasmicStateName: "loginForm.isSubmitting"
                                }
                              ],

                              [],
                              FormWrapper_Helpers ?? {},
                              child$Props
                            );
                            return (
                              <FormWrapper
                                data-plasmic-name={"loginForm"}
                                data-plasmic-override={overrides.loginForm}
                                {...child$Props}
                              >
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__q9J8T
                                  )}
                                  label={"Email"}
                                  name={"email"}
                                >
                                  <AntdInput
                                    className={classNames(
                                      "__wab_instance",
                                      sty.input___60M1C
                                    )}
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__kot2R
                                  )}
                                  label={"Password"}
                                  name={"password"}
                                >
                                  <AntdPassword
                                    className={classNames(
                                      "__wab_instance",
                                      sty.passwordInput__eemjw
                                    )}
                                  />
                                </FormItemWrapper>
                                <AntdButton
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__d0YwG
                                  )}
                                  danger={true}
                                  submitsForm={true}
                                  type={"primary"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__syVhq
                                    )}
                                  >
                                    {"Submit"}
                                  </div>
                                </AntdButton>
                              </FormWrapper>
                            );
                          })()}
                        </div>
                      </TabContent>
                    </div>
                  </div>
                )}
              </DataCtxReader__>
            </TabsContainer>
          </LayerDefault>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "layerDefault",
    "tabsContainer",
    "loginButton",
    "registerButton",
    "tabUnderline",
    "register",
    "registerForm",
    "login",
    "loginForm"
  ],

  layerDefault: [
    "layerDefault",
    "tabsContainer",
    "loginButton",
    "registerButton",
    "tabUnderline",
    "register",
    "registerForm",
    "login",
    "loginForm"
  ],

  tabsContainer: [
    "tabsContainer",
    "loginButton",
    "registerButton",
    "tabUnderline",
    "register",
    "registerForm",
    "login",
    "loginForm"
  ],

  loginButton: ["loginButton"],
  registerButton: ["registerButton"],
  tabUnderline: ["tabUnderline"],
  register: ["register", "registerForm"],
  registerForm: ["registerForm"],
  login: ["login", "loginForm"],
  loginForm: ["loginForm"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUserSignup__ArgProps,
          internalVariantPropNames: PlasmicUserSignup__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUserSignup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUserSignup";
  } else {
    func.displayName = `PlasmicUserSignup.${nodeName}`;
  }
  return func;
}

export const PlasmicUserSignup = Object.assign(
  // Top-level PlasmicUserSignup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    layerDefault: makeNodeComponent("layerDefault"),
    tabsContainer: makeNodeComponent("tabsContainer"),
    loginButton: makeNodeComponent("loginButton"),
    registerButton: makeNodeComponent("registerButton"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    register: makeNodeComponent("register"),
    registerForm: makeNodeComponent("registerForm"),
    login: makeNodeComponent("login"),
    loginForm: makeNodeComponent("loginForm"),
    // Metadata about props expected for PlasmicUserSignup
    internalVariantProps: PlasmicUserSignup__VariantProps,
    internalArgProps: PlasmicUserSignup__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicUserSignup;
/* prettier-ignore-end */
