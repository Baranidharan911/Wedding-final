// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: 6Xb_XVxcRgdA
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import Spinner from "../../Spinner"; // plasmic-import: mr_E4LUxuhwI/component
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdPagination } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { paginationHelpers as AntdPagination_Helpers } from "@plasmicpkgs/antd5/skinny/registerPagination";
import EnquiryForm from "../../EnquiryForm"; // plasmic-import: o-FKpOvt35MV/component
import { useScreenVariants as useScreenVariantszapf5SksSeNd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ZAPF5sksSeNd/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicUserEnquiriesTable.module.css"; // plasmic-import: 6Xb_XVxcRgdA/css
import ReviewsSvgIcon from "./icons/PlasmicIcon__ReviewsSvg"; // plasmic-import: GJ-OM5Ye5vqX/icon
import MessagesPeoplePersonBubble1Icon from "./icons/PlasmicIcon__MessagesPeoplePersonBubble1"; // plasmic-import: IdixEc2FgfFa/icon
import BackSvgrepoComSvgIcon from "./icons/PlasmicIcon__BackSvgrepoComSvg"; // plasmic-import: wpYSXM7SC3NG/icon

createPlasmicElementProxy;

export const PlasmicUserEnquiriesTable__VariantProps = new Array();

export const PlasmicUserEnquiriesTable__ArgProps = new Array();

const $$ = {};

function PlasmicUserEnquiriesTable__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "pagination.currentPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1,
        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "pagination.pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 20,
        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "pagination.startIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "pagination.endIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszapf5SksSeNd()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <TabsContainer
        data-plasmic-name={"tabsContainer"}
        data-plasmic-override={overrides.tabsContainer}
        initialKey={"inbox"}
        previewAll={false}
        previewKey={"inbox"}
      >
        <DataCtxReader__>
          {$ctx => (
            <div className={classNames(projectcss.all, sty.freeBox__ibCvz)}>
              <TabContent
                data-plasmic-name={"inbox"}
                data-plasmic-override={overrides.inbox}
                className={classNames("__wab_instance", sty.inbox)}
                tabKey={"inbox"}
              >
                <Fetcher
                  data-plasmic-name={"enquiries"}
                  data-plasmic-override={overrides.enquiries}
                  name={"enquiriesInfo"}
                  queries={{}}
                >
                  {$queries => (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.enquiriesInfo.isLoading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Spinner
                          data-plasmic-name={"spinner"}
                          data-plasmic-override={overrides.spinner}
                          className={classNames("__wab_instance", sty.spinner)}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return !$queries.enquiriesInfo.isLoading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"grid"}
                          data-plasmic-override={overrides.grid}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.grid)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__ixnYm
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__rdj6Z
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lt5Oi
                                )}
                              >
                                {"Event Date"}
                              </div>
                            </div>
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.enquiriesInfo.data.response.data.enquiries.data.map(
                                    item => item.attributes
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__cjqgk
                                  )}
                                  key={currentIndex}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__uy7Lb
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return new Date(
                                            currentItem.Date
                                          ).toLocaleDateString("en-US", {
                                            year: "numeric",
                                            month: "long",
                                            day: "numeric"
                                          });
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Event Date";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__kl8Ja
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__lcbuh
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yQLe
                                )}
                              >
                                {"Budget"}
                              </div>
                            </div>
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.enquiriesInfo.data.response.data.enquiries.data.map(
                                    item => item.attributes
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ot2Kt
                                  )}
                                  key={currentIndex}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__a41D
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.Budget;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Event Type";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__vkAnd
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__sd1Im
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rhCiU
                                )}
                              >
                                {"Event Location"}
                              </div>
                            </div>
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.enquiriesInfo.data.response.data.enquiries.data.map(
                                    item => item.attributes
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__bniOb
                                  )}
                                  key={currentIndex}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__rPoCn
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem?.location
                                            ?.Location;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Event Location";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__ahWyn
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__z41Ub
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__juE6I
                                )}
                              >
                                {"Status"}
                              </div>
                            </div>
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.enquiriesInfo.data.response.data.enquiries.data.map(
                                    item => item.attributes
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__z3QUh
                                  )}
                                  key={currentIndex}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__fDlN9
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (() => {
                                            switch (currentItem.Status) {
                                              case "Lead":
                                                return "Pending";
                                              case "Prospect":
                                                return "Pending";
                                              case "FollowUp":
                                                return "Form Sent, Please Reply";
                                              case "Conversion":
                                                return "Accepted";
                                              case "Discarded":
                                                return "Denied";
                                              default:
                                                return "Some error occured. Please referesh or contact the admin";
                                            }
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Client Name";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column___17SOf
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ptN7S
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__bg2MJ
                                )}
                              >
                                {"Action"}
                              </div>
                            </div>
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.enquiriesInfo.data.response.data.enquiries.data.map(
                                    item => {
                                      return {
                                        id: item.id,
                                        ...item.attributes
                                      };
                                    }
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__vZx49
                                  )}
                                  key={currentIndex}
                                >
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___3QdW
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__a5TSk
                                      )}
                                    >
                                      <TabButton
                                        data-plasmic-name={"enquiryButton"}
                                        data-plasmic-override={
                                          overrides.enquiryButton
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.enquiryButton
                                        )}
                                        tabKey={"enquiry"}
                                      >
                                        <AntdButton
                                          data-plasmic-name={"message"}
                                          data-plasmic-override={
                                            overrides.message
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.message
                                          )}
                                          size={"small"}
                                          type={"ghost"}
                                        >
                                          <ReviewsSvgIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__cX8Li
                                            )}
                                            role={"img"}
                                          />
                                        </AntdButton>
                                      </TabButton>
                                    </div>
                                    {(() => {
                                      try {
                                        return currentItem.forms.data[0].id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return false;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__lUkP
                                        )}
                                      >
                                        <AntdButton
                                          data-plasmic-name={"message2"}
                                          data-plasmic-override={
                                            overrides.message2
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.message2
                                          )}
                                          size={"small"}
                                          type={"ghost"}
                                        >
                                          <MessagesPeoplePersonBubble1Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__g4Z1
                                            )}
                                            role={"img"}
                                          />
                                        </AntdButton>
                                      </div>
                                    ) : null}
                                  </Stack__>
                                </div>
                              );
                            })}
                          </div>
                        </Stack__>
                      ) : null}
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.pagination
                          ),
                          current: generateStateValueProp($state, [
                            "pagination",
                            "currentPage"
                          ]),
                          defaultCurrent: 1,
                          defaultPageSize: 20,
                          onChange: async (...eventArgs) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "currentPage",
                              ["pagination", "currentPage"],
                              AntdPagination_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "startIndex",
                              ["pagination", "startIndex"],
                              AntdPagination_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "endIndex",
                              ["pagination", "endIndex"],
                              AntdPagination_Helpers
                            ).apply(null, eventArgs);
                          },
                          onShowSizeChange: async (...eventArgs) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "pageSize",
                              ["pagination", "pageSize"],
                              AntdPagination_Helpers
                            ).apply(null, eventArgs);
                          },
                          pageSize: generateStateValueProp($state, [
                            "pagination",
                            "pageSize"
                          ]),
                          pageSizeOptions: [
                            { pageSize: 10 },
                            { pageSize: 20 },
                            { pageSize: 50 },
                            { pageSize: 100 }
                          ],

                          total: (() => {
                            try {
                              return $queries.enquiriesInfo.data.response.data
                                .enquiries.meta.pagination.total;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "currentPage",
                              plasmicStateName: "pagination.currentPage"
                            },
                            {
                              name: "pageSize",
                              plasmicStateName: "pagination.pageSize"
                            },
                            {
                              name: "startIndex",
                              plasmicStateName: "pagination.startIndex"
                            },
                            {
                              name: "endIndex",
                              plasmicStateName: "pagination.endIndex"
                            }
                          ],

                          [],
                          AntdPagination_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdPagination
                            data-plasmic-name={"pagination"}
                            data-plasmic-override={overrides.pagination}
                            {...child$Props}
                          />
                        );
                      })()}
                    </React.Fragment>
                  )}
                </Fetcher>
              </TabContent>
              <TabContent
                data-plasmic-name={"enquiry"}
                data-plasmic-override={overrides.enquiry}
                className={classNames("__wab_instance", sty.enquiry)}
                tabKey={"enquiry"}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___5CydH)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vfeYn)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__mwHi6)}
                    >
                      <TabButton
                        data-plasmic-name={"back"}
                        data-plasmic-override={overrides.back}
                        className={classNames("__wab_instance", sty.back)}
                        tabKey={"inbox"}
                      >
                        <AntdButton
                          data-plasmic-name={"button"}
                          data-plasmic-override={overrides.button}
                          className={classNames("__wab_instance", sty.button)}
                          danger={true}
                          size={"small"}
                          type={"primary"}
                        >
                          <BackSvgrepoComSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bnIfg
                            )}
                            role={"img"}
                          />
                        </AntdButton>
                      </TabButton>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__deNiN
                        )}
                      >
                        {""}
                      </div>
                    </Stack__>
                  </div>
                  <EnquiryForm
                    data-plasmic-name={"enquiryForm"}
                    data-plasmic-override={overrides.enquiryForm}
                    className={classNames("__wab_instance", sty.enquiryForm)}
                  />
                </Stack__>
              </TabContent>
            </div>
          )}
        </DataCtxReader__>
      </TabsContainer>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "tabsContainer",
    "inbox",
    "enquiries",
    "spinner",
    "grid",
    "enquiryButton",
    "message",
    "message2",
    "pagination",
    "enquiry",
    "back",
    "button",
    "enquiryForm"
  ],

  tabsContainer: [
    "tabsContainer",
    "inbox",
    "enquiries",
    "spinner",
    "grid",
    "enquiryButton",
    "message",
    "message2",
    "pagination",
    "enquiry",
    "back",
    "button",
    "enquiryForm"
  ],

  inbox: [
    "inbox",
    "enquiries",
    "spinner",
    "grid",
    "enquiryButton",
    "message",
    "message2",
    "pagination"
  ],

  enquiries: [
    "enquiries",
    "spinner",
    "grid",
    "enquiryButton",
    "message",
    "message2",
    "pagination"
  ],

  spinner: ["spinner"],
  grid: ["grid", "enquiryButton", "message", "message2"],
  enquiryButton: ["enquiryButton", "message"],
  message: ["message"],
  message2: ["message2"],
  pagination: ["pagination"],
  enquiry: ["enquiry", "back", "button", "enquiryForm"],
  back: ["back", "button"],
  button: ["button"],
  enquiryForm: ["enquiryForm"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUserEnquiriesTable__ArgProps,
          internalVariantPropNames: PlasmicUserEnquiriesTable__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUserEnquiriesTable__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUserEnquiriesTable";
  } else {
    func.displayName = `PlasmicUserEnquiriesTable.${nodeName}`;
  }
  return func;
}

export const PlasmicUserEnquiriesTable = Object.assign(
  // Top-level PlasmicUserEnquiriesTable renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tabsContainer: makeNodeComponent("tabsContainer"),
    inbox: makeNodeComponent("inbox"),
    enquiries: makeNodeComponent("enquiries"),
    spinner: makeNodeComponent("spinner"),
    grid: makeNodeComponent("grid"),
    enquiryButton: makeNodeComponent("enquiryButton"),
    message: makeNodeComponent("message"),
    message2: makeNodeComponent("message2"),
    pagination: makeNodeComponent("pagination"),
    enquiry: makeNodeComponent("enquiry"),
    back: makeNodeComponent("back"),
    button: makeNodeComponent("button"),
    enquiryForm: makeNodeComponent("enquiryForm"),
    // Metadata about props expected for PlasmicUserEnquiriesTable
    internalVariantProps: PlasmicUserEnquiriesTable__VariantProps,
    internalArgProps: PlasmicUserEnquiriesTable__ArgProps
  }
);

export default PlasmicUserEnquiriesTable;
/* prettier-ignore-end */
