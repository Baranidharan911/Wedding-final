// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: vTk4qacnTIPU
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicStep.module.css"; // plasmic-import: vTk4qacnTIPU/css
import SuitcaseSvgrepoComSvgIcon from "./icons/PlasmicIcon__SuitcaseSvgrepoComSvg"; // plasmic-import: AnW24P3guddy/icon
import WhatsappSvgrepoComSvgIcon from "./icons/PlasmicIcon__WhatsappSvgrepoComSvg"; // plasmic-import: p9NwUofQp1Ge/icon
import FileZipperSvgrepoComSvgIcon from "./icons/PlasmicIcon__FileZipperSvgrepoComSvg"; // plasmic-import: 50afEbLn5vwl/icon

createPlasmicElementProxy;

export const PlasmicStep__VariantProps = new Array();

export const PlasmicStep__ArgProps = new Array();

const $$ = {};

function PlasmicStep__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__eKdlN)}>
        <SuitcaseSvgrepoComSvgIcon
          className={classNames(projectcss.all, sty.svg___7AFfV)}
          role={"img"}
        />

        <WhatsappSvgrepoComSvgIcon
          className={classNames(projectcss.all, sty.svg__ru65J)}
          role={"img"}
        />

        <FileZipperSvgrepoComSvgIcon
          className={classNames(projectcss.all, sty.svg__o3Upg)}
          role={"img"}
        />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__eFkcg)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__pMedS
          )}
        >
          {""}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__mD7Ff
          )}
        >
          {""}
        </div>
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStep__ArgProps,
          internalVariantPropNames: PlasmicStep__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStep__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStep";
  } else {
    func.displayName = `PlasmicStep.${nodeName}`;
  }
  return func;
}

export const PlasmicStep = Object.assign(
  // Top-level PlasmicStep renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicStep
    internalVariantProps: PlasmicStep__VariantProps,
    internalArgProps: PlasmicStep__ArgProps
  }
);

export default PlasmicStep;
/* prettier-ignore-end */
