// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: 8K23kVTVNTsQ
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import TextInput from "../../TextInput"; // plasmic-import: leRyjw1OHU5j/component
import Button2 from "../../Button2"; // plasmic-import: x0IYxFtlqF54/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicEmailSubscription.module.css"; // plasmic-import: 8K23kVTVNTsQ/css

createPlasmicElementProxy;

export const PlasmicEmailSubscription__VariantProps = new Array();

export const PlasmicEmailSubscription__ArgProps = new Array();

const $$ = {};

function PlasmicEmailSubscription__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"frame1000005924"}
      data-plasmic-override={overrides.frame1000005924}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.frame1000005924
      )}
    >
      <TextInput
        data-plasmic-name={"textInput"}
        data-plasmic-override={overrides.textInput}
        className={classNames("__wab_instance", sty.textInput)}
        onChange={async (...eventArgs) => {
          ((...eventArgs) => {
            generateStateOnChangeProp($state, ["textInput", "value"])(
              (e => e.target?.value).apply(null, eventArgs)
            );
          }).apply(null, eventArgs);
          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        placeholder={"Email Address"}
        value={generateStateValueProp($state, ["textInput", "value"]) ?? ""}
      />

      <Button2
        data-plasmic-name={"button2"}
        data-plasmic-override={overrides.button2}
        className={classNames("__wab_instance", sty.button2)}
        color={"red"}
      >
        {"Subscribe"}
      </Button2>
    </div>
  );
}

const PlasmicDescendants = {
  frame1000005924: ["frame1000005924", "textInput", "button2"],
  textInput: ["textInput"],
  button2: ["button2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEmailSubscription__ArgProps,
          internalVariantPropNames: PlasmicEmailSubscription__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEmailSubscription__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame1000005924") {
    func.displayName = "PlasmicEmailSubscription";
  } else {
    func.displayName = `PlasmicEmailSubscription.${nodeName}`;
  }
  return func;
}

export const PlasmicEmailSubscription = Object.assign(
  // Top-level PlasmicEmailSubscription renders the root element
  makeNodeComponent("frame1000005924"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    button2: makeNodeComponent("button2"),
    // Metadata about props expected for PlasmicEmailSubscription
    internalVariantProps: PlasmicEmailSubscription__VariantProps,
    internalArgProps: PlasmicEmailSubscription__ArgProps
  }
);

export default PlasmicEmailSubscription;
/* prettier-ignore-end */
