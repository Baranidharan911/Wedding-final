// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: LGQvbE5rkMbS
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  initializePlasmicStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import TextInput from "../../TextInput"; // plasmic-import: leRyjw1OHU5j/component
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import ButtonContainer from "../../ButtonContainer"; // plasmic-import: dK0EsHLm2W5O/component
import Button2 from "../../Button2"; // plasmic-import: x0IYxFtlqF54/component
import { useScreenVariants as useScreenVariantszapf5SksSeNd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ZAPF5sksSeNd/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicEnquiryFormBuilder.module.css"; // plasmic-import: LGQvbE5rkMbS/css

createPlasmicElementProxy;

export const PlasmicEnquiryFormBuilder__VariantProps = new Array();

export const PlasmicEnquiryFormBuilder__ArgProps = new Array(
  "enquiryForm",
  "currentEnquiry",
  "building",
  "currentUser",
  "formId"
);

const $$ = {};

function PlasmicEnquiryFormBuilder__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          enquiryForm: [],
          currentEnquiry: {},
          building: false,
          currentUser: {}
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "typeone[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "typetwo[].value",
        type: "private",
        variableType: "text",
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "typethreeradio[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "typethreedate[].value",
        type: "private",
        variableType: "text",
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "replyForm",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.enquiryForm;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return { questions: [] };
              }
              throw e;
            }
          })()
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszapf5SksSeNd()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__eYxV7
        )}
      >
        {"DETAILED ENQUIRY FORM"}
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__boAjF
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return (
                "Dear " +
                $props.currentEnquiry.attributes.users_permissions_user.data
                  .attributes.username +
                ", thanks for getting in touch with us. Fill this following form to get our estimate."
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "User";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___7H8Ln)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([]).map(
          (__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__e3LsW)}
                key={currentIndex}
              >
                <div className={classNames(projectcss.all, sty.column__fBOnN)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8Brul
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.Question;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column___3KZdy)}>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.typeone),
                      name: (() => {
                        try {
                          return currentItem.id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      onChange: async (...eventArgs) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "typeone",
                            __plasmic_idx_0,
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      placeholder: "Type here...",
                      value:
                        generateStateValueProp($state, [
                          "typeone",
                          __plasmic_idx_0,
                          "value"
                        ]) ?? ""
                    };
                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "typeone[].value",
                          initFunc: ({ $props, $state, $queries }) => ""
                        }
                      ],

                      [__plasmic_idx_0]
                    );
                    return (
                      <TextInput
                        data-plasmic-name={"typeone"}
                        data-plasmic-override={overrides.typeone}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
              </Stack__>
            );
          }
        )}
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([]).map(
          (__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns___70TJz)}
                key={currentIndex}
              >
                <div className={classNames(projectcss.all, sty.column__cJi1G)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__m3Ubk
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.Question;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__dAdUf)}>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.typetwo),
                      onChange: async (...eventArgs) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["typetwo", __plasmic_idx_0, "value"],
                          AntdDatePicker_Helpers
                        ).apply(null, eventArgs);
                      },
                      popupScopeClassName: sty["typetwo__datePickerPopup"],
                      value: generateStateValueProp($state, [
                        "typetwo",
                        __plasmic_idx_0,
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "typetwo[].value"
                        }
                      ],

                      [__plasmic_idx_0],
                      AntdDatePicker_Helpers ?? {},
                      child$Props
                    );
                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "typetwo[].value",
                          initFunc: ({ $props, $state, $queries }) => undefined
                        }
                      ],

                      [__plasmic_idx_0]
                    );
                    return (
                      <AntdDatePicker
                        data-plasmic-name={"typetwo"}
                        data-plasmic-override={overrides.typetwo}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
              </Stack__>
            );
          }
        )}
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([]).map(
          (__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__r8SZy)}
                key={currentIndex}
              >
                <div className={classNames(projectcss.all, sty.column__ndg5H)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xPp
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.Question;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column___95V5K)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__o9Y2Q)}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.typethreeradio
                        ),
                        onChange: async (...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "typethreeradio",
                            __plasmic_idx_0,
                            "value"
                          ]).apply(null, eventArgs);
                        },
                        options: (() => {
                          const __composite = [
                            { value: null, label: null },
                            { value: null, label: null }
                          ];

                          __composite["0"]["value"] = "Yes";
                          __composite["0"]["label"] = "Yes";
                          __composite["1"]["value"] = "No";
                          __composite["1"]["label"] = "No";
                          return __composite;
                        })(),
                        value: generateStateValueProp($state, [
                          "typethreeradio",
                          __plasmic_idx_0,
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "typethreeradio[].value"
                          }
                        ],

                        [__plasmic_idx_0],
                        undefined ?? {},
                        child$Props
                      );
                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "typethreeradio[].value",
                            initFunc: ({ $props, $state, $queries }) =>
                              undefined
                          }
                        ],

                        [__plasmic_idx_0]
                      );
                      return (
                        <AntdRadioGroup
                          data-plasmic-name={"typethreeradio"}
                          data-plasmic-override={overrides.typethreeradio}
                          {...child$Props}
                        >
                          <AntdRadio
                            className={classNames(
                              "__wab_instance",
                              sty.radio__iPwRi
                            )}
                            value={"op1"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zsY5M
                              )}
                            >
                              {"Option 1"}
                            </div>
                          </AntdRadio>
                          <AntdRadio
                            className={classNames(
                              "__wab_instance",
                              sty.radio___9Khvf
                            )}
                            value={"op2"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__s0R7I
                              )}
                            >
                              {"Option 2"}
                            </div>
                          </AntdRadio>
                        </AntdRadioGroup>
                      );
                    })()}
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.typethreedate
                        ),
                        onChange: async (...eventArgs) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["typethreedate", __plasmic_idx_0, "value"],
                            AntdDatePicker_Helpers
                          ).apply(null, eventArgs);
                        },
                        popupScopeClassName:
                          sty["typethreedate__datePickerPopup"],
                        value: generateStateValueProp($state, [
                          "typethreedate",
                          __plasmic_idx_0,
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "typethreedate[].value"
                          }
                        ],

                        [__plasmic_idx_0],
                        AntdDatePicker_Helpers ?? {},
                        child$Props
                      );
                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "typethreedate[].value",
                            initFunc: ({ $props, $state, $queries }) =>
                              undefined
                          }
                        ],

                        [__plasmic_idx_0]
                      );
                      return (
                        <AntdDatePicker
                          data-plasmic-name={"typethreedate"}
                          data-plasmic-override={overrides.typethreedate}
                          {...child$Props}
                        />
                      );
                    })()}
                  </Stack__>
                </div>
              </Stack__>
            );
          }
        )}
        <ButtonContainer
          data-plasmic-name={"buttonContainer"}
          data-plasmic-override={overrides.buttonContainer}
          className={classNames("__wab_instance", sty.buttonContainer)}
        >
          <Button2
            data-plasmic-name={"button2"}
            data-plasmic-override={overrides.button2}
            className={classNames("__wab_instance", sty.button2)}
            color={"red"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uiLHq
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#FFFFFFE0" }}
                >
                  {"Submit"}
                </span>
              </React.Fragment>
            </div>
          </Button2>
        </ButtonContainer>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "typeone",
    "typetwo",
    "typethreeradio",
    "typethreedate",
    "buttonContainer",
    "button2"
  ],

  typeone: ["typeone"],
  typetwo: ["typetwo"],
  typethreeradio: ["typethreeradio"],
  typethreedate: ["typethreedate"],
  buttonContainer: ["buttonContainer", "button2"],
  button2: ["button2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEnquiryFormBuilder__ArgProps,
          internalVariantPropNames: PlasmicEnquiryFormBuilder__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEnquiryFormBuilder__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEnquiryFormBuilder";
  } else {
    func.displayName = `PlasmicEnquiryFormBuilder.${nodeName}`;
  }
  return func;
}

export const PlasmicEnquiryFormBuilder = Object.assign(
  // Top-level PlasmicEnquiryFormBuilder renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    typeone: makeNodeComponent("typeone"),
    typetwo: makeNodeComponent("typetwo"),
    typethreeradio: makeNodeComponent("typethreeradio"),
    typethreedate: makeNodeComponent("typethreedate"),
    buttonContainer: makeNodeComponent("buttonContainer"),
    button2: makeNodeComponent("button2"),
    // Metadata about props expected for PlasmicEnquiryFormBuilder
    internalVariantProps: PlasmicEnquiryFormBuilder__VariantProps,
    internalArgProps: PlasmicEnquiryFormBuilder__ArgProps
  }
);

export default PlasmicEnquiryFormBuilder;
/* prettier-ignore-end */
