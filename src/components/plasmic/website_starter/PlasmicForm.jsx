// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: YsMGf_APajEv
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import LayerDefault from "../../LayerDefault"; // plasmic-import: 4uZwDUl-gHmp/component
import EnquiryFormBuilder from "../../EnquiryFormBuilder"; // plasmic-import: LGQvbE5rkMbS/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicForm.module.css"; // plasmic-import: YsMGf_APajEv/css

createPlasmicElementProxy;

export const PlasmicForm__VariantProps = new Array();

export const PlasmicForm__ArgProps = new Array();

const $$ = {};

function PlasmicForm__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    formInfo: usePlasmicDataOp(() => {
      return {
        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
        opId: "6edebaac-2712-439e-b8d3-755cfa55bd3f",
        userArgs: {},
        cacheKey: `plasmic.$.6edebaac-2712-439e-b8d3-755cfa55bd3f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    userId: usePlasmicDataOp(() => {
      return {
        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
        opId: "56746803-2848-46c3-b57a-6b1a20cb73cc",
        userArgs: {},
        cacheKey: `plasmic.$.56746803-2848-46c3-b57a-6b1a20cb73cc.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    venderInfo: usePlasmicDataOp(() => {
      return {
        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
        opId: "899dcdd9-7907-4951-857f-dc1da3fac18b",
        userArgs: {},
        cacheKey: `plasmic.$.899dcdd9-7907-4951-857f-dc1da3fac18b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <LayerDefault
            data-plasmic-name={"layerDefault"}
            data-plasmic-override={overrides.layerDefault}
            className={classNames("__wab_instance", sty.layerDefault)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__pmmjE)}>
              {(() => {
                try {
                  return (() => {
                    const store =
                      $queries?.venderInfo?.data?.response?.data
                        ?.usersPermissionsUser?.data?.attributes?.store_owner
                        ?.data?.attributes?.stores?.data[0];
                    const user = $queries?.userId?.data?.response?.data?.me;
                    const form =
                      $queries?.formInfo?.data?.response?.data?.form?.data;
                    if (!form) return true;
                    if ($ctx.query.enquiry) {
                      const enq = form?.attributes?.enquiries?.data.find(
                        enq => enq.id === $ctx.query.enquiry
                      );
                      if (enq) {
                        return (
                          enq.attributes.users_permissions_user.data.id !==
                          user.id
                        );
                      } else {
                        return true;
                      }
                    } else {
                      return form?.attributes?.store?.data?.id !== store.id;
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__hxc82)}>
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            const form =
                              $queries?.formInfo?.data?.response?.data?.form
                                ?.data;
                            const store =
                              $queries?.venderInfo?.data?.response?.data
                                ?.usersPermissionsUser?.data?.attributes
                                ?.store_owner?.data?.attributes?.stores
                                ?.data[0];
                            if (form) {
                              if (
                                store &&
                                form?.attributes?.store?.data?.id !== store.id
                              ) {
                                return "Unauthorized";
                              } else {
                                return `Unauthorized: Please use ${$queries?.formInfo?.data?.response?.data?.form?.data?.attributes?.enquiries?.data
                                  ?.find(enq => enq?.id === $ctx.query.enquiry)
                                  ?.attributes?.users_permissions_user?.data?.attributes?.email?.replace(
                                    /(?<=.{2}).(?=[^@]*?@)/g,
                                    "*"
                                  )}`;
                              }
                            } else {
                              return "Form not found";
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Unauthorized";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h1>
                </div>
              ) : null}
              {(() => {
                try {
                  return (() => {
                    const store =
                      $queries?.venderInfo?.data?.response?.data
                        ?.usersPermissionsUser?.data?.attributes?.store_owner
                        ?.data?.attributes?.stores?.data[0];
                    const user = $queries?.userId?.data?.response?.data?.me;
                    const form =
                      $queries?.formInfo?.data?.response?.data?.form?.data;
                    if (form) {
                      if ($ctx.query.enquiry) {
                        const enq = form?.attributes?.enquiries?.data.find(
                          enq => enq.id === $ctx.query.enquiry
                        );
                        if (enq) {
                          return (
                            enq.attributes.users_permissions_user.data.id ===
                            user.id
                          );
                        } else {
                          return false;
                        }
                      } else {
                        return form?.attributes?.store?.data?.id === store.id;
                      }
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <EnquiryFormBuilder
                  data-plasmic-name={"enquiryFormBuilder"}
                  data-plasmic-override={overrides.enquiryFormBuilder}
                  className={classNames(
                    "__wab_instance",
                    sty.enquiryFormBuilder
                  )}
                />
              ) : null}
            </div>
          </LayerDefault>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "layerDefault", "h1", "enquiryFormBuilder"],
  layerDefault: ["layerDefault", "h1", "enquiryFormBuilder"],
  h1: ["h1"],
  enquiryFormBuilder: ["enquiryFormBuilder"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicForm__ArgProps,
          internalVariantPropNames: PlasmicForm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicForm";
  } else {
    func.displayName = `PlasmicForm.${nodeName}`;
  }
  return func;
}

export const PlasmicForm = Object.assign(
  // Top-level PlasmicForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    layerDefault: makeNodeComponent("layerDefault"),
    h1: makeNodeComponent("h1"),
    enquiryFormBuilder: makeNodeComponent("enquiryFormBuilder"),
    // Metadata about props expected for PlasmicForm
    internalVariantProps: PlasmicForm__VariantProps,
    internalArgProps: PlasmicForm__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicForm;
/* prettier-ignore-end */
