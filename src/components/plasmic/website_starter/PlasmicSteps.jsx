// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: KYpsS76GyUmG
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv, useGlobalActions } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import LayerDefault from "../../LayerDefault"; // plasmic-import: 4uZwDUl-gHmp/component
import VendorOnboardingSteps from "../../VendorOnboardingSteps"; // plasmic-import: Jjzf_E1_xAWy/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import ButtonContainer from "../../ButtonContainer"; // plasmic-import: dK0EsHLm2W5O/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import Prompt from "../../Prompt"; // plasmic-import: j21kCiisYxeO/component
import { useScreenVariants as useScreenVariantszapf5SksSeNd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ZAPF5sksSeNd/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicSteps.module.css"; // plasmic-import: KYpsS76GyUmG/css
import CheckCircleSvgrepoComSvgIcon from "./icons/PlasmicIcon__CheckCircleSvgrepoComSvg"; // plasmic-import: DuhYsSUMBDaK/icon
import UploadMinimalisticSvgrepoComSvgIcon from "./icons/PlasmicIcon__UploadMinimalisticSvgrepoComSvg"; // plasmic-import: ETfroOo3WLd8/icon

createPlasmicElementProxy;

export const PlasmicSteps__VariantProps = new Array();

export const PlasmicSteps__ArgProps = new Array();

const $$ = {};

function PlasmicSteps__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const $globalActions = useGlobalActions?.();
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "businessForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "businessForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "businessForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "businessForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "businessName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "type.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "tags2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "city.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "state.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "whatsappForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "whatsappForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "whatsappForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "whatsappForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "whatsapp2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "verifyCode.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "uploadForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "uploadForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "uploadForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "uploadForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "aadhar2.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "gstNumber.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "vendorId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.vendorInfo.data.response.data.usersPermissionsUser
                .data;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "countryCodes",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { name: "Afghanistan", value: "93", label: "Afghanistan +93" },
          { name: "Aland Islands", value: "358", label: "Aland Islands +358" },
          { name: "Albania", value: "355", label: "Albania +355" },
          { name: "Algeria", value: "213", label: "Algeria +213" },
          {
            name: "AmericanSamoa",
            value: "1684",
            label: "AmericanSamoa +1684"
          },
          { name: "Andorra", value: "376", label: "Andorra +376" },
          { name: "Angola", value: "244", label: "Angola +244" },
          { name: "Anguilla", value: "1264", label: "Anguilla +1264" },
          { name: "Antarctica", value: "672", label: "Antarctica +672" },
          {
            name: "Antigua and Barbuda",
            value: "1268",
            label: "Antigua and Barbuda +1268"
          },
          { name: "Argentina", value: "54", label: "Argentina +54" },
          { name: "Armenia", value: "374", label: "Armenia +374" },
          { name: "Aruba", value: "297", label: "Aruba +297" },
          { name: "Australia", value: "61", label: "Australia +61" },
          { name: "Austria", value: "43", label: "Austria +43" },
          { name: "Azerbaijan", value: "994", label: "Azerbaijan +994" },
          { name: "Bahamas", value: "1242", label: "Bahamas +1242" },
          { name: "Bahrain", value: "973", label: "Bahrain +973" },
          { name: "Bangladesh", value: "880", label: "Bangladesh +880" },
          { name: "Barbados", value: "1246", label: "Barbados +1246" },
          { name: "Belarus", value: "375", label: "Belarus +375" },
          { name: "Belgium", value: "32", label: "Belgium +32" },
          { name: "Belize", value: "501", label: "Belize +501" },
          { name: "Benin", value: "229", label: "Benin +229" },
          { name: "Bermuda", value: "1441", label: "Bermuda +1441" },
          { name: "Bhutan", value: "975", label: "Bhutan +975" },
          {
            name: "Bolivia, Plurinational State of",
            value: "591",
            label: "Bolivia, Plurinational State of +591"
          },
          {
            name: "Bosnia and Herzegovina",
            value: "387",
            label: "Bosnia and Herzegovina +387"
          },
          { name: "Botswana", value: "267", label: "Botswana +267" },
          { name: "Brazil", value: "55", label: "Brazil +55" },
          {
            name: "British Indian Ocean Territory",
            value: "246",
            label: "British Indian Ocean Territory +246"
          },
          {
            name: "Brunei Darussalam",
            value: "673",
            label: "Brunei Darussalam +673"
          },
          { name: "Bulgaria", value: "359", label: "Bulgaria +359" },
          { name: "Burkina Faso", value: "226", label: "Burkina Faso +226" },
          { name: "Burundi", value: "257", label: "Burundi +257" },
          { name: "Cambodia", value: "855", label: "Cambodia +855" },
          { name: "Cameroon", value: "237", label: "Cameroon +237" },
          { name: "Canada", value: "1", label: "Canada +1" },
          { name: "Cape Verde", value: "238", label: "Cape Verde +238" },
          {
            name: "Cayman Islands",
            value: " 345",
            label: "Cayman Islands + 345"
          },
          {
            name: "Central African Republic",
            value: "236",
            label: "Central African Republic +236"
          },
          { name: "Chad", value: "235", label: "Chad +235" },
          { name: "Chile", value: "56", label: "Chile +56" },
          { name: "China", value: "86", label: "China +86" },
          {
            name: "Christmas Island",
            value: "61",
            label: "Christmas Island +61"
          },
          {
            name: "Cocos (Keeling) Islands",
            value: "61",
            label: "Cocos (Keeling) Islands +61"
          },
          { name: "Colombia", value: "57", label: "Colombia +57" },
          { name: "Comoros", value: "269", label: "Comoros +269" },
          { name: "Congo", value: "242", label: "Congo +242" },
          {
            name: "Congo, The Democratic Republic of the Congo",
            value: "243",
            label: "Congo, The Democratic Republic of the Congo +243"
          },
          { name: "Cook Islands", value: "682", label: "Cook Islands +682" },
          { name: "Costa Rica", value: "506", label: "Costa Rica +506" },
          { name: "Cote d'Ivoire", value: "225", label: "Cote d'Ivoire +225" },
          { name: "Croatia", value: "385", label: "Croatia +385" },
          { name: "Cuba", value: "53", label: "Cuba +53" },
          { name: "Cyprus", value: "357", label: "Cyprus +357" },
          {
            name: "Czech Republic",
            value: "420",
            label: "Czech Republic +420"
          },
          { name: "Denmark", value: "45", label: "Denmark +45" },
          { name: "Djibouti", value: "253", label: "Djibouti +253" },
          { name: "Dominica", value: "1767", label: "Dominica +1767" },
          {
            name: "Dominican Republic",
            value: "1849",
            label: "Dominican Republic +1849"
          },
          { name: "Ecuador", value: "593", label: "Ecuador +593" },
          { name: "Egypt", value: "20", label: "Egypt +20" },
          { name: "El Salvador", value: "503", label: "El Salvador +503" },
          {
            name: "Equatorial Guinea",
            value: "240",
            label: "Equatorial Guinea +240"
          },
          { name: "Eritrea", value: "291", label: "Eritrea +291" },
          { name: "Estonia", value: "372", label: "Estonia +372" },
          { name: "Ethiopia", value: "251", label: "Ethiopia +251" },
          {
            name: "Falkland Islands (Malvinas)",
            value: "500",
            label: "Falkland Islands (Malvinas) +500"
          },
          { name: "Faroe Islands", value: "298", label: "Faroe Islands +298" },
          { name: "Fiji", value: "679", label: "Fiji +679" },
          { name: "Finland", value: "358", label: "Finland +358" },
          { name: "France", value: "33", label: "France +33" },
          { name: "French Guiana", value: "594", label: "French Guiana +594" },
          {
            name: "French Polynesia",
            value: "689",
            label: "French Polynesia +689"
          },
          { name: "Gabon", value: "241", label: "Gabon +241" },
          { name: "Gambia", value: "220", label: "Gambia +220" },
          { name: "Georgia", value: "995", label: "Georgia +995" },
          { name: "Germany", value: "49", label: "Germany +49" },
          { name: "Ghana", value: "233", label: "Ghana +233" },
          { name: "Gibraltar", value: "350", label: "Gibraltar +350" },
          { name: "Greece", value: "30", label: "Greece +30" },
          { name: "Greenland", value: "299", label: "Greenland +299" },
          { name: "Grenada", value: "1473", label: "Grenada +1473" },
          { name: "Guadeloupe", value: "590", label: "Guadeloupe +590" },
          { name: "Guam", value: "1671", label: "Guam +1671" },
          { name: "Guatemala", value: "502", label: "Guatemala +502" },
          { name: "Guernsey", value: "44", label: "Guernsey +44" },
          { name: "Guinea", value: "224", label: "Guinea +224" },
          { name: "Guinea-Bissau", value: "245", label: "Guinea-Bissau +245" },
          { name: "Guyana", value: "595", label: "Guyana +595" },
          { name: "Haiti", value: "509", label: "Haiti +509" },
          {
            name: "Holy See (Vatican City State)",
            value: "379",
            label: "Holy See (Vatican City State) +379"
          },
          { name: "Honduras", value: "504", label: "Honduras +504" },
          { name: "Hong Kong", value: "852", label: "Hong Kong +852" },
          { name: "Hungary", value: "36", label: "Hungary +36" },
          { name: "Iceland", value: "354", label: "Iceland +354" },
          { name: "India", value: "91", label: "India +91" },
          { name: "Indonesia", value: "62", label: "Indonesia +62" },
          {
            name: "Iran, Islamic Republic of Persian Gulf",
            value: "98",
            label: "Iran, Islamic Republic of Persian Gulf +98"
          },
          { name: "Iraq", value: "964", label: "Iraq +964" },
          { name: "Ireland", value: "353", label: "Ireland +353" },
          { name: "Isle of Man", value: "44", label: "Isle of Man +44" },
          { name: "Israel", value: "972", label: "Israel +972" },
          { name: "Italy", value: "39", label: "Italy +39" },
          { name: "Jamaica", value: "1876", label: "Jamaica +1876" },
          { name: "Japan", value: "81", label: "Japan +81" },
          { name: "Jersey", value: "44", label: "Jersey +44" },
          { name: "Jordan", value: "962", label: "Jordan +962" },
          { name: "Kazakhstan", value: "77", label: "Kazakhstan +77" },
          { name: "Kenya", value: "254", label: "Kenya +254" },
          { name: "Kiribati", value: "686", label: "Kiribati +686" },
          {
            name: "Korea, Democratic People's Republic of Korea",
            value: "850",
            label: "Korea, Democratic People's Republic of Korea +850"
          },
          {
            name: "Korea, Republic of South Korea",
            value: "82",
            label: "Korea, Republic of South Korea +82"
          },
          { name: "Kuwait", value: "965", label: "Kuwait +965" },
          { name: "Kyrgyzstan", value: "996", label: "Kyrgyzstan +996" },
          { name: "Laos", value: "856", label: "Laos +856" },
          { name: "Latvia", value: "371", label: "Latvia +371" },
          { name: "Lebanon", value: "961", label: "Lebanon +961" },
          { name: "Lesotho", value: "266", label: "Lesotho +266" },
          { name: "Liberia", value: "231", label: "Liberia +231" },
          {
            name: "Libyan Arab Jamahiriya",
            value: "218",
            label: "Libyan Arab Jamahiriya +218"
          },
          { name: "Liechtenstein", value: "423", label: "Liechtenstein +423" },
          { name: "Lithuania", value: "370", label: "Lithuania +370" },
          { name: "Luxembourg", value: "352", label: "Luxembourg +352" },
          { name: "Macao", value: "853", label: "Macao +853" },
          { name: "Macedonia", value: "389", label: "Macedonia +389" },
          { name: "Madagascar", value: "261", label: "Madagascar +261" },
          { name: "Malawi", value: "265", label: "Malawi +265" },
          { name: "Malaysia", value: "60", label: "Malaysia +60" },
          { name: "Maldives", value: "960", label: "Maldives +960" },
          { name: "Mali", value: "223", label: "Mali +223" },
          { name: "Malta", value: "356", label: "Malta +356" },
          {
            name: "Marshall Islands",
            value: "692",
            label: "Marshall Islands +692"
          },
          { name: "Martinique", value: "596", label: "Martinique +596" },
          { name: "Mauritania", value: "222", label: "Mauritania +222" },
          { name: "Mauritius", value: "230", label: "Mauritius +230" },
          { name: "Mayotte", value: "262", label: "Mayotte +262" },
          { name: "Mexico", value: "52", label: "Mexico +52" },
          {
            name: "Micronesia, Federated States of Micronesia",
            value: "691",
            label: "Micronesia, Federated States of Micronesia +691"
          },
          { name: "Moldova", value: "373", label: "Moldova +373" },
          { name: "Monaco", value: "377", label: "Monaco +377" },
          { name: "Mongolia", value: "976", label: "Mongolia +976" },
          { name: "Montenegro", value: "382", label: "Montenegro +382" },
          { name: "Montserrat", value: "1664", label: "Montserrat +1664" },
          { name: "Morocco", value: "212", label: "Morocco +212" },
          { name: "Mozambique", value: "258", label: "Mozambique +258" },
          { name: "Myanmar", value: "95", label: "Myanmar +95" },
          { name: "Namibia", value: "264", label: "Namibia +264" },
          { name: "Nauru", value: "674", label: "Nauru +674" },
          { name: "Nepal", value: "977", label: "Nepal +977" },
          { name: "Netherlands", value: "31", label: "Netherlands +31" },
          {
            name: "Netherlands Antilles",
            value: "599",
            label: "Netherlands Antilles +599"
          },
          { name: "New Caledonia", value: "687", label: "New Caledonia +687" },
          { name: "New Zealand", value: "64", label: "New Zealand +64" },
          { name: "Nicaragua", value: "505", label: "Nicaragua +505" },
          { name: "Niger", value: "227", label: "Niger +227" },
          { name: "Nigeria", value: "234", label: "Nigeria +234" },
          { name: "Niue", value: "683", label: "Niue +683" },
          {
            name: "Norfolk Island",
            value: "672",
            label: "Norfolk Island +672"
          },
          {
            name: "Northern Mariana Islands",
            value: "1670",
            label: "Northern Mariana Islands +1670"
          },
          { name: "Norway", value: "47", label: "Norway +47" },
          { name: "Oman", value: "968", label: "Oman +968" },
          { name: "Pakistan", value: "92", label: "Pakistan +92" },
          { name: "Palau", value: "680", label: "Palau +680" },
          {
            name: "Palestinian Territory, Occupied",
            value: "970",
            label: "Palestinian Territory, Occupied +970"
          },
          { name: "Panama", value: "507", label: "Panama +507" },
          {
            name: "Papua New Guinea",
            value: "675",
            label: "Papua New Guinea +675"
          },
          { name: "Paraguay", value: "595", label: "Paraguay +595" },
          { name: "Peru", value: "51", label: "Peru +51" },
          { name: "Philippines", value: "63", label: "Philippines +63" },
          { name: "Pitcairn", value: "872", label: "Pitcairn +872" },
          { name: "Poland", value: "48", label: "Poland +48" },
          { name: "Portugal", value: "351", label: "Portugal +351" },
          { name: "Puerto Rico", value: "1939", label: "Puerto Rico +1939" },
          { name: "Qatar", value: "974", label: "Qatar +974" },
          { name: "Romania", value: "40", label: "Romania +40" },
          { name: "Russia", value: "7", label: "Russia +7" },
          { name: "Rwanda", value: "250", label: "Rwanda +250" },
          { name: "Reunion", value: "262", label: "Reunion +262" },
          {
            name: "Saint Barthelemy",
            value: "590",
            label: "Saint Barthelemy +590"
          },
          {
            name: "Saint Helena, Ascension and Tristan Da Cunha",
            value: "290",
            label: "Saint Helena, Ascension and Tristan Da Cunha +290"
          },
          {
            name: "Saint Kitts and Nevis",
            value: "1869",
            label: "Saint Kitts and Nevis +1869"
          },
          { name: "Saint Lucia", value: "1758", label: "Saint Lucia +1758" },
          { name: "Saint Martin", value: "590", label: "Saint Martin +590" },
          {
            name: "Saint Pierre and Miquelon",
            value: "508",
            label: "Saint Pierre and Miquelon +508"
          },
          {
            name: "Saint Vincent and the Grenadines",
            value: "1784",
            label: "Saint Vincent and the Grenadines +1784"
          },
          { name: "Samoa", value: "685", label: "Samoa +685" },
          { name: "San Marino", value: "378", label: "San Marino +378" },
          {
            name: "Sao Tome and Principe",
            value: "239",
            label: "Sao Tome and Principe +239"
          },
          { name: "Saudi Arabia", value: "966", label: "Saudi Arabia +966" },
          { name: "Senegal", value: "221", label: "Senegal +221" },
          { name: "Serbia", value: "381", label: "Serbia +381" },
          { name: "Seychelles", value: "248", label: "Seychelles +248" },
          { name: "Sierra Leone", value: "232", label: "Sierra Leone +232" },
          { name: "Singapore", value: "65", label: "Singapore +65" },
          { name: "Slovakia", value: "421", label: "Slovakia +421" },
          { name: "Slovenia", value: "386", label: "Slovenia +386" },
          {
            name: "Solomon Islands",
            value: "677",
            label: "Solomon Islands +677"
          },
          { name: "Somalia", value: "252", label: "Somalia +252" },
          { name: "South Africa", value: "27", label: "South Africa +27" },
          { name: "South Sudan", value: "211", label: "South Sudan +211" },
          {
            name: "South Georgia and the South Sandwich Islands",
            value: "500",
            label: "South Georgia and the South Sandwich Islands +500"
          },
          { name: "Spain", value: "34", label: "Spain +34" },
          { name: "Sri Lanka", value: "94", label: "Sri Lanka +94" },
          { name: "Sudan", value: "249", label: "Sudan +249" },
          { name: "Suriname", value: "597", label: "Suriname +597" },
          {
            name: "Svalbard and Jan Mayen",
            value: "47",
            label: "Svalbard and Jan Mayen +47"
          },
          { name: "Swaziland", value: "268", label: "Swaziland +268" },
          { name: "Sweden", value: "46", label: "Sweden +46" },
          { name: "Switzerland", value: "41", label: "Switzerland +41" },
          {
            name: "Syrian Arab Republic",
            value: "963",
            label: "Syrian Arab Republic +963"
          },
          { name: "Taiwan", value: "886", label: "Taiwan +886" },
          { name: "Tajikistan", value: "992", label: "Tajikistan +992" },
          {
            name: "Tanzania, United Republic of Tanzania",
            value: "255",
            label: "Tanzania, United Republic of Tanzania +255"
          },
          { name: "Thailand", value: "66", label: "Thailand +66" },
          { name: "Timor-Leste", value: "670", label: "Timor-Leste +670" },
          { name: "Togo", value: "228", label: "Togo +228" },
          { name: "Tokelau", value: "690", label: "Tokelau +690" },
          { name: "Tonga", value: "676", label: "Tonga +676" },
          {
            name: "Trinidad and Tobago",
            value: "1868",
            label: "Trinidad and Tobago +1868"
          },
          { name: "Tunisia", value: "216", label: "Tunisia +216" },
          { name: "Turkey", value: "90", label: "Turkey +90" },
          { name: "Turkmenistan", value: "993", label: "Turkmenistan +993" },
          {
            name: "Turks and Caicos Islands",
            value: "1649",
            label: "Turks and Caicos Islands +1649"
          },
          { name: "Tuvalu", value: "688", label: "Tuvalu +688" },
          { name: "Uganda", value: "256", label: "Uganda +256" },
          { name: "Ukraine", value: "380", label: "Ukraine +380" },
          {
            name: "United Arab Emirates",
            value: "971",
            label: "United Arab Emirates +971"
          },
          { name: "United Kingdom", value: "44", label: "United Kingdom +44" },
          { name: "United States", value: "1", label: "United States +1" },
          { name: "Uruguay", value: "598", label: "Uruguay +598" },
          { name: "Uzbekistan", value: "998", label: "Uzbekistan +998" },
          { name: "Vanuatu", value: "678", label: "Vanuatu +678" },
          {
            name: "Venezuela, Bolivarian Republic of Venezuela",
            value: "58",
            label: "Venezuela, Bolivarian Republic of Venezuela +58"
          },
          { name: "Vietnam", value: "84", label: "Vietnam +84" },
          {
            name: "Virgin Islands, British",
            value: "1284",
            label: "Virgin Islands, British +1284"
          },
          {
            name: "Virgin Islands, U.S.",
            value: "1340",
            label: "Virgin Islands, U.S. +1340"
          },
          {
            name: "Wallis and Futuna",
            value: "681",
            label: "Wallis and Futuna +681"
          },
          { name: "Yemen", value: "967", label: "Yemen +967" },
          { name: "Zambia", value: "260", label: "Zambia +260" },
          { name: "Zimbabwe", value: "263", label: "Zimbabwe +263" }
        ]
      },
      {
        path: "currentStep",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return (
                  $queries.vendorInfo?.data?.response?.data
                    ?.usersPermissionsUser?.data?.attributes?.store_owner?.data
                    ?.attributes?.OnboardingSteps || 1
                );
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "whatsappVerified",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "verificationCode",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "storeNameValidation",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "variable",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          "Andaman and Nicobar Islands": ["Port Blair"],
          Haryana: [
            "Faridabad",
            "Gurgaon",
            "Hisar",
            "Rohtak",
            "Panipat",
            "Karnal",
            "Sonipat",
            "Yamunanagar",
            "Panchkula",
            "Bhiwani",
            "Bahadurgarh",
            "Jind",
            "Sirsa",
            "Thanesar",
            "Kaithal",
            "Palwal",
            "Rewari",
            "Hansi",
            "Narnaul",
            "Fatehabad",
            "Gohana",
            "Tohana",
            "Narwana",
            "Mandi Dabwali",
            "Charkhi Dadri",
            "Shahbad",
            "Pehowa",
            "Samalkha",
            "Pinjore",
            "Ladwa",
            "Sohna",
            "Safidon",
            "Taraori",
            "Mahendragarh",
            "Ratia",
            "Rania",
            "Sarsod"
          ],

          "Tamil Nadu": [
            "Chennai",
            "Coimbatore",
            "Madurai",
            "Tiruchirappalli",
            "Salem",
            "Tirunelveli",
            "Tiruppur",
            "Ranipet",
            "Nagercoil",
            "Thanjavur",
            "Vellore",
            "Kancheepuram",
            "Erode",
            "Tiruvannamalai",
            "Pollachi",
            "Rajapalayam",
            "Sivakasi",
            "Pudukkottai",
            "Neyveli (TS)",
            "Nagapattinam",
            "Viluppuram",
            "Tiruchengode",
            "Vaniyambadi",
            "Theni Allinagaram",
            "Udhagamandalam",
            "Aruppukkottai",
            "Paramakudi",
            "Arakkonam",
            "Virudhachalam",
            "Srivilliputhur",
            "Tindivanam",
            "Virudhunagar",
            "Karur",
            "Valparai",
            "Sankarankovil",
            "Tenkasi",
            "Palani",
            "Pattukkottai",
            "Tirupathur",
            "Ramanathapuram",
            "Udumalaipettai",
            "Gobichettipalayam",
            "Thiruvarur",
            "Thiruvallur",
            "Panruti",
            "Namakkal",
            "Thirumangalam",
            "Vikramasingapuram",
            "Nellikuppam",
            "Rasipuram",
            "Tiruttani",
            "Nandivaram-Guduvancheri",
            "Periyakulam",
            "Pernampattu",
            "Vellakoil",
            "Sivaganga",
            "Vadalur",
            "Rameshwaram",
            "Tiruvethipuram",
            "Perambalur",
            "Usilampatti",
            "Vedaranyam",
            "Sathyamangalam",
            "Puliyankudi",
            "Nanjikottai",
            "Thuraiyur",
            "Sirkali",
            "Tiruchendur",
            "Periyasemur",
            "Sattur",
            "Vandavasi",
            "Tharamangalam",
            "Tirukkoyilur",
            "Oddanchatram",
            "Palladam",
            "Vadakkuvalliyur",
            "Tirukalukundram",
            "Uthamapalayam",
            "Surandai",
            "Sankari",
            "Shenkottai",
            "Vadipatti",
            "Sholingur",
            "Tirupathur",
            "Manachanallur",
            "Viswanatham",
            "Polur",
            "Panagudi",
            "Uthiramerur",
            "Thiruthuraipoondi",
            "Pallapatti",
            "Ponneri",
            "Lalgudi",
            "Natham",
            "Unnamalaikadai",
            "P.N.Patti",
            "Tharangambadi",
            "Tittakudi",
            "Pacode",
            "O' Valley",
            "Suriyampalayam",
            "Sholavandan",
            "Thammampatti",
            "Namagiripettai",
            "Peravurani",
            "Parangipettai",
            "Pudupattinam",
            "Pallikonda",
            "Sivagiri",
            "Punjaipugalur",
            "Padmanabhapuram",
            "Thirupuvanam"
          ],

          "Madhya Pradesh": [
            "Indore",
            "Bhopal",
            "Jabalpur",
            "Gwalior",
            "Ujjain",
            "Sagar",
            "Ratlam",
            "Satna",
            "Murwara (Katni)",
            "Morena",
            "Singrauli",
            "Rewa",
            "Vidisha",
            "Ganjbasoda",
            "Shivpuri",
            "Mandsaur",
            "Neemuch",
            "Nagda",
            "Itarsi",
            "Sarni",
            "Sehore",
            "Mhow Cantonment",
            "Seoni",
            "Balaghat",
            "Ashok Nagar",
            "Tikamgarh",
            "Shahdol",
            "Pithampur",
            "Alirajpur",
            "Mandla",
            "Sheopur",
            "Shajapur",
            "Panna",
            "Raghogarh-Vijaypur",
            "Sendhwa",
            "Sidhi",
            "Pipariya",
            "Shujalpur",
            "Sironj",
            "Pandhurna",
            "Nowgong",
            "Mandideep",
            "Sihora",
            "Raisen",
            "Lahar",
            "Maihar",
            "Sanawad",
            "Sabalgarh",
            "Umaria",
            "Porsa",
            "Narsinghgarh",
            "Malaj Khand",
            "Sarangpur",
            "Mundi",
            "Nepanagar",
            "Pasan",
            "Mahidpur",
            "Seoni-Malwa",
            "Rehli",
            "Manawar",
            "Rahatgarh",
            "Panagar",
            "Wara Seoni",
            "Tarana",
            "Sausar",
            "Rajgarh",
            "Niwari",
            "Mauganj",
            "Manasa",
            "Nainpur",
            "Prithvipur",
            "Sohagpur",
            "Nowrozabad (Khodargama)",
            "Shamgarh",
            "Maharajpur",
            "Multai",
            "Pali",
            "Pachore",
            "Rau",
            "Mhowgaon",
            "Vijaypur",
            "Narsinghgarh"
          ],

          Jharkhand: [
            "Dhanbad",
            "Ranchi",
            "Jamshedpur",
            "Bokaro Steel City",
            "Deoghar",
            "Phusro",
            "Adityapur",
            "Hazaribag",
            "Giridih",
            "Ramgarh",
            "Jhumri Tilaiya",
            "Saunda",
            "Sahibganj",
            "Medininagar (Daltonganj)",
            "Chaibasa",
            "Chatra",
            "Gumia",
            "Dumka",
            "Madhupur",
            "Chirkunda",
            "Pakaur",
            "Simdega",
            "Musabani",
            "Mihijam",
            "Patratu",
            "Lohardaga",
            "Tenu dam-cum-Kathhara"
          ],

          Mizoram: ["Aizawl", "Lunglei", "Saiha"],
          Nagaland: [
            "Dimapur",
            "Kohima",
            "Zunheboto",
            "Tuensang",
            "Wokha",
            "Mokokchung"
          ],

          "Himachal Pradesh": [
            "Shimla",
            "Mandi",
            "Solan",
            "Nahan",
            "Sundarnagar",
            "Palampur",
            "Kullu",
            "Manali"
          ],

          Tripura: [
            "Agartala",
            "Udaipur",
            "Dharmanagar",
            "Pratapgarh",
            "Kailasahar",
            "Belonia",
            "Khowai"
          ],

          "Andhra Pradesh": [
            "Visakhapatnam",
            "Vijayawada",
            "Guntur",
            "Nellore",
            "Kurnool",
            "Rajahmundry",
            "Kakinada",
            "Tirupati",
            "Anantapur",
            "Kadapa",
            "Vizianagaram",
            "Eluru",
            "Ongole",
            "Nandyal",
            "Machilipatnam",
            "Adoni",
            "Tenali",
            "Chittoor",
            "Hindupur",
            "Proddatur",
            "Bhimavaram",
            "Madanapalle",
            "Guntakal",
            "Dharmavaram",
            "Gudivada",
            "Srikakulam",
            "Narasaraopet",
            "Rajampet",
            "Tadpatri",
            "Tadepalligudem",
            "Chilakaluripet",
            "Yemmiganur",
            "Kadiri",
            "Chirala",
            "Anakapalle",
            "Kavali",
            "Palacole",
            "Sullurpeta",
            "Tanuku",
            "Rayachoti",
            "Srikalahasti",
            "Bapatla",
            "Naidupet",
            "Nagari",
            "Gudur",
            "Vinukonda",
            "Narasapuram",
            "Nuzvid",
            "Markapur",
            "Ponnur",
            "Kandukur",
            "Bobbili",
            "Rayadurg",
            "Samalkot",
            "Jaggaiahpet",
            "Tuni",
            "Amalapuram",
            "Bheemunipatnam",
            "Venkatagiri",
            "Sattenapalle",
            "Pithapuram",
            "Palasa Kasibugga",
            "Parvathipuram",
            "Macherla",
            "Gooty",
            "Salur",
            "Mandapeta",
            "Jammalamadugu",
            "Peddapuram",
            "Punganur",
            "Nidadavole",
            "Repalle",
            "Ramachandrapuram",
            "Kovvur",
            "Tiruvuru",
            "Uravakonda",
            "Narsipatnam",
            "Yerraguntla",
            "Pedana",
            "Puttur",
            "Renigunta",
            "Rajam",
            "Srisailam Project (Right Flank Colony) Township"
          ],

          Punjab: [
            "Ludhiana",
            "Patiala",
            "Amritsar",
            "Jalandhar",
            "Bathinda",
            "Pathankot",
            "Hoshiarpur",
            "Batala",
            "Moga",
            "Malerkotla",
            "Khanna",
            "Mohali",
            "Barnala",
            "Firozpur",
            "Phagwara",
            "Kapurthala",
            "Zirakpur",
            "Kot Kapura",
            "Faridkot",
            "Muktsar",
            "Rajpura",
            "Sangrur",
            "Fazilka",
            "Gurdaspur",
            "Kharar",
            "Gobindgarh",
            "Mansa",
            "Malout",
            "Nabha",
            "Tarn Taran",
            "Jagraon",
            "Sunam",
            "Dhuri",
            "Firozpur Cantt.",
            "Sirhind Fatehgarh Sahib",
            "Rupnagar",
            "Jalandhar Cantt.",
            "Samana",
            "Nawanshahr",
            "Rampura Phul",
            "Nangal",
            "Nakodar",
            "Zira",
            "Patti",
            "Raikot",
            "Longowal",
            "Urmar Tanda",
            "Morinda, India",
            "Phillaur",
            "Pattran",
            "Qadian",
            "Sujanpur",
            "Mukerian",
            "Talwara"
          ],

          Chandigarh: ["Chandigarh"],
          Rajasthan: [
            "Jaipur",
            "Jodhpur",
            "Bikaner",
            "Udaipur",
            "Ajmer",
            "Bhilwara",
            "Alwar",
            "Bharatpur",
            "Pali",
            "Barmer",
            "Sikar",
            "Tonk",
            "Sadulpur",
            "Sawai Madhopur",
            "Nagaur",
            "Makrana",
            "Sujangarh",
            "Sardarshahar",
            "Ladnu",
            "Ratangarh",
            "Nokha",
            "Nimbahera",
            "Suratgarh",
            "Rajsamand",
            "Lachhmangarh",
            "Rajgarh (Churu)",
            "Nasirabad",
            "Nohar",
            "Phalodi",
            "Nathdwara",
            "Pilani",
            "Merta City",
            "Sojat",
            "Neem-Ka-Thana",
            "Sirohi",
            "Pratapgarh",
            "Rawatbhata",
            "Sangaria",
            "Lalsot",
            "Pilibanga",
            "Pipar City",
            "Taranagar",
            "Vijainagar, Ajmer",
            "Sumerpur",
            "Sagwara",
            "Ramganj Mandi",
            "Lakheri",
            "Udaipurwati",
            "Losal",
            "Sri Madhopur",
            "Ramngarh",
            "Rawatsar",
            "Rajakhera",
            "Shahpura",
            "Shahpura",
            "Raisinghnagar",
            "Malpura",
            "Nadbai",
            "Sanchore",
            "Nagar",
            "Rajgarh (Alwar)",
            "Sheoganj",
            "Sadri",
            "Todaraisingh",
            "Todabhim",
            "Reengus",
            "Rajaldesar",
            "Sadulshahar",
            "Sambhar",
            "Prantij",
            "Mount Abu",
            "Mangrol",
            "Phulera",
            "Mandawa",
            "Pindwara",
            "Mandalgarh",
            "Takhatgarh"
          ],

          Assam: [
            "Guwahati",
            "Silchar",
            "Dibrugarh",
            "Nagaon",
            "Tinsukia",
            "Jorhat",
            "Bongaigaon City",
            "Dhubri",
            "Diphu",
            "North Lakhimpur",
            "Tezpur",
            "Karimganj",
            "Sibsagar",
            "Goalpara",
            "Barpeta",
            "Lanka",
            "Lumding",
            "Mankachar",
            "Nalbari",
            "Rangia",
            "Margherita",
            "Mangaldoi",
            "Silapathar",
            "Mariani",
            "Marigaon"
          ],

          Odisha: [
            "Bhubaneswar",
            "Cuttack",
            "Raurkela",
            "Brahmapur",
            "Sambalpur",
            "Puri",
            "Baleshwar Town",
            "Baripada Town",
            "Bhadrak",
            "Balangir",
            "Jharsuguda",
            "Bargarh",
            "Paradip",
            "Bhawanipatna",
            "Dhenkanal",
            "Barbil",
            "Kendujhar",
            "Sunabeda",
            "Rayagada",
            "Jatani",
            "Byasanagar",
            "Kendrapara",
            "Rajagangapur",
            "Parlakhemundi",
            "Talcher",
            "Sundargarh",
            "Phulabani",
            "Pattamundai",
            "Titlagarh",
            "Nabarangapur",
            "Soro",
            "Malkangiri",
            "Rairangpur",
            "Tarbha"
          ],

          Chhattisgarh: [
            "Raipur",
            "Bhilai Nagar",
            "Korba",
            "Bilaspur",
            "Durg",
            "Rajnandgaon",
            "Jagdalpur",
            "Raigarh",
            "Ambikapur",
            "Mahasamund",
            "Dhamtari",
            "Chirmiri",
            "Bhatapara",
            "Dalli-Rajhara",
            "Naila Janjgir",
            "Tilda Newra",
            "Mungeli",
            "Manendragarh",
            "Sakti"
          ],

          "Jammu and Kashmir": [
            "Srinagar",
            "Jammu",
            "Baramula",
            "Anantnag",
            "Sopore",
            "KathUrban Agglomeration",
            "Rajauri",
            "Punch",
            "Udhampur"
          ],

          Karnataka: [
            "Bengaluru",
            "Hubli-Dharwad",
            "Belagavi",
            "Mangaluru",
            "Davanagere",
            "Ballari",
            "Mysore",
            "Tumkur",
            "Shivamogga",
            "Raayachuru",
            "Robertson Pet",
            "Kolar",
            "Mandya",
            "Udupi",
            "Chikkamagaluru",
            "Karwar",
            "Ranebennuru",
            "Ranibennur",
            "Ramanagaram",
            "Gokak",
            "Yadgir",
            "Rabkavi Banhatti",
            "Shahabad",
            "Sirsi",
            "Sindhnur",
            "Tiptur",
            "Arsikere",
            "Nanjangud",
            "Sagara",
            "Sira",
            "Puttur",
            "Athni",
            "Mulbagal",
            "Surapura",
            "Siruguppa",
            "Mudhol",
            "Sidlaghatta",
            "Shahpur",
            "Saundatti-Yellamma",
            "Wadi",
            "Manvi",
            "Nelamangala",
            "Lakshmeshwar",
            "Ramdurg",
            "Nargund",
            "Tarikere",
            "Malavalli",
            "Savanur",
            "Lingsugur",
            "Vijayapura",
            "Sankeshwara",
            "Madikeri",
            "Talikota",
            "Sedam",
            "Shikaripur",
            "Mahalingapura",
            "Mudalagi",
            "Muddebihal",
            "Pavagada",
            "Malur",
            "Sindhagi",
            "Sanduru",
            "Afzalpur",
            "Maddur",
            "Madhugiri",
            "Tekkalakote",
            "Terdal",
            "Mudabidri",
            "Magadi",
            "Navalgund",
            "Shiggaon",
            "Shrirangapattana",
            "Sindagi",
            "Sakaleshapura",
            "Srinivaspur",
            "Ron",
            "Mundargi",
            "Sadalagi",
            "Piriyapatna",
            "Adyar"
          ],

          Manipur: ["Imphal", "Thoubal", "Lilong", "Mayang Imphal"],
          Kerala: [
            "Thiruvananthapuram",
            "Kochi",
            "Kozhikode",
            "Kollam",
            "Thrissur",
            "Palakkad",
            "Alappuzha",
            "Malappuram",
            "Ponnani",
            "Vatakara",
            "Kanhangad",
            "Taliparamba",
            "Koyilandy",
            "Neyyattinkara",
            "Kayamkulam",
            "Nedumangad",
            "Kannur",
            "Tirur",
            "Kottayam",
            "Kasaragod",
            "Kunnamkulam",
            "Ottappalam",
            "Thiruvalla",
            "Thodupuzha",
            "Chalakudy",
            "Changanassery",
            "Punalur",
            "Nilambur",
            "Cherthala",
            "Perinthalmanna",
            "Mattannur",
            "Shoranur",
            "Varkala",
            "Paravoor",
            "Pathanamthitta",
            "Peringathur",
            "Attingal",
            "Kodungallur",
            "Pappinisseri",
            "Chittur-Thathamangalam",
            "Muvattupuzha",
            "Adoor",
            "Mavelikkara",
            "Mavoor",
            "Perumbavoor",
            "Vaikom",
            "Palai",
            "Panniyannur",
            "Guruvayoor",
            "Puthuppally",
            "Panamattom"
          ],

          Delhi: ["Delhi", "New Delhi"],
          "Dadra and Nagar Haveli": ["Silvassa"],
          Puducherry: ["Pondicherry", "Karaikal", "Yanam", "Mahe"],
          Uttarakhand: [
            "Dehradun",
            "Hardwar",
            "Haldwani-cum-Kathgodam",
            "Srinagar",
            "Kashipur",
            "Roorkee",
            "Rudrapur",
            "Rishikesh",
            "Ramnagar",
            "Pithoragarh",
            "Manglaur",
            "Nainital",
            "Mussoorie",
            "Tehri",
            "Pauri",
            "Nagla",
            "Sitarganj",
            "Bageshwar"
          ],

          "Uttar Pradesh": [
            "Lucknow",
            "Kanpur",
            "Firozabad",
            "Agra",
            "Meerut",
            "Varanasi",
            "Allahabad",
            "Amroha",
            "Moradabad",
            "Aligarh",
            "Saharanpur",
            "Noida",
            "Loni",
            "Jhansi",
            "Shahjahanpur",
            "Rampur",
            "Modinagar",
            "Hapur",
            "Etawah",
            "Sambhal",
            "Orai",
            "Bahraich",
            "Unnao",
            "Rae Bareli",
            "Lakhimpur",
            "Sitapur",
            "Lalitpur",
            "Pilibhit",
            "Chandausi",
            "Hardoi ",
            "Azamgarh",
            "Khair",
            "Sultanpur",
            "Tanda",
            "Nagina",
            "Shamli",
            "Najibabad",
            "Shikohabad",
            "Sikandrabad",
            "Shahabad, Hardoi",
            "Pilkhuwa",
            "Renukoot",
            "Vrindavan",
            "Ujhani",
            "Laharpur",
            "Tilhar",
            "Sahaswan",
            "Rath",
            "Sherkot",
            "Kalpi",
            "Tundla",
            "Sandila",
            "Nanpara",
            "Sardhana",
            "Nehtaur",
            "Seohara",
            "Padrauna",
            "Mathura",
            "Thakurdwara",
            "Nawabganj",
            "Siana",
            "Noorpur",
            "Sikandra Rao",
            "Puranpur",
            "Rudauli",
            "Thana Bhawan",
            "Palia Kalan",
            "Zaidpur",
            "Nautanwa",
            "Zamania",
            "Shikarpur, Bulandshahr",
            "Naugawan Sadat",
            "Fatehpur Sikri",
            "Shahabad, Rampur",
            "Robertsganj",
            "Utraula",
            "Sadabad",
            "Rasra",
            "Lar",
            "Lal Gopalganj Nindaura",
            "Sirsaganj",
            "Pihani",
            "Shamsabad, Agra",
            "Rudrapur",
            "Soron",
            "SUrban Agglomerationr",
            "Samdhan",
            "Sahjanwa",
            "Rampur Maniharan",
            "Sumerpur",
            "Shahganj",
            "Tulsipur",
            "Tirwaganj",
            "PurqUrban Agglomerationzi",
            "Shamsabad, Farrukhabad",
            "Warhapur",
            "Powayan",
            "Sandi",
            "Achhnera",
            "Naraura",
            "Nakur",
            "Sahaspur",
            "Safipur",
            "Reoti",
            "Sikanderpur",
            "Saidpur",
            "Sirsi",
            "Purwa",
            "Parasi",
            "Lalganj",
            "Phulpur",
            "Shishgarh",
            "Sahawar",
            "Samthar",
            "Pukhrayan",
            "Obra",
            "Niwai",
            "Mirzapur"
          ],

          Bihar: [
            "Patna",
            "Gaya",
            "Bhagalpur",
            "Muzaffarpur",
            "Darbhanga",
            "Arrah",
            "Begusarai",
            "Chhapra",
            "Katihar",
            "Munger",
            "Purnia",
            "Saharsa",
            "Sasaram",
            "Hajipur",
            "Dehri-on-Sone",
            "Bettiah",
            "Motihari",
            "Bagaha",
            "Siwan",
            "Kishanganj",
            "Jamalpur",
            "Buxar",
            "Jehanabad",
            "Aurangabad",
            "Lakhisarai",
            "Nawada",
            "Jamui",
            "Sitamarhi",
            "Araria",
            "Gopalganj",
            "Madhubani",
            "Masaurhi",
            "Samastipur",
            "Mokameh",
            "Supaul",
            "Dumraon",
            "Arwal",
            "Forbesganj",
            "BhabUrban Agglomeration",
            "Narkatiaganj",
            "Naugachhia",
            "Madhepura",
            "Sheikhpura",
            "Sultanganj",
            "Raxaul Bazar",
            "Ramnagar",
            "Mahnar Bazar",
            "Warisaliganj",
            "Revelganj",
            "Rajgir",
            "Sonepur",
            "Sherghati",
            "Sugauli",
            "Makhdumpur",
            "Maner",
            "Rosera",
            "Nokha",
            "Piro",
            "Rafiganj",
            "Marhaura",
            "Mirganj",
            "Lalganj",
            "Murliganj",
            "Motipur",
            "Manihari",
            "Sheohar",
            "Maharajganj",
            "Silao",
            "Barh",
            "Asarganj"
          ],

          Gujarat: [
            "Ahmedabad",
            "Surat",
            "Vadodara",
            "Rajkot",
            "Bhavnagar",
            "Jamnagar",
            "Nadiad",
            "Porbandar",
            "Anand",
            "Morvi",
            "Mahesana",
            "Bharuch",
            "Vapi",
            "Navsari",
            "Veraval",
            "Bhuj",
            "Godhra",
            "Palanpur",
            "Valsad",
            "Patan",
            "Deesa",
            "Amreli",
            "Anjar",
            "Dhoraji",
            "Khambhat",
            "Mahuva",
            "Keshod",
            "Wadhwan",
            "Ankleshwar",
            "Savarkundla",
            "Kadi",
            "Visnagar",
            "Upleta",
            "Una",
            "Sidhpur",
            "Unjha",
            "Mangrol",
            "Viramgam",
            "Modasa",
            "Palitana",
            "Petlad",
            "Kapadvanj",
            "Sihor",
            "Wankaner",
            "Limbdi",
            "Mandvi",
            "Thangadh",
            "Vyara",
            "Padra",
            "Lunawada",
            "Rajpipla",
            "Vapi",
            "Umreth",
            "Sanand",
            "Rajula",
            "Radhanpur",
            "Mahemdabad",
            "Ranavav",
            "Tharad",
            "Mansa",
            "Umbergaon",
            "Talaja",
            "Vadnagar",
            "Manavadar",
            "Salaya",
            "Vijapur",
            "Pardi",
            "Rapar",
            "Songadh",
            "Lathi",
            "Adalaj",
            "Chhapra",
            "Gandhinagar"
          ],

          Telangana: [
            "Hyderabad",
            "Warangal",
            "Nizamabad",
            "Karimnagar",
            "Ramagundam",
            "Khammam",
            "Mahbubnagar",
            "Mancherial",
            "Adilabad",
            "Suryapet",
            "Jagtial",
            "Miryalaguda",
            "Nirmal",
            "Kamareddy",
            "Kothagudem",
            "Bodhan",
            "Palwancha",
            "Mandamarri",
            "Koratla",
            "Sircilla",
            "Tandur",
            "Siddipet",
            "Wanaparthy",
            "Kagaznagar",
            "Gadwal",
            "Sangareddy",
            "Bellampalle",
            "Bhongir",
            "Vikarabad",
            "Jangaon",
            "Bhadrachalam",
            "Bhainsa",
            "Farooqnagar",
            "Medak",
            "Narayanpet",
            "Sadasivpet",
            "Yellandu",
            "Manuguru",
            "Kyathampalle",
            "Nagarkurnool"
          ],

          Meghalaya: ["Shillong", "Tura", "Nongstoin"],
          "Arunachal Pradesh": ["Naharlagun", "Pasighat"],
          Maharashtra: [
            "Mumbai",
            "Pune",
            "Nagpur",
            "Thane",
            "Nashik",
            "Kalyan-Dombivali",
            "Vasai-Virar",
            "Solapur",
            "Mira-Bhayandar",
            "Bhiwandi",
            "Amravati",
            "Nanded-Waghala",
            "Sangli",
            "Malegaon",
            "Akola",
            "Latur",
            "Dhule",
            "Ahmednagar",
            "Ichalkaranji",
            "Parbhani",
            "Panvel",
            "Yavatmal",
            "Achalpur",
            "Osmanabad",
            "Nandurbar",
            "Satara",
            "Wardha",
            "Udgir",
            "Aurangabad",
            "Amalner",
            "Akot",
            "Pandharpur",
            "Shrirampur",
            "Parli",
            "Washim",
            "Ambejogai",
            "Manmad",
            "Ratnagiri",
            "Uran Islampur",
            "Pusad",
            "Sangamner",
            "Shirpur-Warwade",
            "Malkapur",
            "Wani",
            "Lonavla",
            "Talegaon Dabhade",
            "Anjangaon",
            "Umred",
            "Palghar",
            "Shegaon",
            "Ozar",
            "Phaltan",
            "Yevla",
            "Shahade",
            "Vita",
            "Umarkhed",
            "Warora",
            "Pachora",
            "Tumsar",
            "Manjlegaon",
            "Sillod",
            "Arvi",
            "Nandura",
            "Vaijapur",
            "Wadgaon Road",
            "Sailu",
            "Murtijapur",
            "Tasgaon",
            "Mehkar",
            "Yawal",
            "Pulgaon",
            "Nilanga",
            "Wai",
            "Umarga",
            "Paithan",
            "Rahuri",
            "Nawapur",
            "Tuljapur",
            "Morshi",
            "Purna",
            "Satana",
            "Pathri",
            "Sinnar",
            "Uchgaon",
            "Uran",
            "Pen",
            "Karjat",
            "Manwath",
            "Partur",
            "Sangole",
            "Mangrulpir",
            "Risod",
            "Shirur",
            "Savner",
            "Sasvad",
            "Pandharkaoda",
            "Talode",
            "Shrigonda",
            "Shirdi",
            "Raver",
            "Mukhed",
            "Rajura",
            "Vadgaon Kasba",
            "Tirora",
            "Mahad",
            "Lonar",
            "Sawantwadi",
            "Pathardi",
            "Pauni",
            "Ramtek",
            "Mul",
            "Soyagaon",
            "Mangalvedhe",
            "Narkhed",
            "Shendurjana",
            "Patur",
            "Mhaswad",
            "Loha",
            "Nandgaon",
            "Warud"
          ],

          Goa: ["Marmagao", "Panaji", "Margao", "Mapusa"],
          "West Bengal": [
            "Kolkata",
            "Siliguri",
            "Asansol",
            "Raghunathganj",
            "Kharagpur",
            "Naihati",
            "English Bazar",
            "Baharampur",
            "Hugli-Chinsurah",
            "Raiganj",
            "Jalpaiguri",
            "Santipur",
            "Balurghat",
            "Medinipur",
            "Habra",
            "Ranaghat",
            "Bankura",
            "Nabadwip",
            "Darjiling",
            "Purulia",
            "Arambagh",
            "Tamluk",
            "AlipurdUrban Agglomerationr",
            "Suri",
            "Jhargram",
            "Gangarampur",
            "Rampurhat",
            "Kalimpong",
            "Sainthia",
            "Taki",
            "Murshidabad",
            "Memari",
            "Paschim Punropara",
            "Tarakeswar",
            "Sonamukhi",
            "PandUrban Agglomeration",
            "Mainaguri",
            "Malda",
            "Panchla",
            "Raghunathpur",
            "Mathabhanga",
            "Monoharpur",
            "Srirampore",
            "Adra"
          ]
        })
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const new$Queries = {
    userInfo: usePlasmicDataOp(() => {
      return {
        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
        opId: "d601eccc-4ce0-4155-aadf-df759265513a",
        userArgs: {},
        cacheKey: `plasmic.$.d601eccc-4ce0-4155-aadf-df759265513a.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    vendorInfo: usePlasmicDataOp(() => {
      return {
        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
        opId: "3fc9312b-1def-482b-88e3-fff4daf57ecb",
        userArgs: {},
        cacheKey: `plasmic.$.3fc9312b-1def-482b-88e3-fff4daf57ecb.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    storeNames: usePlasmicDataOp(() => {
      return {
        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
        opId: "7f049ed6-2acf-4e72-bea3-7907019097fb",
        userArgs: {},
        cacheKey: `plasmic.$.7f049ed6-2acf-4e72-bea3-7907019097fb.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    services: usePlasmicDataOp(() => {
      return {
        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
        opId: "b4891d9a-92c8-4637-86df-facc52810946",
        userArgs: {},
        cacheKey: `plasmic.$.b4891d9a-92c8-4637-86df-facc52810946.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    venues: usePlasmicDataOp(() => {
      return {
        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
        opId: "7639ca34-ec92-4f89-832b-82314481df75",
        userArgs: {},
        cacheKey: `plasmic.$.7639ca34-ec92-4f89-832b-82314481df75.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszapf5SksSeNd()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <LayerDefault
            data-plasmic-name={"layerDefault"}
            data-plasmic-override={overrides.layerDefault}
            className={classNames("__wab_instance", sty.layerDefault)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__fPh9B)}>
              <div
                data-plasmic-name={"steps2"}
                data-plasmic-override={overrides.steps2}
                className={classNames(projectcss.all, sty.steps2)}
              >
                <VendorOnboardingSteps
                  data-plasmic-name={"vendorOnboardingSteps"}
                  data-plasmic-override={overrides.vendorOnboardingSteps}
                  className={classNames(
                    "__wab_instance",
                    sty.vendorOnboardingSteps
                  )}
                />

                <Stack__
                  as={"div"}
                  data-plasmic-name={"forms"}
                  data-plasmic-override={overrides.forms}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.forms)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__q846S
                    )}
                  >
                    {"Get your shop ready!"}
                  </div>
                  {(() => {
                    try {
                      return $state.currentStep <= 1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"businessInformation"}
                      data-plasmic-override={overrides.businessInformation}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.businessInformation
                      )}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__iTSsn
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__h1ZlX
                          )}
                        >
                          {"Business Information"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7ExJq
                          )}
                        >
                          {
                            "Complete these steps to set up your shop, and our team will contact you soon!"
                          }
                        </div>
                      </Stack__>
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.businessForm
                          ),
                          extendedOnValuesChange: async (...eventArgs) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["businessForm", "value"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          formItems: [
                            { label: "Name", name: "name", inputType: "Text" },
                            {
                              label: "Message",
                              name: "message",
                              inputType: "Text Area"
                            }
                          ],

                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "vertical",
                          mode: "advanced",
                          onIsSubmittingChange: async (...eventArgs) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["businessForm", "isSubmitting"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          ref: ref => {
                            $refs["businessForm"] = ref;
                          },
                          submitSlot: null,
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "businessForm.value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "businessForm.isSubmitting"
                            }
                          ],

                          [],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <FormWrapper
                            data-plasmic-name={"businessForm"}
                            data-plasmic-override={overrides.businessForm}
                            {...child$Props}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ssdVe
                              )}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__cqvtf
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__z4Ex7
                                  )}
                                >
                                  <FormItemWrapper
                                    data-plasmic-name={"firstName"}
                                    data-plasmic-override={overrides.firstName}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.firstName
                                    )}
                                    label={null}
                                    name={"firstname"}
                                    noLabel={true}
                                    noStyle={false}
                                    rules={[{ ruleType: "required" }]}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__uiKj
                                      )}
                                    >
                                      {(() => {
                                        const child$Props = {
                                          bordered: false,
                                          className: classNames(
                                            "__wab_instance",
                                            sty.input2
                                          ),
                                          onChange: async (...eventArgs) => {
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "value",
                                              ["input2", "value"],
                                              AntdInput_Helpers
                                            ).apply(null, eventArgs);
                                          },
                                          placeholder: "First Name*",
                                          value: generateStateValueProp(
                                            $state,
                                            ["input2", "value"]
                                          )
                                        };
                                        initializeCodeComponentStates(
                                          $state,
                                          [
                                            {
                                              name: "value",
                                              plasmicStateName: "input2.value"
                                            }
                                          ],

                                          [],
                                          AntdInput_Helpers ?? {},
                                          child$Props
                                        );
                                        return (
                                          <AntdInput
                                            data-plasmic-name={"input2"}
                                            data-plasmic-override={
                                              overrides.input2
                                            }
                                            {...child$Props}
                                          />
                                        );
                                      })()}
                                    </div>
                                  </FormItemWrapper>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField___1N417
                                    )}
                                    label={null}
                                    name={"lastname"}
                                    noLabel={true}
                                    noStyle={false}
                                    rules={[{ ruleType: "required" }]}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__nkZok
                                      )}
                                    >
                                      {(() => {
                                        const child$Props = {
                                          bordered: false,
                                          className: classNames(
                                            "__wab_instance",
                                            sty.input3
                                          ),
                                          onChange: async (...eventArgs) => {
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "value",
                                              ["input3", "value"],
                                              AntdInput_Helpers
                                            ).apply(null, eventArgs);
                                          },
                                          placeholder: "Last Name*",
                                          value: generateStateValueProp(
                                            $state,
                                            ["input3", "value"]
                                          )
                                        };
                                        initializeCodeComponentStates(
                                          $state,
                                          [
                                            {
                                              name: "value",
                                              plasmicStateName: "input3.value"
                                            }
                                          ],

                                          [],
                                          AntdInput_Helpers ?? {},
                                          child$Props
                                        );
                                        return (
                                          <AntdInput
                                            data-plasmic-name={"input3"}
                                            data-plasmic-override={
                                              overrides.input3
                                            }
                                            {...child$Props}
                                          />
                                        );
                                      })()}
                                    </div>
                                  </FormItemWrapper>
                                </Stack__>
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__aMtTl
                                  )}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField___233A9
                                    )}
                                    hideValidationMessage={false}
                                    label={null}
                                    name={"business"}
                                    noLabel={true}
                                    noStyle={false}
                                    rules={[
                                      { ruleType: "required" },
                                      {
                                        ruleType: "advanced",
                                        custom: (rule, value) => {
                                          return !$state.storeNameValidation;
                                        },
                                        message: "Business already exists"
                                      }
                                    ]}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__dIdcZ
                                      )}
                                    >
                                      {(() => {
                                        const child$Props = {
                                          bordered: false,
                                          className: classNames(
                                            "__wab_instance",
                                            sty.businessName
                                          ),
                                          onChange: async (...eventArgs) => {
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "value",
                                              ["businessName", "value"],
                                              AntdInput_Helpers
                                            ).apply(null, eventArgs);
                                          },
                                          placeholder: "Business Name*",
                                          value: generateStateValueProp(
                                            $state,
                                            ["businessName", "value"]
                                          )
                                        };
                                        initializeCodeComponentStates(
                                          $state,
                                          [
                                            {
                                              name: "value",
                                              plasmicStateName:
                                                "businessName.value"
                                            }
                                          ],

                                          [],
                                          AntdInput_Helpers ?? {},
                                          child$Props
                                        );
                                        return (
                                          <AntdInput
                                            data-plasmic-name={"businessName"}
                                            data-plasmic-override={
                                              overrides.businessName
                                            }
                                            {...child$Props}
                                          />
                                        );
                                      })()}
                                    </div>
                                  </FormItemWrapper>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__xPpSc
                                    )}
                                    hideValidationMessage={false}
                                    label={null}
                                    name={"type"}
                                    noLabel={true}
                                    noStyle={false}
                                    rules={[
                                      {
                                        ruleType: "advanced",
                                        custom: (rule, value) => {
                                          return $state.type.value != undefined;
                                        },
                                        message: "type is required"
                                      }
                                    ]}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__g36SU
                                      )}
                                    >
                                      <AntdSelect
                                        data-plasmic-name={"type"}
                                        data-plasmic-override={overrides.type}
                                        bordered={false}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.type
                                        )}
                                        defaultStylesClassName={classNames(
                                          projectcss.root_reset,
                                          projectcss.plasmic_default_styles,
                                          projectcss.plasmic_mixins,
                                          projectcss.plasmic_tokens,
                                          plasmic_antd_5_hostless_css.plasmic_tokens,
                                          plasmic_plasmic_rich_components_css.plasmic_tokens
                                        )}
                                        onChange={async (...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "type",
                                            "value"
                                          ]).apply(null, eventArgs);
                                          (async (value, option) => {
                                            const $steps = {};
                                            $steps["updateTags2Value"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "tags2",
                                                        "value"
                                                      ]
                                                    },
                                                    operation: 0
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;
                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updateTags2Value"] !=
                                                null &&
                                              typeof $steps[
                                                "updateTags2Value"
                                              ] === "object" &&
                                              typeof $steps["updateTags2Value"]
                                                .then === "function"
                                            ) {
                                              $steps["updateTags2Value"] =
                                                await $steps[
                                                  "updateTags2Value"
                                                ];
                                            }
                                          }).apply(null, eventArgs);
                                        }}
                                        options={(() => {
                                          const __composite = [
                                            {
                                              value: null,
                                              label: null,
                                              type: "option"
                                            },
                                            {
                                              value: null,
                                              label: null,
                                              type: "option"
                                            }
                                          ];

                                          __composite["0"]["value"] = "Service";
                                          __composite["0"]["label"] = "Service";
                                          __composite["1"]["value"] = "Venue";
                                          __composite["1"]["label"] = "Venue";
                                          return __composite;
                                        })()}
                                        placeholder={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__hks2Q
                                            )}
                                          >
                                            {"Business Type*"}
                                          </div>
                                        }
                                        popupScopeClassName={sty["type__popup"]}
                                        showSearch={true}
                                        value={generateStateValueProp($state, [
                                          "type",
                                          "value"
                                        ])}
                                      />
                                    </div>
                                  </FormItemWrapper>
                                </Stack__>
                                {(() => {
                                  try {
                                    return $state.type.value;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"tags"}
                                    data-plasmic-override={overrides.tags}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.tags
                                    )}
                                  >
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__jzi94
                                      )}
                                      hideValidationMessage={false}
                                      label={null}
                                      name={"tags"}
                                      noLabel={true}
                                      noStyle={false}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__bZzxL
                                        )}
                                      >
                                        <AntdSelect
                                          data-plasmic-name={"tags2"}
                                          data-plasmic-override={
                                            overrides.tags2
                                          }
                                          bordered={false}
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tags2
                                          )}
                                          defaultStylesClassName={classNames(
                                            projectcss.root_reset,
                                            projectcss.plasmic_default_styles,
                                            projectcss.plasmic_mixins,
                                            projectcss.plasmic_tokens,
                                            plasmic_antd_5_hostless_css.plasmic_tokens,
                                            plasmic_plasmic_rich_components_css.plasmic_tokens
                                          )}
                                          mode={"single"}
                                          onChange={async (...eventArgs) => {
                                            generateStateOnChangeProp($state, [
                                              "tags2",
                                              "value"
                                            ]).apply(null, eventArgs);
                                          }}
                                          options={[
                                            {
                                              value: "option1",
                                              label: "Option 1",
                                              type: "option"
                                            },
                                            {
                                              value: "option2",
                                              label: "Option 2",
                                              type: "option"
                                            }
                                          ]}
                                          placeholder={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__jy3Lb
                                              )}
                                            >
                                              {""}
                                            </div>
                                          }
                                          popupScopeClassName={
                                            sty["tags2__popup"]
                                          }
                                          showSearch={true}
                                          value={generateStateValueProp(
                                            $state,
                                            ["tags2", "value"]
                                          )}
                                        />
                                      </div>
                                    </FormItemWrapper>
                                  </Stack__>
                                ) : null}
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ukdVb
                                  )}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__uLCp
                                    )}
                                    label={null}
                                    name={"street"}
                                    noLabel={true}
                                    noStyle={false}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__rhgTv
                                      )}
                                    >
                                      {(() => {
                                        const child$Props = {
                                          bordered: false,
                                          className: classNames(
                                            "__wab_instance",
                                            sty.input8
                                          ),
                                          onChange: async (...eventArgs) => {
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "value",
                                              ["input8", "value"],
                                              AntdInput_Helpers
                                            ).apply(null, eventArgs);
                                          },
                                          placeholder: "Steet/Building",
                                          value: generateStateValueProp(
                                            $state,
                                            ["input8", "value"]
                                          )
                                        };
                                        initializeCodeComponentStates(
                                          $state,
                                          [
                                            {
                                              name: "value",
                                              plasmicStateName: "input8.value"
                                            }
                                          ],

                                          [],
                                          AntdInput_Helpers ?? {},
                                          child$Props
                                        );
                                        return (
                                          <AntdInput
                                            data-plasmic-name={"input8"}
                                            data-plasmic-override={
                                              overrides.input8
                                            }
                                            {...child$Props}
                                          />
                                        );
                                      })()}
                                    </div>
                                  </FormItemWrapper>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__ijE
                                    )}
                                    label={null}
                                    name={"city"}
                                    noLabel={true}
                                    noStyle={false}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__yWgy
                                      )}
                                    >
                                      <AntdSelect
                                        data-plasmic-name={"city"}
                                        data-plasmic-override={overrides.city}
                                        bordered={false}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.city
                                        )}
                                        defaultStylesClassName={classNames(
                                          projectcss.root_reset,
                                          projectcss.plasmic_default_styles,
                                          projectcss.plasmic_mixins,
                                          projectcss.plasmic_tokens,
                                          plasmic_antd_5_hostless_css.plasmic_tokens,
                                          plasmic_plasmic_rich_components_css.plasmic_tokens
                                        )}
                                        onChange={async (...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "city",
                                            "value"
                                          ]).apply(null, eventArgs);
                                        }}
                                        options={[
                                          {
                                            value: "option1",
                                            label: "Option 1",
                                            type: "option"
                                          },
                                          {
                                            value: "option2",
                                            label: "Option 2",
                                            type: "option"
                                          }
                                        ]}
                                        placeholder={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ugB06
                                            )}
                                          >
                                            {"City*"}
                                          </div>
                                        }
                                        popupScopeClassName={sty["city__popup"]}
                                        showSearch={true}
                                        value={generateStateValueProp($state, [
                                          "city",
                                          "value"
                                        ])}
                                      />
                                    </div>
                                  </FormItemWrapper>
                                </Stack__>
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ua8Nv
                                  )}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__eVnZz
                                    )}
                                    label={null}
                                    name={"state"}
                                    noLabel={true}
                                    noStyle={false}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__oPkDt
                                      )}
                                    >
                                      <AntdSelect
                                        data-plasmic-name={"state"}
                                        data-plasmic-override={overrides.state}
                                        bordered={false}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.state
                                        )}
                                        defaultStylesClassName={classNames(
                                          projectcss.root_reset,
                                          projectcss.plasmic_default_styles,
                                          projectcss.plasmic_mixins,
                                          projectcss.plasmic_tokens,
                                          plasmic_antd_5_hostless_css.plasmic_tokens,
                                          plasmic_plasmic_rich_components_css.plasmic_tokens
                                        )}
                                        onChange={async (...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "state",
                                            "value"
                                          ]).apply(null, eventArgs);
                                        }}
                                        options={[
                                          {
                                            value: "option1",
                                            label: "Option 1",
                                            type: "option"
                                          },
                                          {
                                            value: "option2",
                                            label: "Option 2",
                                            type: "option"
                                          }
                                        ]}
                                        placeholder={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__fyEnB
                                            )}
                                          >
                                            {"State*"}
                                          </div>
                                        }
                                        popupScopeClassName={
                                          sty["state__popup"]
                                        }
                                        showSearch={true}
                                        value={generateStateValueProp($state, [
                                          "state",
                                          "value"
                                        ])}
                                      />
                                    </div>
                                  </FormItemWrapper>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField___0Q34U
                                    )}
                                    label={null}
                                    name={"pincode"}
                                    noLabel={true}
                                    noStyle={false}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__hwHxk
                                      )}
                                    >
                                      {(() => {
                                        const child$Props = {
                                          bordered: false,
                                          className: classNames(
                                            "__wab_instance",
                                            sty.input7
                                          ),
                                          onChange: async (...eventArgs) => {
                                            generateStateOnChangePropForCodeComponents(
                                              $state,
                                              "value",
                                              ["input7", "value"],
                                              AntdInput_Helpers
                                            ).apply(null, eventArgs);
                                          },
                                          placeholder: "Pincode*",
                                          value: generateStateValueProp(
                                            $state,
                                            ["input7", "value"]
                                          )
                                        };
                                        initializeCodeComponentStates(
                                          $state,
                                          [
                                            {
                                              name: "value",
                                              plasmicStateName: "input7.value"
                                            }
                                          ],

                                          [],
                                          AntdInput_Helpers ?? {},
                                          child$Props
                                        );
                                        return (
                                          <AntdInput
                                            data-plasmic-name={"input7"}
                                            data-plasmic-override={
                                              overrides.input7
                                            }
                                            {...child$Props}
                                          />
                                        );
                                      })()}
                                    </div>
                                  </FormItemWrapper>
                                </Stack__>
                              </Stack__>
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ozhK
                                )}
                              >
                                <AntdButton
                                  data-plasmic-name={"home"}
                                  data-plasmic-override={overrides.home}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.home
                                  )}
                                  danger={true}
                                  submitsForm={false}
                                  type={"default"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__hir1E
                                    )}
                                  >
                                    {"Back to Home"}
                                  </div>
                                </AntdButton>
                                <ButtonContainer
                                  className={classNames(
                                    "__wab_instance",
                                    sty.buttonContainer__ePbxI
                                  )}
                                >
                                  <AntdButton
                                    data-plasmic-name={"next"}
                                    data-plasmic-override={overrides.next}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.next
                                    )}
                                    danger={true}
                                    submitsForm={true}
                                    type={"ghost"}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___0Uuik
                                      )}
                                    >
                                      {"Next"}
                                    </div>
                                  </AntdButton>
                                </ButtonContainer>
                              </Stack__>
                            </Stack__>
                          </FormWrapper>
                        );
                      })()}
                    </Stack__>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return $state.currentStep === 2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return $state.currentStep === 2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()
                  ) ? (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"whatsappVerification"}
                      data-plasmic-override={overrides.whatsappVerification}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.whatsappVerification
                      )}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xQkK6
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__actRp
                          )}
                        >
                          {"Verify your Whatsapp"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ikcW
                          )}
                        >
                          {
                            "Complete these steps to set up your shop, and our team will contact you soon!"
                          }
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__osguI
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.whatsappForm
                            ),
                            extendedOnValuesChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["whatsappForm", "value"],
                                FormWrapper_Helpers
                              ).apply(null, eventArgs);
                              (async (changedValues, allValues) => {
                                const $steps = {};
                                $steps["graphqlQuery"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "bvg9JqrXbdUtvMXZbC26cd",
                                          opId: "0e580d20-0a1f-42a8-870f-dfb94f3278da",
                                          userArgs: {
                                            variables: [
                                              $state.vendorId,
                                              $state.whatsapp2.value
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: null,
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["graphqlQuery"] != null &&
                                  typeof $steps["graphqlQuery"] === "object" &&
                                  typeof $steps["graphqlQuery"].then ===
                                    "function"
                                ) {
                                  $steps["graphqlQuery"] = await $steps[
                                    "graphqlQuery"
                                  ];
                                }
                                $steps["httpPost"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "9Ec94AiZppYUapp3zS4mTp",
                                          opId: "1fc9d045-eedb-4c8b-ab09-6e3a9eb8b587",
                                          userArgs: {},
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],

                                          roleId: null
                                        },
                                        continueOnError: true
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["httpPost"] != null &&
                                  typeof $steps["httpPost"] === "object" &&
                                  typeof $steps["httpPost"].then === "function"
                                ) {
                                  $steps["httpPost"] = await $steps["httpPost"];
                                }
                                $steps["updateVerificationCode"] = $steps
                                  .httpPost?.data?.response?.success
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["verificationCode"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;
                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateVerificationCode"] != null &&
                                  typeof $steps["updateVerificationCode"] ===
                                    "object" &&
                                  typeof $steps["updateVerificationCode"]
                                    .then === "function"
                                ) {
                                  $steps["updateVerificationCode"] =
                                    await $steps["updateVerificationCode"];
                                }
                                $steps["invokeGlobalAction"] = $steps.httpPost
                                  ?.data?.response?.success
                                  ? (() => {
                                      const actionArgs = {
                                        args: ["success", "OTP Sent!"]
                                      };
                                      return $globalActions[
                                        "plasmic-antd5-config-provider.showNotification"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["invokeGlobalAction"] != null &&
                                  typeof $steps["invokeGlobalAction"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction"] = await $steps[
                                    "invokeGlobalAction"
                                  ];
                                }
                              }).apply(null, eventArgs);
                            },
                            formItems: [
                              {
                                label: "Name",
                                name: "name",
                                inputType: "Text"
                              },
                              {
                                label: "Message",
                                name: "message",
                                inputType: "Text Area"
                              }
                            ],

                            labelCol: { span: 8, horizontalOnly: true },
                            layout: "vertical",
                            mode: "advanced",
                            onIsSubmittingChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "isSubmitting",
                                ["whatsappForm", "isSubmitting"],
                                FormWrapper_Helpers
                              ).apply(null, eventArgs);
                            },
                            ref: ref => {
                              $refs["whatsappForm"] = ref;
                            },
                            submitSlot: null,
                            wrapperCol: { span: 16, horizontalOnly: true }
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "whatsappForm.value"
                              },
                              {
                                name: "isSubmitting",
                                plasmicStateName: "whatsappForm.isSubmitting"
                              }
                            ],

                            [],
                            FormWrapper_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <FormWrapper
                              data-plasmic-name={"whatsappForm"}
                              data-plasmic-override={overrides.whatsappForm}
                              {...child$Props}
                            >
                              <FormItemWrapper
                                data-plasmic-name={"whatsapp"}
                                data-plasmic-override={overrides.whatsapp}
                                className={classNames(
                                  "__wab_instance",
                                  sty.whatsapp
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___7C5Wq
                                    )}
                                  >
                                    {"Whatsapp Number"}
                                  </div>
                                }
                                name={"whatsapp"}
                                noLabel={true}
                                noStyle={false}
                              >
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__yuswA
                                  )}
                                >
                                  {(() => {
                                    const child$Props = {
                                      bordered: false,
                                      className: classNames(
                                        "__wab_instance",
                                        sty.whatsapp2
                                      ),
                                      onChange: async (...eventArgs) => {
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["whatsapp2", "value"],
                                          AntdInput_Helpers
                                        ).apply(null, eventArgs);
                                      },
                                      placeholder: "Whatsapp Number*",
                                      value: generateStateValueProp($state, [
                                        "whatsapp2",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "whatsapp2.value"
                                        }
                                      ],

                                      [],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );
                                    return (
                                      <AntdInput
                                        data-plasmic-name={"whatsapp2"}
                                        data-plasmic-override={
                                          overrides.whatsapp2
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </Stack__>
                              </FormItemWrapper>
                              <ButtonContainer
                                className={classNames(
                                  "__wab_instance",
                                  sty.buttonContainer__dcfA
                                )}
                              >
                                <AntdButton
                                  data-plasmic-name={"verify"}
                                  data-plasmic-override={overrides.verify}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.verify
                                  )}
                                  danger={true}
                                  loading={false}
                                  submitsForm={true}
                                  type={"ghost"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__qnCqx
                                    )}
                                  >
                                    {"Verify"}
                                  </div>
                                </AntdButton>
                              </ButtonContainer>
                            </FormWrapper>
                          );
                        })()}
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? (() => {
                                try {
                                  return $state.verificationCode;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()
                            : true
                        ) ? (
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"verification"}
                            data-plasmic-override={overrides.verification}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.verification
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___1IdOz
                              )}
                            >
                              {"Enter Your Verification Code"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___4QCsh
                              )}
                            >
                              {(() => {
                                const child$Props = {
                                  addonAfter: null,
                                  bordered: false,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.verifyCode
                                  ),
                                  disabled: (() => {
                                    try {
                                      return undefined;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  onChange: async (...eventArgs) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["verifyCode", "value"],
                                      AntdInput_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  placeholder: "Verification Code",
                                  suffix: (
                                    <CheckCircleSvgrepoComSvgIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___5Br0N
                                      )}
                                      role={"img"}
                                    />
                                  ),

                                  type: "password",
                                  value: generateStateValueProp($state, [
                                    "verifyCode",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "verifyCode.value"
                                    }
                                  ],

                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );
                                return (
                                  <AntdInput
                                    data-plasmic-name={"verifyCode"}
                                    data-plasmic-override={overrides.verifyCode}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? (() => {
                                    try {
                                      return $state.whatsappVerified;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()
                                : true
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__e6Koi
                                )}
                              >
                                {"Code Verified"}
                              </div>
                            ) : null}
                          </Stack__>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yQkur
                          )}
                        >
                          <AntdButton
                            data-plasmic-name={"home2"}
                            data-plasmic-override={overrides.home2}
                            className={classNames("__wab_instance", sty.home2)}
                            danger={true}
                            onClick={async () => {
                              const $steps = {};
                              $steps["goToHomepage"] = true
                                ? (() => {
                                    const actionArgs = { destination: `/` };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        location.assign(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["goToHomepage"] != null &&
                                typeof $steps["goToHomepage"] === "object" &&
                                typeof $steps["goToHomepage"].then ===
                                  "function"
                              ) {
                                $steps["goToHomepage"] = await $steps[
                                  "goToHomepage"
                                ];
                              }
                            }}
                            submitsForm={false}
                            type={"default"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__eYcJi
                              )}
                            >
                              {"Back to Home"}
                            </div>
                          </AntdButton>
                          <ButtonContainer
                            className={classNames(
                              "__wab_instance",
                              sty.buttonContainer__oyPc
                            )}
                          >
                            <AntdButton
                              data-plasmic-name={"next2"}
                              data-plasmic-override={overrides.next2}
                              className={classNames(
                                "__wab_instance",
                                sty.next2
                              )}
                              danger={true}
                              disabled={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? (() => {
                                      try {
                                        return !$state.whatsappVerified;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  : undefined
                              }
                              onClick={async () => {
                                const $steps = {};
                                $steps["graphqlQuery"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "bvg9JqrXbdUtvMXZbC26cd",
                                          opId: "0bb5a7d5-4c2e-411f-a63d-7902c95aaf1d",
                                          userArgs: {
                                            variables: [$state.vendorId]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: null,
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["graphqlQuery"] != null &&
                                  typeof $steps["graphqlQuery"] === "object" &&
                                  typeof $steps["graphqlQuery"].then ===
                                    "function"
                                ) {
                                  $steps["graphqlQuery"] = await $steps[
                                    "graphqlQuery"
                                  ];
                                }
                                $steps["updateCurrentStep"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["currentStep"]
                                        },
                                        operation: 0,
                                        value: 3
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;
                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateCurrentStep"] != null &&
                                  typeof $steps["updateCurrentStep"] ===
                                    "object" &&
                                  typeof $steps["updateCurrentStep"].then ===
                                    "function"
                                ) {
                                  $steps["updateCurrentStep"] = await $steps[
                                    "updateCurrentStep"
                                  ];
                                }
                              }}
                              submitsForm={false}
                              type={"ghost"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__uJ5QV
                                )}
                              >
                                {"Next"}
                              </div>
                            </AntdButton>
                          </ButtonContainer>
                        </Stack__>
                      </Stack__>
                    </Stack__>
                  ) : null}
                  {(() => {
                    try {
                      return $state.currentStep === 3;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"documents"}
                      data-plasmic-override={overrides.documents}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.documents)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yjnsY
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mfwDc
                          )}
                        >
                          {"Upload your Documents"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xWgR
                          )}
                        >
                          {
                            "Complete these steps to set up your shop, and our team will contact you soon!"
                          }
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nlatW
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.uploadForm
                            ),
                            extendedOnValuesChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["uploadForm", "value"],
                                FormWrapper_Helpers
                              ).apply(null, eventArgs);
                              (async (changedValues, allValues) => {
                                const $steps = {};
                              }).apply(null, eventArgs);
                            },
                            formItems: [
                              {
                                label: "Name",
                                name: "name",
                                inputType: "Text"
                              },
                              {
                                label: "Message",
                                name: "message",
                                inputType: "Text Area"
                              }
                            ],

                            labelCol: { span: 8, horizontalOnly: true },
                            layout: "vertical",
                            mode: "advanced",
                            onFinish: async values => {
                              const $steps = {};
                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (async () => {
                                          function base64ToBlob(
                                            base64,
                                            mimeType
                                          ) {
                                            const byteCharacters = atob(base64);
                                            const byteNumbers = new Array(
                                              byteCharacters.length
                                            );
                                            for (
                                              let i = 0;
                                              i < byteCharacters.length;
                                              i++
                                            ) {
                                              byteNumbers[i] =
                                                byteCharacters.charCodeAt(i);
                                            }
                                            const byteArray = new Uint8Array(
                                              byteNumbers
                                            );
                                            return new Blob([byteArray], {
                                              type: mimeType
                                            });
                                          }
                                          const aadhar = $state.aadhar2.files;
                                          const myHeaders = new Headers();
                                          myHeaders.append(
                                            "Authorization",
                                            "bearer a21a6b9751ba24a204ac31f092330e7fee08ef5669f20faa2b699b3d9fd0a59f3775120e2fc63ac4784e47ddb63ee1f68a37ba53254c4f991a2c4d3725bec5132dc17c67205cdea33b163b14e403bfbc2bb447a5ee4d50ad1b2c63d352bd024b62c3498400aac2364858c0ff5bbba7a7c71937e8c549afea037011b6608d1ae5"
                                          );
                                          async function uploadFiles(files) {
                                            const formdata = new FormData();
                                            formdata.append(
                                              "ref",
                                              "api::store-owner.store-owner"
                                            );
                                            formdata.append(
                                              "refId",
                                              $state.vendorId
                                            );
                                            formdata.append(
                                              "field",
                                              "Aadhar_Card"
                                            );
                                            files.forEach(file => {
                                              const base64String =
                                                file.contents;
                                              const mimeType = file.type;
                                              const fileName = file.name;
                                              const fileBlob = base64ToBlob(
                                                base64String,
                                                mimeType
                                              );
                                              formdata.append(
                                                "files",
                                                fileBlob,
                                                fileName
                                              );
                                            });
                                            const requestOptions = {
                                              method: "POST",
                                              headers: myHeaders,
                                              body: formdata
                                            };
                                            try {
                                              const response = await fetch(
                                                "https://admin.weddingvows.com/api/upload",
                                                requestOptions
                                              );
                                              const result =
                                                await response.json();
                                              return result;
                                            } catch (error) {
                                              console.error(
                                                "Error Uploading files",
                                                error
                                              );
                                              return {
                                                error: "Error Uploading files"
                                              };
                                            }
                                          }
                                          return uploadFiles(aadhar)
                                            .then(res => {
                                              if (!res.error) {
                                                return {
                                                  success: "Upload successful!"
                                                };
                                              } else {
                                                console.error(
                                                  "Error in uploading files",
                                                  error
                                                );
                                                return {
                                                  error: "Some uploads failed!"
                                                };
                                              }
                                            })
                                            .catch(error => {
                                              console.error(
                                                "Error in uploading files",
                                                error
                                              );
                                              return {
                                                error: "Some uploads failed!"
                                              };
                                            });
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                              $steps["invokeGlobalAction"] = $steps.uploadAadhar
                                .success
                                ? (() => {
                                    const actionArgs = {
                                      args: ["success", "Uploaded!"]
                                    };
                                    return $globalActions[
                                      "plasmic-antd5-config-provider.showNotification"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }
                              $steps["invokeGlobalAction2"] = $steps
                                .uploadAadhar.error
                                ? (() => {
                                    const actionArgs = {
                                      args: ["success", "Failed to upload!"]
                                    };
                                    return $globalActions[
                                      "plasmic-antd5-config-provider.showNotification"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction2"] != null &&
                                typeof $steps["invokeGlobalAction2"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction2"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction2"] = await $steps[
                                  "invokeGlobalAction2"
                                ];
                              }
                              $steps["graphqlMutation"] = $steps.uploadAadhar
                                .success
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "bvg9JqrXbdUtvMXZbC26cd",
                                        opId: "31040513-c141-44cd-a9ba-bcaa72134374",
                                        userArgs: {
                                          variables: [
                                            $state.gstNumber.value,
                                            $state.vendorId
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: null,
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["graphqlMutation"] != null &&
                                typeof $steps["graphqlMutation"] === "object" &&
                                typeof $steps["graphqlMutation"].then ===
                                  "function"
                              ) {
                                $steps["graphqlMutation"] = await $steps[
                                  "graphqlMutation"
                                ];
                              }
                              $steps["updateCurrentStep"] = $steps.uploadAadhar
                                .success
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["currentStep"]
                                      },
                                      operation: 0,
                                      value: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;
                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateCurrentStep"] != null &&
                                typeof $steps["updateCurrentStep"] ===
                                  "object" &&
                                typeof $steps["updateCurrentStep"].then ===
                                  "function"
                              ) {
                                $steps["updateCurrentStep"] = await $steps[
                                  "updateCurrentStep"
                                ];
                              }
                            },
                            onFinishFailed: async data => {
                              const $steps = {};
                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: ["error", "Error uploading files"]
                                    };
                                    return $globalActions[
                                      "plasmic-antd5-config-provider.showNotification"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }
                            },
                            onIsSubmittingChange: async (...eventArgs) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "isSubmitting",
                                ["uploadForm", "isSubmitting"],
                                FormWrapper_Helpers
                              ).apply(null, eventArgs);
                            },
                            ref: ref => {
                              $refs["uploadForm"] = ref;
                            },
                            submitSlot: null,
                            wrapperCol: { span: 16, horizontalOnly: true }
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "uploadForm.value"
                              },
                              {
                                name: "isSubmitting",
                                plasmicStateName: "uploadForm.isSubmitting"
                              }
                            ],

                            [],
                            FormWrapper_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <FormWrapper
                              data-plasmic-name={"uploadForm"}
                              data-plasmic-override={overrides.uploadForm}
                              {...child$Props}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__i22Fu
                                )}
                              >
                                <FormItemWrapper
                                  data-plasmic-name={"aadhar3"}
                                  data-plasmic-override={overrides.aadhar3}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.aadhar3
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__j4X88
                                      )}
                                    >
                                      {"Label"}
                                    </div>
                                  }
                                  noLabel={true}
                                  noStyle={false}
                                >
                                  <UploadWrapper
                                    data-plasmic-name={"aadhar2"}
                                    data-plasmic-override={overrides.aadhar2}
                                    accept={"application/pdf"}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.aadhar2
                                    )}
                                    dragAndDropFiles={true}
                                    files={generateStateValueProp($state, [
                                      "aadhar2",
                                      "files"
                                    ])}
                                    listType={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "picture"
                                        : "text"
                                    }
                                    maxCount={1}
                                    onFilesChange={async (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "aadhar2",
                                        "files"
                                      ]).apply(null, eventArgs);
                                    }}
                                    showUploadList={true}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__grBzI
                                      )}
                                    >
                                      <UploadMinimalisticSvgrepoComSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__v4Rlo
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___5PVcd
                                        )}
                                      >
                                        {"Upload your Aadhar Card copy (2mb)*"}
                                      </div>
                                    </div>
                                  </UploadWrapper>
                                </FormItemWrapper>
                                <FormItemWrapper
                                  data-plasmic-name={"gst3"}
                                  data-plasmic-override={overrides.gst3}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.gst3
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__gYiOm
                                      )}
                                    >
                                      {"Label"}
                                    </div>
                                  }
                                  noLabel={true}
                                  noStyle={false}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__ruUIw
                                    )}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        bordered: false,
                                        className: classNames(
                                          "__wab_instance",
                                          sty.gstNumber
                                        ),
                                        onChange: async (...eventArgs) => {
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["gstNumber", "value"],
                                            AntdInput_Helpers
                                          ).apply(null, eventArgs);
                                        },
                                        placeholder: "GST Number*",
                                        value: generateStateValueProp($state, [
                                          "gstNumber",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName: "gstNumber.value"
                                          }
                                        ],

                                        [],
                                        AntdInput_Helpers ?? {},
                                        child$Props
                                      );
                                      return (
                                        <AntdInput
                                          data-plasmic-name={"gstNumber"}
                                          data-plasmic-override={
                                            overrides.gstNumber
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </div>
                                </FormItemWrapper>
                              </Stack__>
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__jSUdr
                                )}
                              >
                                <AntdButton
                                  data-plasmic-name={"home3"}
                                  data-plasmic-override={overrides.home3}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.home3
                                  )}
                                  danger={true}
                                  submitsForm={false}
                                  type={"default"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__iU7R
                                    )}
                                  >
                                    {"Back to Home"}
                                  </div>
                                </AntdButton>
                                <ButtonContainer
                                  className={classNames(
                                    "__wab_instance",
                                    sty.buttonContainer__ffvEc
                                  )}
                                >
                                  <AntdButton
                                    data-plasmic-name={"submit"}
                                    data-plasmic-override={overrides.submit}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.submit
                                    )}
                                    danger={true}
                                    submitsForm={true}
                                    type={"ghost"}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__sXzvS
                                      )}
                                    >
                                      {"Submit"}
                                    </div>
                                  </AntdButton>
                                </ButtonContainer>
                              </Stack__>
                            </FormWrapper>
                          );
                        })()}
                      </Stack__>
                    </Stack__>
                  ) : null}
                </Stack__>
              </div>
              {(() => {
                try {
                  return !$queries.userInfo.error && $state.currentStep > 3;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"successful"}
                  data-plasmic-override={overrides.successful}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.successful)}
                >
                  <CheckCircleSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__bbkml)}
                    role={"img"}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__ggcu1)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nRrT
                      )}
                    >
                      {"You dashboard is ready!"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iwBd7
                      )}
                    >
                      {"Successfully Completed"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fkBIi
                      )}
                    >
                      {
                        "All steps completed. Your vendor dashboard is now ready."
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gyFDq
                      )}
                    >
                      {"Our team will contact you soon for verification!"}
                    </div>
                  </div>
                  <ButtonContainer
                    className={classNames(
                      "__wab_instance",
                      sty.buttonContainer__teH5K
                    )}
                  >
                    <AntdButton
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      ghost={true}
                      onClick={async () => {
                        const $steps = {};
                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {};
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  location.assign(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                      size={"large"}
                      type={"ghost"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__luGug
                        )}
                      >
                        {"Visit Your Dashboard"}
                      </div>
                    </AntdButton>
                  </ButtonContainer>
                </Stack__>
              ) : null}
              <Prompt
                data-plasmic-name={"prompt"}
                data-plasmic-override={overrides.prompt}
                className={classNames("__wab_instance", sty.prompt)}
                subHeading={"Login to register"}
              />
            </div>
          </LayerDefault>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "layerDefault",
    "steps2",
    "vendorOnboardingSteps",
    "forms",
    "businessInformation",
    "businessForm",
    "firstName",
    "input2",
    "input3",
    "businessName",
    "type",
    "tags",
    "tags2",
    "input8",
    "city",
    "state",
    "input7",
    "home",
    "next",
    "whatsappVerification",
    "whatsappForm",
    "whatsapp",
    "whatsapp2",
    "verify",
    "verification",
    "verifyCode",
    "home2",
    "next2",
    "documents",
    "uploadForm",
    "aadhar3",
    "aadhar2",
    "gst3",
    "gstNumber",
    "home3",
    "submit",
    "successful",
    "button",
    "prompt"
  ],

  layerDefault: [
    "layerDefault",
    "steps2",
    "vendorOnboardingSteps",
    "forms",
    "businessInformation",
    "businessForm",
    "firstName",
    "input2",
    "input3",
    "businessName",
    "type",
    "tags",
    "tags2",
    "input8",
    "city",
    "state",
    "input7",
    "home",
    "next",
    "whatsappVerification",
    "whatsappForm",
    "whatsapp",
    "whatsapp2",
    "verify",
    "verification",
    "verifyCode",
    "home2",
    "next2",
    "documents",
    "uploadForm",
    "aadhar3",
    "aadhar2",
    "gst3",
    "gstNumber",
    "home3",
    "submit",
    "successful",
    "button",
    "prompt"
  ],

  steps2: [
    "steps2",
    "vendorOnboardingSteps",
    "forms",
    "businessInformation",
    "businessForm",
    "firstName",
    "input2",
    "input3",
    "businessName",
    "type",
    "tags",
    "tags2",
    "input8",
    "city",
    "state",
    "input7",
    "home",
    "next",
    "whatsappVerification",
    "whatsappForm",
    "whatsapp",
    "whatsapp2",
    "verify",
    "verification",
    "verifyCode",
    "home2",
    "next2",
    "documents",
    "uploadForm",
    "aadhar3",
    "aadhar2",
    "gst3",
    "gstNumber",
    "home3",
    "submit"
  ],

  vendorOnboardingSteps: ["vendorOnboardingSteps"],
  forms: [
    "forms",
    "businessInformation",
    "businessForm",
    "firstName",
    "input2",
    "input3",
    "businessName",
    "type",
    "tags",
    "tags2",
    "input8",
    "city",
    "state",
    "input7",
    "home",
    "next",
    "whatsappVerification",
    "whatsappForm",
    "whatsapp",
    "whatsapp2",
    "verify",
    "verification",
    "verifyCode",
    "home2",
    "next2",
    "documents",
    "uploadForm",
    "aadhar3",
    "aadhar2",
    "gst3",
    "gstNumber",
    "home3",
    "submit"
  ],

  businessInformation: [
    "businessInformation",
    "businessForm",
    "firstName",
    "input2",
    "input3",
    "businessName",
    "type",
    "tags",
    "tags2",
    "input8",
    "city",
    "state",
    "input7",
    "home",
    "next"
  ],

  businessForm: [
    "businessForm",
    "firstName",
    "input2",
    "input3",
    "businessName",
    "type",
    "tags",
    "tags2",
    "input8",
    "city",
    "state",
    "input7",
    "home",
    "next"
  ],

  firstName: ["firstName", "input2"],
  input2: ["input2"],
  input3: ["input3"],
  businessName: ["businessName"],
  type: ["type"],
  tags: ["tags", "tags2"],
  tags2: ["tags2"],
  input8: ["input8"],
  city: ["city"],
  state: ["state"],
  input7: ["input7"],
  home: ["home"],
  next: ["next"],
  whatsappVerification: [
    "whatsappVerification",
    "whatsappForm",
    "whatsapp",
    "whatsapp2",
    "verify",
    "verification",
    "verifyCode",
    "home2",
    "next2"
  ],

  whatsappForm: ["whatsappForm", "whatsapp", "whatsapp2", "verify"],
  whatsapp: ["whatsapp", "whatsapp2"],
  whatsapp2: ["whatsapp2"],
  verify: ["verify"],
  verification: ["verification", "verifyCode"],
  verifyCode: ["verifyCode"],
  home2: ["home2"],
  next2: ["next2"],
  documents: [
    "documents",
    "uploadForm",
    "aadhar3",
    "aadhar2",
    "gst3",
    "gstNumber",
    "home3",
    "submit"
  ],

  uploadForm: [
    "uploadForm",
    "aadhar3",
    "aadhar2",
    "gst3",
    "gstNumber",
    "home3",
    "submit"
  ],

  aadhar3: ["aadhar3", "aadhar2"],
  aadhar2: ["aadhar2"],
  gst3: ["gst3", "gstNumber"],
  gstNumber: ["gstNumber"],
  home3: ["home3"],
  submit: ["submit"],
  successful: ["successful", "button"],
  button: ["button"],
  prompt: ["prompt"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSteps__ArgProps,
          internalVariantPropNames: PlasmicSteps__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSteps__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSteps";
  } else {
    func.displayName = `PlasmicSteps.${nodeName}`;
  }
  return func;
}

export const PlasmicSteps = Object.assign(
  // Top-level PlasmicSteps renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    layerDefault: makeNodeComponent("layerDefault"),
    steps2: makeNodeComponent("steps2"),
    vendorOnboardingSteps: makeNodeComponent("vendorOnboardingSteps"),
    forms: makeNodeComponent("forms"),
    businessInformation: makeNodeComponent("businessInformation"),
    businessForm: makeNodeComponent("businessForm"),
    firstName: makeNodeComponent("firstName"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    businessName: makeNodeComponent("businessName"),
    type: makeNodeComponent("type"),
    tags: makeNodeComponent("tags"),
    tags2: makeNodeComponent("tags2"),
    input8: makeNodeComponent("input8"),
    city: makeNodeComponent("city"),
    state: makeNodeComponent("state"),
    input7: makeNodeComponent("input7"),
    home: makeNodeComponent("home"),
    next: makeNodeComponent("next"),
    whatsappVerification: makeNodeComponent("whatsappVerification"),
    whatsappForm: makeNodeComponent("whatsappForm"),
    whatsapp: makeNodeComponent("whatsapp"),
    whatsapp2: makeNodeComponent("whatsapp2"),
    verify: makeNodeComponent("verify"),
    verification: makeNodeComponent("verification"),
    verifyCode: makeNodeComponent("verifyCode"),
    home2: makeNodeComponent("home2"),
    next2: makeNodeComponent("next2"),
    documents: makeNodeComponent("documents"),
    uploadForm: makeNodeComponent("uploadForm"),
    aadhar3: makeNodeComponent("aadhar3"),
    aadhar2: makeNodeComponent("aadhar2"),
    gst3: makeNodeComponent("gst3"),
    gstNumber: makeNodeComponent("gstNumber"),
    home3: makeNodeComponent("home3"),
    submit: makeNodeComponent("submit"),
    successful: makeNodeComponent("successful"),
    button: makeNodeComponent("button"),
    prompt: makeNodeComponent("prompt"),
    // Metadata about props expected for PlasmicSteps
    internalVariantProps: PlasmicSteps__VariantProps,
    internalArgProps: PlasmicSteps__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSteps;
/* prettier-ignore-end */
