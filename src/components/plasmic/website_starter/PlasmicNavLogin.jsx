// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i8KuCHvKrwawZpBmyovrv7
// Component: HlNBlRhNIM0D
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button2 from "../../Button2"; // plasmic-import: x0IYxFtlqF54/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i8KuCHvKrwawZpBmyovrv7/projectcss
import sty from "./PlasmicNavLogin.module.css"; // plasmic-import: HlNBlRhNIM0D/css
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 1nntRFE4N1ku/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: hl3Nu5D0FvuO/icon

createPlasmicElementProxy;

export const PlasmicNavLogin__VariantProps = new Array();

export const PlasmicNavLogin__ArgProps = new Array();

const $$ = {};

function PlasmicNavLogin__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Button2
        className={classNames("__wab_instance", sty.button2__e5LP2)}
        endIcon={
          <Icon38Icon
            className={classNames(projectcss.all, sty.svg__lgmiw)}
            role={"img"}
          />
        }
        startIcon={
          <CheckSvgIcon
            className={classNames(projectcss.all, sty.svg__rY8Lq)}
            role={"img"}
          />
        }
        submitsForm={true}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__rHfYr
          )}
        >
          {"User Login"}
        </div>
      </Button2>
      <Button2
        className={classNames("__wab_instance", sty.button2__wdzld)}
        color={"clear"}
        endIcon={
          <Icon38Icon
            className={classNames(projectcss.all, sty.svg__hwi5U)}
            role={"img"}
          />
        }
        startIcon={
          <CheckSvgIcon
            className={classNames(projectcss.all, sty.svg__uJof)}
            role={"img"}
          />
        }
        submitsForm={false}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___0ZqOx
          )}
        >
          {"Vendor Login"}
        </div>
      </Button2>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavLogin__ArgProps,
          internalVariantPropNames: PlasmicNavLogin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavLogin";
  } else {
    func.displayName = `PlasmicNavLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicNavLogin = Object.assign(
  // Top-level PlasmicNavLogin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicNavLogin
    internalVariantProps: PlasmicNavLogin__VariantProps,
    internalArgProps: PlasmicNavLogin__ArgProps
  }
);

export default PlasmicNavLogin;
/* prettier-ignore-end */
